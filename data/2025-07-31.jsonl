{"id": "2507.22069", "categories": ["cs.PL", "cs.AI"], "pdf": "https://arxiv.org/pdf/2507.22069", "abs": "https://arxiv.org/abs/2507.22069", "authors": ["Tobias Sesterhenn", "Ian Berlot-Attwell", "Janis Zenkner", "Christian Bartelt"], "title": "A Compute-Matched Re-Evaluation of TroVE on MATH", "comment": null, "summary": "Reusing established theorems and formulas is central to mathematical problem\nsolving, serving as essential building blocks for tackling increasingly complex\nchallenges. Recent work, TroVE, argues that code-generating Large Language\nModels (LLMs) can benefit similarly on the MATH benchmark by inducing and\nreusing higher-level toolboxes. By allocating computational budget across an\nensemble of three modes -- directly generating code, creating tools, and\nreusing tools -- TroVE claims to outperform a PRIMITIVE baseline that only\nperforms direct generation. However, recent analysis (Berlot-Attwell et al.,\n2024) casts doubt on these gains, noting that the tools created are often\ntrivial or rarely reused, suggesting that improvements may stem from\nself-consistency or self-correction. In this work, we re-evaluate TroVE on\nMATH, analyze the impact of each of its modes, and show that its benefit does\nnot come from these mechanisms, but simply from a higher computational budget\nspent for TroVE compared to PRIMITIVE. To this end, we also perform a small\ncorrection in the original implementation of TroVE's selection mechanism,\nboosting TroVE's performance on MATH by 3\\% in accuracy. After matching for\ncompute, the benefit of TroVE reduces to a marginal improvement of 1\\%,\nsuggesting that this toolbox approach does not provide a significant benefit on\nMATH."}
{"id": "2507.22221", "categories": ["cs.AR", "cs.ET", "n/a", "C.3"], "pdf": "https://arxiv.org/pdf/2507.22221", "abs": "https://arxiv.org/abs/2507.22221", "authors": ["Nasrin Akbari", "Mehdi Modarressi", "Alireza Khadem"], "title": "A Customized Memory-aware Architecture for Biological Sequence Alignment", "comment": "20 pages, 11 figures", "summary": "Sequence alignment is a fundamental process in computational biology which\nidentifies regions of similarity in biological sequences. With the exponential\ngrowth in the volume of data in bioinformatics databases, the time, processing\npower, and memory bandwidth for comparing a query sequence with the available\ndatabases grows proportionally. The sequence alignment algorithms often involve\nsimple arithmetic operations and feature high degrees of inherent fine-grained\nand coarse-grained parallelism. These features can be potentially exploited by\na massive parallel processor, such as a GPU, to increase throughput. In this\npaper, we show that the excessive memory bandwidth demand of the sequence\nalignment algorithms prevents exploiting the maximum achievable throughput on\nconventional parallel machines. We then propose a memory-aware architecture to\nreduce the bandwidth demand of the sequence alignment algorithms, effectively\npushing the memory wall to extract higher throughput. The design is integrated\nat the logic layer of an emerging 3D DRAM as a processing-in-memory\narchitecture to further increase the available bandwidth. The experimental\nresults show that the proposed architecture results in up to 2.4x speedup over\na GPU-based design. Moreover, by moving the computation closer to the memory,\npower consumption is reduced by 37%, on average."}
{"id": "2507.22245", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2507.22245", "abs": "https://arxiv.org/abs/2507.22245", "authors": ["Igor Sfiligoi", "Emily A. Belli", "Jeff Candy"], "title": "Minimizing CGYRO HPC Communication Costs in Ensembles with XGYRO by Sharing the Collisional Constant Tensor Structure", "comment": "3 pages, 3 figures, Accepted at ICPP25", "summary": "First-principles fusion plasma simulations are both compute and memory\nintensive, and CGYRO is no exception. The use of many HPC nodes to fit the\nproblem in the available memory thus results in significant communication\noverhead, which is hard to avoid for any single simulation. That said, most\nfusion studies are composed of ensembles of simulations, so we developed a new\ntool, named XGYRO, that executes a whole ensemble of CGYRO simulations as a\nsingle HPC job. By treating the ensemble as a unit, XGYRO can alter the global\nbuffer distribution logic and apply optimizations that are not feasible on any\nsingle simulation, but only on the ensemble as a whole. The main saving comes\nfrom the sharing of the collisional constant tensor structure, since its values\nare typically identical between parameter-sweep simulations. This data\nstructure dominates the memory consumption of CGYRO simulations, so\ndistributing it among the whole ensemble results in drastic memory savings for\neach simulation, which in turn results in overall lower communication overhead."}
{"id": "2507.22294", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2507.22294", "abs": "https://arxiv.org/abs/2507.22294", "authors": ["Gregor von Laszewski", "Wesley Brewer", "Sean R. Wilkinson", "Andrew Shao", "J. P. Fleischer", "Harshad Pitkar", "Christine R. Kirkpatrick", "Geoffrey C. Fox"], "title": "Towards Experiment Execution in Support of Community Benchmark Workflows for HPC", "comment": null, "summary": "A key hurdle is demonstrating compute resource capability with limited\nbenchmarks. We propose workflow templates as a solution, offering adaptable\ndesigns for specific scientific applications. Our paper identifies common usage\npatterns for these templates, drawn from decades of HPC experience, including\nrecent work with the MLCommons Science working group.\n  We found that focusing on simple experiment management tools within the\nbroader computational workflow improves adaptability, especially in education.\nThis concept, which we term benchmark carpentry, is validated by two\nindependent tools: Cloudmesh's Experiment Executor and Hewlett Packard\nEnterprise's SmartSim. Both frameworks, with significant functional overlap,\nhave been tested across various scientific applications, including conduction\ncloudmask, earthquake prediction, simulation-AI/ML interactions, and the\ndevelopment of computational fluid dynamics surrogates."}
{"id": "2507.22339", "categories": ["cs.DC", "cs.LG"], "pdf": "https://arxiv.org/pdf/2507.22339", "abs": "https://arxiv.org/abs/2507.22339", "authors": ["Zhuocheng Liu", "Zhishu Shen", "Qiushi Zheng", "Tiehua Zhang", "Zheng Lei", "Jiong Jin"], "title": "A Semi-Supervised Federated Learning Framework with Hierarchical Clustering Aggregation for Heterogeneous Satellite Networks", "comment": null, "summary": "Low Earth Orbit (LEO) satellites are emerging as key components of 6G\nnetworks, with many already deployed to support large-scale Earth observation\nand sensing related tasks. Federated Learning (FL) presents a promising\nparadigm for enabling distributed intelligence in these resource-constrained\nand dynamic environments. However, achieving reliable convergence, while\nminimizing both processing time and energy consumption, remains a substantial\nchallenge, particularly in heterogeneous and partially unlabeled satellite\nnetworks. To address this challenge, we propose a novel semi-supervised\nfederated learning framework tailored for LEO satellite networks with\nhierarchical clustering aggregation. To further reduce communication overhead,\nwe integrate sparsification and adaptive weight quantization techniques. In\naddition, we divide the FL clustering into two stages: satellite cluster\naggregation stage and Ground Stations (GSs) aggregation stage. The supervised\nlearning at GSs guides selected Parameter Server (PS) satellites, which in turn\nsupport fully unlabeled satellites during the federated training process.\nExtensive experiments conducted on a satellite network testbed demonstrate that\nour proposal can significantly reduce processing time (up to 3x) and energy\nconsumption (up to 4x) compared to other comparative methods while maintaining\nmodel accuracy."}
{"id": "2507.22372", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2507.22372", "abs": "https://arxiv.org/abs/2507.22372", "authors": ["Grace Nansamba", "Evelyn Namugwanya", "David Boehme", "Dewi Yokelson", "Riley Shipley", "Derek Schafer", "Michael McKinsey", "Olga Pearce", "Anthony Skjellum"], "title": "Leveraging Caliper and Benchpark to Analyze MPI Communication Patterns: Insights from AMG2023, Kripke, and Laghos", "comment": "10 pages, 6 figures", "summary": "We introduce ``communication regions'' into the widely used Caliper HPC\nprofiling tool. A communication region is an annotation enabling capture of\nmetrics about the data being communicated (including statistics of these\nmetrics), and metrics about the MPI processes involved in the communications,\nsomething not previously possible in Caliper. We explore the utility of\ncommunication regions with three representative modeling and simulation\napplications, AMG2023, Kripke, and Laghos, all part of the comprehensive\nBenchpark suite that includes Caliper annotations. Enhanced Caliper reveals\ndetailed communication behaviors. Using Caliper and Thicket in tandem, we\ncreate new visualizations of MPI communication patterns, including halo\nexchanges. Our findings reveal communication bottlenecks and detailed\nbehaviors, indicating significant utility of the special-regions addition to\nCaliper. The comparative scaling behavior of both CPU and GPU oriented systems\nare shown; we are able to look at different regions within a given application,\nand see how scalability and message-traffic metrics differ."}
{"id": "2507.22801", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2507.22801", "abs": "https://arxiv.org/abs/2507.22801", "authors": ["Shubhradeep Roy", "Suvarthi Sarkar", "Vivek Verma", "Aryabartta Sahu"], "title": "DSPE: Profit Maximization in Edge-Cloud Storage System using Dynamic Space Partitioning with Erasure Code", "comment": null, "summary": "Edge Storage Systems have emerged as a critical enabler of low latency data\naccess in modern cloud networks by bringing storage and computation closer to\nend users. However, the limited storage capacity of edge servers poses\nsignificant challenges in handling high volume and latency sensitive data\naccess requests, particularly under dynamic workloads. In this work, we propose\na profit driven framework that integrates three key mechanisms which are\ncollaborative caching, erasure coding, and elastic storage partitioning. Unlike\ntraditional replication, erasure coding enables space efficient redundancy,\nallowing data to be reconstructed from any subset of K out of K plus M coded\nblocks. We dynamically partition each edge server s storage into private and\npublic regions. The private region is further subdivided among access points\nbased on their incoming request rates, enabling adaptive control over data\nlocality and ownership. We design a data placement and replacement policy that\ndetermines how and where to store or evict coded data blocks to maximize data\naccess within deadlines. While the private region serves requests from local\nAPs, the public region handles cooperative storage requests from neighboring\nservers. Our proposed Dynamic Space Partitioning and Elastic caching strategy\nis evaluated on both synthetic and real world traces from Netflix and Spotify.\nExperimental results show that our method improves overall system profitability\nby approximately 5 to 8% compared to state of the art approaches under varied\nworkload conditions."}
