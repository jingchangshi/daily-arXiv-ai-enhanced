{"id": "2510.14172", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.14172", "abs": "https://arxiv.org/abs/2510.14172", "authors": ["Yuchao Su", "Srikar Chundury", "Jiajia Li", "Frank Mueller"], "title": "DIAMOND: Systolic Array Acceleration of Sparse Matrix Multiplication for Quantum Simulation", "comment": null, "summary": "Hamiltonian simulation is a key workload in quantum computing, enabling the\nstudy of complex quantum systems and serving as a critical tool for classical\nverification of quantum devices. However, it is computationally challenging\nbecause the Hilbert space dimension grows exponentially with the number of\nqubits. The growing dimensions make matrix exponentiation, the key kernel in\nHamiltonian simulations, increasingly expensive. Matrix exponentiation is\ntypically approximated by the Taylor series, which contains a series of matrix\nmultiplications. Since Hermitian operators are often sparse, sparse matrix\nmultiplication accelerators are essential for improving the scalability of\nclassical Hamiltonian simulation. Yet, existing accelerators are primarily\ndesigned for machine learning workloads and tuned to their characteristic\nsparsity patterns, which differ fundamentally from those in Hamiltonian\nsimulations that are often dominated by structured diagonals.\n  In this work, we present \\name, the first diagonal-optimized quantum\nsimulation accelerator. It exploits the diagonal structure commonly found in\nproblem-Hamiltonian (Hermitian) matrices and leverages a restructured systolic\narray dataflow to transform diagonally sparse matrices into dense computations,\nenabling high utilization and performance. Through detailed cycle-level\nsimulation of diverse benchmarks in HamLib, \\name{} demonstrates average\nperformance improvements of $10.26\\times$, $33.58\\times$, and $53.15\\times$\nover SIGMA, Outer Product, and Gustavson's algorithm, respectively, with peak\nspeedups up to $127.03\\times$ while reducing energy consumption by an average\nof $471.55\\times$ and up to $4630.58\\times$ compared to SIGMA.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u7b2c\u4e00\u4e2a\u9488\u5bf9\u91cf\u5b50\u6a21\u62df\u4f18\u5316\u7684\u5bf9\u89d2\u7ebf\u52a0\u901f\u5668\uff0c\u901a\u8fc7\u5229\u7528\u54c8\u5bc6\u987f\u77e9\u9635\u4e2d\u7684\u5bf9\u89d2\u7ebf\u7ed3\u6784\uff0c\u5c06\u7a00\u758f\u77e9\u9635\u8f6c\u6362\u4e3a\u5bc6\u96c6\u8ba1\u7b97\uff0c\u663e\u8457\u63d0\u5347\u4e86\u6027\u80fd\u548c\u80fd\u6548\u3002", "motivation": "\u54c8\u5bc6\u987f\u6a21\u62df\u662f\u91cf\u5b50\u8ba1\u7b97\u4e2d\u7684\u5173\u952e\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u4f46\u5e0c\u5c14\u4f2f\u7279\u7a7a\u95f4\u7ef4\u5ea6\u968f\u91cf\u5b50\u6bd4\u7279\u6570\u6307\u6570\u589e\u957f\uff0c\u4f7f\u5f97\u77e9\u9635\u6307\u6570\u8fd0\u7b97\u53d8\u5f97\u6781\u5176\u6602\u8d35\u3002\u73b0\u6709\u52a0\u901f\u5668\u4e3b\u8981\u9488\u5bf9\u673a\u5668\u5b66\u4e60\u5de5\u4f5c\u8d1f\u8f7d\u8bbe\u8ba1\uff0c\u4e0d\u9002\u7528\u4e8e\u54c8\u5bc6\u987f\u6a21\u62df\u4e2d\u5e38\u89c1\u7684\u7ed3\u6784\u5316\u5bf9\u89d2\u7ebf\u7a00\u758f\u6a21\u5f0f\u3002", "method": "\u5229\u7528\u95ee\u9898\u54c8\u5bc6\u987f\u77e9\u9635\u4e2d\u5e38\u89c1\u7684\u5bf9\u89d2\u7ebf\u7ed3\u6784\uff0c\u901a\u8fc7\u91cd\u6784\u7684\u8109\u52a8\u9635\u5217\u6570\u636e\u6d41\u5c06\u5bf9\u89d2\u7ebf\u7a00\u758f\u77e9\u9635\u8f6c\u6362\u4e3a\u5bc6\u96c6\u8ba1\u7b97\uff0c\u5b9e\u73b0\u9ad8\u5229\u7528\u7387\u548c\u6027\u80fd\u3002", "result": "\u5728HamLib\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c\u76f8\u6bd4SIGMA\u3001\u5916\u79ef\u7b97\u6cd5\u548cGustavson\u7b97\u6cd5\uff0c\u5e73\u5747\u6027\u80fd\u5206\u522b\u63d0\u534710.26\u500d\u300133.58\u500d\u548c53.15\u500d\uff0c\u5cf0\u503c\u52a0\u901f\u6bd4\u8fbe127.03\u500d\uff0c\u540c\u65f6\u5e73\u5747\u80fd\u8017\u964d\u4f4e471.55\u500d\uff0c\u6700\u9ad8\u8fbe4630.58\u500d\u3002", "conclusion": "\u8be5\u5bf9\u89d2\u7ebf\u4f18\u5316\u91cf\u5b50\u6a21\u62df\u52a0\u901f\u5668\u6709\u6548\u89e3\u51b3\u4e86\u54c8\u5bc6\u987f\u6a21\u62df\u4e2d\u7684\u8ba1\u7b97\u74f6\u9888\uff0c\u4e3a\u7ecf\u5178\u9a8c\u8bc1\u91cf\u5b50\u8bbe\u5907\u63d0\u4f9b\u4e86\u9ad8\u6548\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2510.14558", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2510.14558", "abs": "https://arxiv.org/abs/2510.14558", "authors": ["Amir Mohammad Fadaei Ayyam", "Michael Sammler"], "title": "HITrees: Higher-Order Interaction Trees", "comment": null, "summary": "Recent years have witnessed the rise of compositional semantics as a\nfoundation for formal verification of complex systems. In particular,\ninteraction trees have emerged as a popular denotational semantics. Interaction\ntrees achieve compositionality by providing a reusable library of effects.\nHowever, their notion of effects does not support higher-order effects, i.e.,\neffects that take or return monadic computations. Such effects are essential to\nmodel complex semantic features like parallel composition and call/cc.\n  We introduce Higher-Order Interaction Trees (HITrees), the first variant of\ninteraction trees to support higher-order effects in a non-guarded type theory.\nHITrees accomplish this through two key techniques: first, by designing the\nnotion of effects such that the fixpoints of effects with higher-order input\ncan be expressed as inductive types inside the type theory; and second, using\ndefunctionalization to encode higher-order outputs into a first-order\nrepresentation. We implement HITrees in the Lean proof assistant, accompanied\nby a comprehensive library of effects including concurrency, recursion, and\ncall/cc. Furthermore, we provide two interpretations of HITrees, as state\ntransition systems and as monadic programs. To demonstrate the expressiveness\nof HITrees, we apply them to define the semantics of a language with parallel\ncomposition and call/cc.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u9ad8\u9636\u4ea4\u4e92\u6811\uff08HITrees\uff09\uff0c\u8fd9\u662f\u7b2c\u4e00\u4e2a\u5728\u975e\u5b88\u536b\u7c7b\u578b\u7406\u8bba\u4e2d\u652f\u6301\u9ad8\u9636\u6548\u5e94\u7684\u4ea4\u4e92\u6811\u53d8\u4f53\uff0c\u901a\u8fc7\u4e24\u79cd\u5173\u952e\u6280\u672f\u5b9e\u73b0\uff1a\u8bbe\u8ba1\u6548\u5e94\u6982\u5ff5\u4ee5\u8868\u8fbe\u9ad8\u9636\u8f93\u5165\u7684\u56fa\u5b9a\u70b9\u4f5c\u4e3a\u5f52\u7eb3\u7c7b\u578b\uff0c\u4ee5\u53ca\u4f7f\u7528\u53bb\u51fd\u6570\u5316\u5c06\u9ad8\u9636\u8f93\u51fa\u7f16\u7801\u4e3a\u4e00\u9636\u8868\u793a\u3002", "motivation": "\u4f20\u7edf\u4ea4\u4e92\u6811\u867d\u7136\u901a\u8fc7\u63d0\u4f9b\u53ef\u91cd\u7528\u7684\u6548\u5e94\u5e93\u5b9e\u73b0\u4e86\u7ec4\u5408\u6027\uff0c\u4f46\u5176\u6548\u5e94\u6982\u5ff5\u4e0d\u652f\u6301\u9ad8\u9636\u6548\u5e94\uff08\u5373\u63a5\u53d7\u6216\u8fd4\u56de\u5355\u5b50\u8ba1\u7b97\u7684\u6548\u5e94\uff09\uff0c\u800c\u8fd9\u4e9b\u6548\u5e94\u5bf9\u4e8e\u5efa\u6a21\u5e76\u884c\u7ec4\u5408\u548ccall/cc\u7b49\u590d\u6742\u8bed\u4e49\u7279\u6027\u81f3\u5173\u91cd\u8981\u3002", "method": "1. \u8bbe\u8ba1\u6548\u5e94\u6982\u5ff5\u4f7f\u5f97\u5177\u6709\u9ad8\u9636\u8f93\u5165\u7684\u6548\u5e94\u7684\u56fa\u5b9a\u70b9\u53ef\u4ee5\u5728\u7c7b\u578b\u7406\u8bba\u4e2d\u8868\u793a\u4e3a\u5f52\u7eb3\u7c7b\u578b\uff1b2. \u4f7f\u7528\u53bb\u51fd\u6570\u5316\u5c06\u9ad8\u9636\u8f93\u51fa\u7f16\u7801\u4e3a\u4e00\u9636\u8868\u793a\uff1b\u5728Lean\u8bc1\u660e\u52a9\u624b\u4e2d\u5b9e\u73b0HITrees\uff0c\u5e76\u63d0\u4f9b\u4e86\u5305\u62ec\u5e76\u53d1\u3001\u9012\u5f52\u548ccall/cc\u5728\u5185\u7684\u5168\u9762\u6548\u5e94\u5e93\u3002", "result": "\u6210\u529f\u5b9e\u73b0\u4e86HITrees\uff0c\u63d0\u4f9b\u4e86\u4e24\u79cd\u89e3\u91ca\uff1a\u4f5c\u4e3a\u72b6\u6001\u8f6c\u6362\u7cfb\u7edf\u548c\u4f5c\u4e3a\u5355\u5b50\u7a0b\u5e8f\u3002\u901a\u8fc7\u5b9a\u4e49\u5177\u6709\u5e76\u884c\u7ec4\u5408\u548ccall/cc\u7684\u8bed\u8a00\u8bed\u4e49\uff0c\u5c55\u793a\u4e86HITrees\u7684\u8868\u8fbe\u80fd\u529b\u3002", "conclusion": "HITrees\u662f\u7b2c\u4e00\u4e2a\u5728\u975e\u5b88\u536b\u7c7b\u578b\u7406\u8bba\u4e2d\u652f\u6301\u9ad8\u9636\u6548\u5e94\u7684\u4ea4\u4e92\u6811\u53d8\u4f53\uff0c\u4e3a\u590d\u6742\u7cfb\u7edf\u7684\u5f62\u5f0f\u9a8c\u8bc1\u63d0\u4f9b\u4e86\u66f4\u5f3a\u5927\u7684\u8bed\u4e49\u57fa\u7840\uff0c\u7279\u522b\u662f\u5728\u5904\u7406\u5e76\u884c\u7ec4\u5408\u548ccall/cc\u7b49\u9ad8\u7ea7\u8bed\u8a00\u7279\u6027\u65b9\u9762\u3002"}}
{"id": "2510.14379", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.14379", "abs": "https://arxiv.org/abs/2510.14379", "authors": ["Ming-Han Lin", "Tian-Sheuan Chang"], "title": "Computing-In-Memory Aware Model Adaption For Edge Devices", "comment": "9 pages", "summary": "Computing-in-Memory (CIM) macros have gained popularity for deep learning\nacceleration due to their highly parallel computation and low power\nconsumption. However, limited macro size and ADC precision introduce throughput\nand accuracy bottlenecks. This paper proposes a two-stage CIM-aware model\nadaptation process. The first stage compresses the model and reallocates\nresources based on layer importance and macro size constraints, reducing model\nweight loading latency while improving resource utilization and maintaining\naccuracy. The second stage performs quantization-aware training, incorporating\npartial sum quantization and ADC precision to mitigate quantization errors in\ninference. The proposed approach enhances CIM array utilization to 90\\%,\nenables concurrent activation of up to 256 word lines, and achieves up to 93\\%\ncompression, all while preserving accuracy comparable to previous methods.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u4e24\u9636\u6bb5CIM\u611f\u77e5\u6a21\u578b\u9002\u914d\u65b9\u6cd5\uff0c\u901a\u8fc7\u6a21\u578b\u538b\u7f29\u3001\u8d44\u6e90\u91cd\u5206\u914d\u548c\u91cf\u5316\u611f\u77e5\u8bad\u7ec3\uff0c\u5728\u4fdd\u6301\u7cbe\u5ea6\u7684\u540c\u65f6\u663e\u8457\u63d0\u5347CIM\u5b8f\u7684\u5229\u7528\u7387\u548c\u541e\u5410\u91cf\u3002", "motivation": "CIM\u5b8f\u5728\u6df1\u5ea6\u5b66\u4e60\u52a0\u901f\u4e2d\u9762\u4e34\u5b8f\u5c3a\u5bf8\u9650\u5236\u548cADC\u7cbe\u5ea6\u4e0d\u8db3\u5bfc\u81f4\u7684\u541e\u5410\u91cf\u548c\u7cbe\u5ea6\u74f6\u9888\u95ee\u9898\u3002", "method": "\u7b2c\u4e00\u9636\u6bb5\uff1a\u57fa\u4e8e\u5c42\u91cd\u8981\u6027\u548c\u5b8f\u5c3a\u5bf8\u7ea6\u675f\u8fdb\u884c\u6a21\u578b\u538b\u7f29\u548c\u8d44\u6e90\u91cd\u5206\u914d\uff1b\u7b2c\u4e8c\u9636\u6bb5\uff1a\u5305\u542b\u90e8\u5206\u548c\u91cf\u5316\u4e0eADC\u7cbe\u5ea6\u7684\u91cf\u5316\u611f\u77e5\u8bad\u7ec3\u3002", "result": "CIM\u9635\u5217\u5229\u7528\u7387\u63d0\u5347\u81f390%\uff0c\u652f\u6301256\u4e2a\u5b57\u7ebf\u5e76\u53d1\u6fc0\u6d3b\uff0c\u5b9e\u73b0\u9ad8\u8fbe93%\u7684\u538b\u7f29\u7387\uff0c\u540c\u65f6\u4fdd\u6301\u4e0e\u73b0\u6709\u65b9\u6cd5\u76f8\u5f53\u7684\u7cbe\u5ea6\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u6709\u6548\u89e3\u51b3\u4e86CIM\u5b8f\u7684\u541e\u5410\u91cf\u548c\u7cbe\u5ea6\u74f6\u9888\uff0c\u4e3a\u9ad8\u6548\u6df1\u5ea6\u5b66\u4e60\u52a0\u901f\u63d0\u4f9b\u4e86\u53ef\u884c\u65b9\u6848\u3002"}}
{"id": "2510.14393", "categories": ["cs.AR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.14393", "abs": "https://arxiv.org/abs/2510.14393", "authors": ["Ching-Lin Hsiung", "Tian-Sheuan Chang"], "title": "Low Power Vision Transformer Accelerator with Hardware-Aware Pruning and Optimized Dataflow", "comment": "10 pages; IEEE Transactions on Circuits and Systems I: Regular Papers", "summary": "Current transformer accelerators primarily focus on optimizing self-attention\ndue to its quadratic complexity. However, this focus is less relevant for\nvision transformers with short token lengths, where the Feed-Forward Network\n(FFN) tends to be the dominant computational bottleneck. This paper presents a\nlow power Vision Transformer accelerator, optimized through algorithm-hardware\nco-design. The model complexity is reduced using hardware-friendly dynamic\ntoken pruning without introducing complex mechanisms. Sparsity is further\nimproved by replacing GELU with ReLU activations and employing dynamic FFN2\npruning, achieving a 61.5\\% reduction in operations and a 59.3\\% reduction in\nFFN2 weights, with an accuracy loss of less than 2\\%. The hardware adopts a\nrow-wise dataflow with output-oriented data access to eliminate data\ntransposition, and supports dynamic operations with minimal area overhead.\nImplemented in TSMC's 28nm CMOS technology, our design occupies 496.4K gates\nand includes a 232KB SRAM buffer, achieving a peak throughput of 1024 GOPS at\n1GHz, with an energy efficiency of 2.31 TOPS/W and an area efficiency of 858.61\nGOPS/mm2.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u9488\u5bf9\u89c6\u89c9Transformer\u7684\u4f4e\u529f\u8017\u52a0\u901f\u5668\uff0c\u901a\u8fc7\u7b97\u6cd5-\u786c\u4ef6\u534f\u540c\u8bbe\u8ba1\u4f18\u5316FFN\u8ba1\u7b97\uff0c\u91c7\u7528\u52a8\u6001token\u526a\u679d\u3001ReLU\u6fc0\u6d3b\u66ff\u6362\u548c\u52a8\u6001FFN2\u526a\u679d\uff0c\u663e\u8457\u964d\u4f4e\u8ba1\u7b97\u91cf\u548c\u6743\u91cd\uff0c\u572828nm\u5de5\u827a\u4e0b\u5b9e\u73b0\u9ad8\u80fd\u6548\u548c\u9ad8\u9762\u79ef\u6548\u7387\u3002", "motivation": "\u5f53\u524dTransformer\u52a0\u901f\u5668\u4e3b\u8981\u5173\u6ce8\u81ea\u6ce8\u610f\u529b\u673a\u5236\u7684\u4f18\u5316\uff0c\u4f46\u5bf9\u4e8etoken\u957f\u5ea6\u8f83\u77ed\u7684\u89c6\u89c9Transformer\uff0cFFN\u5f80\u5f80\u6210\u4e3a\u4e3b\u8981\u8ba1\u7b97\u74f6\u9888\uff0c\u9700\u8981\u9488\u5bf9\u6027\u7684\u4f18\u5316\u65b9\u6848\u3002", "method": "\u91c7\u7528\u7b97\u6cd5-\u786c\u4ef6\u534f\u540c\u8bbe\u8ba1\uff1a1\uff09\u786c\u4ef6\u53cb\u597d\u7684\u52a8\u6001token\u526a\u679d\uff1b2\uff09\u7528ReLU\u66ff\u6362GELU\u6fc0\u6d3b\u51fd\u6570\uff1b3\uff09\u52a8\u6001FFN2\u526a\u679d\uff1b4\uff09\u786c\u4ef6\u91c7\u7528\u884c\u5f0f\u6570\u636e\u6d41\u548c\u8f93\u51fa\u5bfc\u5411\u6570\u636e\u8bbf\u95ee\u6d88\u9664\u6570\u636e\u8f6c\u7f6e\u3002", "result": "\u64cd\u4f5c\u91cf\u51cf\u5c1161.5%\uff0cFFN2\u6743\u91cd\u51cf\u5c1159.3%\uff0c\u7cbe\u5ea6\u635f\u5931\u5c0f\u4e8e2%\u3002\u572828nm\u5de5\u827a\u4e0b\uff0c\u5360\u7528496.4K\u95e8\u548c232KB SRAM\uff0c\u5cf0\u503c\u541e\u5410\u91cf1024 GOPS@1GHz\uff0c\u80fd\u65482.31 TOPS/W\uff0c\u9762\u79ef\u6548\u7387858.61 GOPS/mm\u00b2\u3002", "conclusion": "\u8be5\u5de5\u4f5c\u8bc1\u660e\u4e86\u9488\u5bf9\u89c6\u89c9Transformer FFN\u74f6\u9888\u7684\u4f18\u5316\u7b56\u7565\u6709\u6548\u6027\uff0c\u901a\u8fc7\u7b97\u6cd5-\u786c\u4ef6\u534f\u540c\u8bbe\u8ba1\u5b9e\u73b0\u4e86\u9ad8\u6027\u80fd\u3001\u4f4e\u529f\u8017\u7684\u52a0\u901f\u5668\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2510.14024", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.14024", "abs": "https://arxiv.org/abs/2510.14024", "authors": ["Thanh Son Phung", "Douglas Thain"], "title": "Efficiently Executing High-throughput Lightweight LLM Inference Applications on Heterogeneous Opportunistic GPU Clusters with Pervasive Context Management", "comment": null, "summary": "The rise of Generative AI introduces a new class of HPC workloads that\nintegrates lightweight LLMs with traditional high-throughput applications to\naccelerate scientific discovery. The current design of HPC clusters is\ninadequate to support this new class however, either incurring long wait times\non static batch queues or repeatedly paying expensive LLM startup costs upon\nresource preemption. To circumvent both the long queues and high startup costs,\nwe propose to \"decouple\" the LLM initialization context from the actual LLM\ninferences, and retain the context in GPUs until it is no longer needed, a\ntechnique we term \"Pervasive Context Management\". We transform a fact\nverification application to enable this technique, allowing it to reduce its\nexecution time by 72.1% (from 3 hours to 48 minutes) using the same amount of\nGPUs, and scale opportunistically on 32.8% of all GPUs in the cluster and\nfurther reduce the execution time to 13 minutes.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\"\u666e\u904d\u4e0a\u4e0b\u6587\u7ba1\u7406\"\u6280\u672f\uff0c\u5c06LLM\u521d\u59cb\u5316\u4e0a\u4e0b\u6587\u4e0e\u5b9e\u9645\u63a8\u7406\u89e3\u8026\uff0c\u907f\u514d\u91cd\u590d\u542f\u52a8\u6210\u672c\uff0c\u663e\u8457\u63d0\u5347HPC\u96c6\u7fa4\u4e2d\u751f\u6210\u5f0fAI\u5de5\u4f5c\u8d1f\u8f7d\u7684\u6267\u884c\u6548\u7387\u3002", "motivation": "\u5f53\u524dHPC\u96c6\u7fa4\u8bbe\u8ba1\u65e0\u6cd5\u6709\u6548\u652f\u6301\u96c6\u6210\u8f7b\u91cf\u7ea7LLM\u4e0e\u4f20\u7edf\u9ad8\u541e\u5410\u91cf\u5e94\u7528\u7684\u65b0\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u8981\u4e48\u9762\u4e34\u957f\u65f6\u95f4\u7b49\u5f85\uff0c\u8981\u4e48\u627f\u62c5\u6602\u8d35\u7684LLM\u91cd\u590d\u542f\u52a8\u6210\u672c\u3002", "method": "\u901a\u8fc7\u89e3\u8026LLM\u521d\u59cb\u5316\u4e0a\u4e0b\u6587\u4e0e\u63a8\u7406\u8fc7\u7a0b\uff0c\u5c06\u4e0a\u4e0b\u6587\u4fdd\u7559\u5728GPU\u4e2d\u76f4\u5230\u4e0d\u518d\u9700\u8981\uff0c\u5b9e\u73b0\"\u666e\u904d\u4e0a\u4e0b\u6587\u7ba1\u7406\"\u6280\u672f\u3002", "result": "\u4e8b\u5b9e\u9a8c\u8bc1\u5e94\u7528\u6267\u884c\u65f6\u95f4\u51cf\u5c1172.1%\uff08\u4ece3\u5c0f\u65f6\u964d\u81f348\u5206\u949f\uff09\uff0c\u5e76\u80fd\u5728\u96c6\u7fa432.8%\u7684GPU\u4e0a\u673a\u4f1a\u6027\u6269\u5c55\uff0c\u8fdb\u4e00\u6b65\u5c06\u6267\u884c\u65f6\u95f4\u964d\u81f313\u5206\u949f\u3002", "conclusion": "\u8be5\u6280\u672f\u6709\u6548\u89e3\u51b3\u4e86HPC\u96c6\u7fa4\u4e2d\u751f\u6210\u5f0fAI\u5de5\u4f5c\u8d1f\u8f7d\u7684\u961f\u5217\u7b49\u5f85\u548c\u542f\u52a8\u6210\u672c\u95ee\u9898\uff0c\u663e\u8457\u63d0\u5347\u4e86\u6267\u884c\u6548\u7387\u3002"}}
{"id": "2510.14750", "categories": ["cs.AR", "cs.CR"], "pdf": "https://arxiv.org/pdf/2510.14750", "abs": "https://arxiv.org/abs/2510.14750", "authors": ["\u0130smail Emir Y\u00fcksel", "Ataberk Olgun", "F. Nisa Bostanc\u0131", "Haocong Luo", "A. Giray Ya\u011fl\u0131k\u00e7\u0131", "Onur Mutlu"], "title": "ColumnDisturb: Understanding Column-based Read Disturbance in Real DRAM Chips and Implications for Future Systems", "comment": "Extended version of our publication at the 58th IEEE/ACM\n  International Symposium on Microarchitecture (MICRO-58), 2025", "summary": "We experimentally demonstrate a new widespread read disturbance phenomenon,\nColumnDisturb, in real commodity DRAM chips. By repeatedly opening or keeping a\nDRAM row (aggressor row) open, we show that it is possible to disturb DRAM\ncells through a DRAM column (i.e., bitline) and induce bitflips in DRAM cells\nsharing the same columns as the aggressor row (across multiple DRAM subarrays).\nWith ColumnDisturb, the activation of a single row concurrently disturbs cells\nacross as many as three subarrays (e.g., 3072 rows) as opposed to\nRowHammer/RowPress, which affect only a few neighboring rows of the aggressor\nrow in a single subarray. We rigorously characterize ColumnDisturb and its\ncharacteristics under various operational conditions using 216 DDR4 and 4 HBM2\nchips from three major manufacturers. Among our 27 key experimental\nobservations, we highlight two major results and their implications.\n  First, ColumnDisturb affects chips from all three major manufacturers and\nworsens as DRAM technology scales down to smaller node sizes (e.g., the minimum\ntime to induce the first ColumnDisturb bitflip reduces by up to 5.06x). We\nobserve that, in existing DRAM chips, ColumnDisturb induces bitflips within a\nstandard DDR4 refresh window (e.g., in 63.6 ms) in multiple cells. We predict\nthat, as DRAM technology node size reduces, ColumnDisturb would worsen in\nfuture DRAM chips, likely causing many more bitflips in the standard refresh\nwindow. Second, ColumnDisturb induces bitflips in many (up to 198x) more rows\nthan retention failures. Therefore, ColumnDisturb has strong implications for\nretention-aware refresh mechanisms that leverage the heterogeneity in cell\nretention times: our detailed analyses show that ColumnDisturb greatly reduces\nthe benefits of such mechanisms.", "AI": {"tldr": "\u5b9e\u9a8c\u53d1\u73b0DRAM\u82af\u7247\u4e2d\u5e7f\u6cdb\u5b58\u5728\u4e00\u79cd\u65b0\u7684\u8bfb\u53d6\u5e72\u6270\u73b0\u8c61ColumnDisturb\uff0c\u901a\u8fc7\u91cd\u590d\u6253\u5f00\u6216\u4fdd\u6301DRAM\u884c\uff08\u653b\u51fb\u884c\uff09\u53ef\u4ee5\u5e72\u6270\u5171\u4eab\u76f8\u540c\u5217\u7684DRAM\u5355\u5143\uff0c\u5bfc\u81f4\u6bd4\u7279\u7ffb\u8f6c\uff0c\u5f71\u54cd\u8303\u56f4\u53ef\u8fbe\u4e09\u4e2a\u5b50\u9635\u5217\uff083072\u884c\uff09\uff0c\u8fdc\u5927\u4e8eRowHammer/RowPress\u7684\u5f71\u54cd\u8303\u56f4\u3002", "motivation": "\u7814\u7a76DRAM\u82af\u7247\u4e2d\u5b58\u5728\u7684\u65b0\u7684\u8bfb\u53d6\u5e72\u6270\u73b0\u8c61\uff0c\u8be5\u73b0\u8c61\u4f1a\u5f71\u54cdDRAM\u7684\u53ef\u9760\u6027\u548c\u5b89\u5168\u6027\uff0c\u7279\u522b\u662f\u5728DRAM\u6280\u672f\u4e0d\u65ad\u7f29\u5c0f\u7684\u8d8b\u52bf\u4e0b\uff0c\u8fd9\u79cd\u5e72\u6270\u95ee\u9898\u53ef\u80fd\u53d8\u5f97\u66f4\u52a0\u4e25\u91cd\u3002", "method": "\u4f7f\u7528216\u4e2aDDR4\u548c4\u4e2aHBM2\u82af\u7247\u4ece\u4e09\u5927\u5236\u9020\u5546\u8fdb\u884c\u5b9e\u9a8c\uff0c\u5728\u591a\u79cd\u64cd\u4f5c\u6761\u4ef6\u4e0b\u4e25\u683c\u8868\u5f81ColumnDisturb\u53ca\u5176\u7279\u6027\uff0c\u5171\u83b7\u5f9727\u4e2a\u5173\u952e\u5b9e\u9a8c\u89c2\u5bdf\u7ed3\u679c\u3002", "result": "1. ColumnDisturb\u5f71\u54cd\u6240\u6709\u4e09\u5927\u5236\u9020\u5546\u7684\u82af\u7247\uff0c\u4e14\u968f\u7740DRAM\u6280\u672f\u8282\u70b9\u7f29\u5c0f\u800c\u6076\u5316\uff08\u9996\u6b21\u8bf1\u5bfc\u6bd4\u7279\u7ffb\u8f6c\u7684\u6700\u77ed\u65f6\u95f4\u51cf\u5c11\u8fbe5.06\u500d\uff09\uff1b2. ColumnDisturb\u5bfc\u81f4\u7684\u6bd4\u7279\u7ffb\u8f6c\u884c\u6570\u6bd4\u4fdd\u7559\u6545\u969c\u591a198\u500d\uff0c\u663e\u8457\u964d\u4f4e\u4e86\u5229\u7528\u5355\u5143\u4fdd\u7559\u65f6\u95f4\u5f02\u8d28\u6027\u7684\u5237\u65b0\u673a\u5236\u7684\u4f18\u52bf\u3002", "conclusion": "ColumnDisturb\u662f\u4e00\u79cd\u5e7f\u6cdb\u5b58\u5728\u7684DRAM\u5e72\u6270\u73b0\u8c61\uff0c\u968f\u7740\u6280\u672f\u8282\u70b9\u7f29\u5c0f\u4f1a\u53d8\u5f97\u66f4\u52a0\u4e25\u91cd\uff0c\u5bf9DRAM\u53ef\u9760\u6027\u548c\u73b0\u6709\u5237\u65b0\u673a\u5236\u6784\u6210\u91cd\u5927\u6311\u6218\uff0c\u9700\u8981\u5728\u672a\u6765DRAM\u8bbe\u8ba1\u4e2d\u52a0\u4ee5\u89e3\u51b3\u3002"}}
{"id": "2510.14050", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.14050", "abs": "https://arxiv.org/abs/2510.14050", "authors": ["Michael Mandulak", "Sayan Ghosh", "S M Ferdous", "Mahantesh Halappanavar", "George Slota"], "title": "Anonymized Network Sensing using C++26 std::execution on GPUs", "comment": null, "summary": "Large-scale network sensing plays a vital role in network traffic analysis\nand characterization. As network packet data grows increasingly large, parallel\nmethods have become mainstream for network analytics. While effective,\nGPU-based implementations still face start-up challenges in host-device memory\nmanagement and porting complex workloads on devices, among others. To mitigate\nthese challenges, composable frameworks have emerged using modern C++\nprogramming language, for efficiently deploying analytics tasks on GPUs.\nSpecifically, the recent C++26 Senders model of asynchronous data operation\nchaining provides a simple interface for bulk pushing tasks to varied device\nexecution contexts.\n  Considering the prominence of contemporary dense-GPU platforms and\nvendor-leveraged software libraries, such a programming model consider GPUs as\nfirst-class execution resources (compared to traditional host-centric\nprogramming models), allowing convenient development of multi-GPU application\nworkloads via expressive and standardized asynchronous semantics. In this\npaper, we discuss practical aspects of developing the Anonymized Network\nSensing Graph Challenge on dense-GPU systems using the recently proposed C++26\nSenders model. Adopting a generic and productive programming model does not\nnecessarily impact the critical-path performance (as compared to low-level\nproprietary vendor-based programming models): our commodity library-based\nimplementation achieves up to 55x performance improvements on 8x NVIDIA A100\nGPUs as compared to the reference serial GraphBLAS baseline.", "AI": {"tldr": "\u672c\u6587\u63a2\u8ba8\u4e86\u4f7f\u7528C++26 Senders\u6a21\u578b\u5728\u5bc6\u96c6GPU\u7cfb\u7edf\u4e0a\u5f00\u53d1\u7f51\u7edc\u611f\u77e5\u56fe\u6311\u6218\u7684\u5b9e\u8df5\u65b9\u9762\uff0c\u76f8\u6bd4\u4e32\u884cGraphBLAS\u57fa\u7ebf\u5b9e\u73b0\u4e8655\u500d\u7684\u6027\u80fd\u63d0\u5347\u3002", "motivation": "\u968f\u7740\u7f51\u7edc\u6570\u636e\u5305\u6570\u636e\u91cf\u65e5\u76ca\u589e\u5927\uff0c\u57fa\u4e8eGPU\u7684\u5e76\u884c\u65b9\u6cd5\u5df2\u6210\u4e3a\u7f51\u7edc\u5206\u6790\u7684\u4e3b\u6d41\uff0c\u4f46\u4ecd\u9762\u4e34\u4e3b\u673a-\u8bbe\u5907\u5185\u5b58\u7ba1\u7406\u548c\u590d\u6742\u5de5\u4f5c\u8d1f\u8f7d\u79fb\u690d\u7b49\u6311\u6218\u3002\u53ef\u7ec4\u5408\u6846\u67b6\u901a\u8fc7\u73b0\u4ee3C++\u7f16\u7a0b\u8bed\u8a00\u4e3aGPU\u9ad8\u6548\u90e8\u7f72\u5206\u6790\u4efb\u52a1\u63d0\u4f9b\u4e86\u89e3\u51b3\u65b9\u6848\u3002", "method": "\u91c7\u7528C++26 Senders\u6a21\u578b\u7684\u5f02\u6b65\u6570\u636e\u64cd\u4f5c\u94fe\uff0c\u5c06GPU\u4f5c\u4e3a\u4e00\u7b49\u6267\u884c\u8d44\u6e90\uff0c\u901a\u8fc7\u8868\u8fbe\u6027\u548c\u6807\u51c6\u5316\u7684\u5f02\u6b65\u8bed\u4e49\u5f00\u53d1\u591aGPU\u5e94\u7528\u5de5\u4f5c\u8d1f\u8f7d\u3002", "result": "\u57fa\u4e8e\u5546\u54c1\u5e93\u7684\u5b9e\u73b0\u76f8\u6bd4\u53c2\u8003\u4e32\u884cGraphBLAS\u57fa\u7ebf\uff0c\u57288\u4e2aNVIDIA A100 GPU\u4e0a\u5b9e\u73b0\u4e86\u9ad8\u8fbe55\u500d\u7684\u6027\u80fd\u6539\u8fdb\u3002", "conclusion": "\u91c7\u7528\u901a\u7528\u4e14\u9ad8\u6548\u7684\u7a0b\u5e8f\u8bbe\u8ba1\u6a21\u578b\u4e0d\u4f1a\u5f71\u54cd\u5173\u952e\u8def\u5f84\u6027\u80fd\uff0c\u76f8\u6bd4\u4f4e\u7ea7\u522b\u7684\u4e13\u6709\u4f9b\u5e94\u5546\u7f16\u7a0b\u6a21\u578b\uff0cC++26 Senders\u6a21\u578b\u4e3a\u5bc6\u96c6GPU\u7cfb\u7edf\u63d0\u4f9b\u4e86\u6709\u6548\u7684\u5f00\u53d1\u65b9\u6848\u3002"}}
{"id": "2510.14730", "categories": ["cs.DC", "cs.AR"], "pdf": "https://arxiv.org/pdf/2510.14730", "abs": "https://arxiv.org/abs/2510.14730", "authors": ["Alejandro Cano", "Crist\u00f3bal Camarero", "Carmen Mart\u00ednez", "Ram\u00f3n Beivide"], "title": "Deadlock-free routing for Full-mesh networks without using Virtual Channels", "comment": null, "summary": "High-radix, low-diameter networks like HyperX and Dragonfly use a Full-mesh\ncore, and rely on multiple virtual channels (VCs) to avoid packet deadlocks in\nadaptive routing. However, VCs introduce significant overhead in the switch in\nterms of area, power, and design complexity, limiting the switch scalability.\nThis paper starts by revisiting VC-less routing through link ordering schemes\nin Full-mesh networks, which offer implementation simplicity but suffer from\nperformance degradation under adversarial traffic. Thus, to overcome these\nchallenges, we propose TERA (Topology-Embedded Routing Algorithm), a novel\nrouting algorithm which employs an embedded physical subnetwork to provide\ndeadlock-free non-minimal paths without using VCs.\n  In a Full-mesh network, TERA outperforms link ordering routing algorithms by\n80% when dealing with adversarial traffic, and up to 100% in application\nkernels. Furthermore, compared to other VC-based approaches, it reduces buffer\nrequirements by 50%, while maintaining comparable latency and throughput.\nLastly, early results from a 2D-HyperX evaluation show that TERA outperforms\nstate-of-the-art algorithms that use the same number of VCs, achieving\nperformance improvements of up to 32%.", "AI": {"tldr": "\u63d0\u51faTERA\u8def\u7531\u7b97\u6cd5\uff0c\u5728Full-mesh\u7f51\u7edc\u4e2d\u901a\u8fc7\u5d4c\u5165\u7269\u7406\u5b50\u7f51\u63d0\u4f9b\u65e0\u6b7b\u9501\u7684\u975e\u6700\u5c0f\u8def\u5f84\uff0c\u65e0\u9700\u865a\u62df\u901a\u9053\uff0c\u663e\u8457\u63d0\u5347\u6027\u80fd\u5e76\u51cf\u5c11\u7f13\u51b2\u533a\u9700\u6c42\u3002", "motivation": "\u4f20\u7edfFull-mesh\u7f51\u7edc\u4f9d\u8d56\u865a\u62df\u901a\u9053\u907f\u514d\u6b7b\u9501\uff0c\u4f46VC\u5f15\u5165\u9762\u79ef\u3001\u529f\u8017\u548c\u8bbe\u8ba1\u590d\u6742\u5ea6\u5f00\u9500\uff0c\u9650\u5236\u4e86\u4ea4\u6362\u673a\u53ef\u6269\u5c55\u6027\u3002\u94fe\u8def\u6392\u5e8f\u65b9\u6848\u867d\u7b80\u5355\u4f46\u6027\u80fd\u8f83\u5dee\u3002", "method": "TERA\u7b97\u6cd5\u5728Full-mesh\u7f51\u7edc\u4e2d\u5d4c\u5165\u7269\u7406\u5b50\u7f51\uff0c\u63d0\u4f9b\u65e0\u6b7b\u9501\u7684\u975e\u6700\u5c0f\u8def\u5f84\uff0c\u5b8c\u5168\u907f\u514d\u4f7f\u7528\u865a\u62df\u901a\u9053\u3002", "result": "\u5728Full-mesh\u7f51\u7edc\u4e2d\uff0cTERA\u6bd4\u94fe\u8def\u6392\u5e8f\u7b97\u6cd5\u5728\u5bf9\u6297\u6d41\u91cf\u4e0b\u6027\u80fd\u63d0\u534780%\uff0c\u5e94\u7528\u5185\u6838\u4e2d\u63d0\u5347100%\uff1b\u76f8\u6bd4VC\u65b9\u6cd5\u51cf\u5c1150%\u7f13\u51b2\u533a\u9700\u6c42\uff0c\u4fdd\u6301\u76f8\u8fd1\u5ef6\u8fdf\u548c\u541e\u5410\u91cf\uff1b\u57282D-HyperX\u4e2d\u6bd4\u540c\u7c7b\u7b97\u6cd5\u6027\u80fd\u63d0\u534732%\u3002", "conclusion": "TERA\u901a\u8fc7\u62d3\u6251\u5d4c\u5165\u8def\u7531\u7b97\u6cd5\u6210\u529f\u89e3\u51b3\u4e86Full-mesh\u7f51\u7edc\u4e2d\u865a\u62df\u901a\u9053\u7684\u5f00\u9500\u95ee\u9898\uff0c\u5728\u4fdd\u6301\u6027\u80fd\u7684\u540c\u65f6\u663e\u8457\u964d\u4f4e\u4e86\u5b9e\u73b0\u590d\u6742\u5ea6\u3002"}}
{"id": "2510.14126", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.14126", "abs": "https://arxiv.org/abs/2510.14126", "authors": ["Nikos Pagonas", "Yeounoh Chung", "Kostis Kaffes", "Arvind Krishnamurthy"], "title": "Cortex: Workflow-Aware Resource Pooling and Scheduling for Agentic Serving", "comment": null, "summary": "We introduce Cortex, a prototype workflow-aware serving platform designed for\nagentic workloads. The core principle of Cortex is stage isolation: it\nprovisions dedicated resource pools for each distinct stage of an agentic\nworkflow. This simple yet powerful strategy mitigates inter-stage interference\nin compute and memory, leading to better KV cache utilization, higher\nthroughput, and more predictable performance. By customizing resource\nallocation and scheduling within each distinct stage of agentic workflows,\nCortex lays the groundwork for more advanced, agent-native serving paradigms,\nincluding malleable resource management, speculative execution of workflow\nbranches, and a shared, multi-tiered cache for \"agentic state.\"", "AI": {"tldr": "Cortex\u662f\u4e00\u4e2a\u9762\u5411\u667a\u80fd\u4f53\u5de5\u4f5c\u8d1f\u8f7d\u7684\u539f\u578b\u5de5\u4f5c\u6d41\u611f\u77e5\u670d\u52a1\u5e73\u53f0\uff0c\u901a\u8fc7\u9636\u6bb5\u9694\u79bb\u7b56\u7565\u4e3a\u5de5\u4f5c\u6d41\u7684\u4e0d\u540c\u9636\u6bb5\u63d0\u4f9b\u4e13\u7528\u8d44\u6e90\u6c60\uff0c\u4ece\u800c\u63d0\u9ad8\u6027\u80fd\u8868\u73b0\u3002", "motivation": "\u89e3\u51b3\u667a\u80fd\u4f53\u5de5\u4f5c\u6d41\u4e2d\u4e0d\u540c\u9636\u6bb5\u95f4\u7684\u8ba1\u7b97\u548c\u5185\u5b58\u5e72\u6270\u95ee\u9898\uff0c\u63d0\u5347KV\u7f13\u5b58\u5229\u7528\u7387\u3001\u541e\u5410\u91cf\u548c\u6027\u80fd\u53ef\u9884\u6d4b\u6027\u3002", "method": "\u91c7\u7528\u9636\u6bb5\u9694\u79bb\u7b56\u7565\uff0c\u4e3a\u667a\u80fd\u4f53\u5de5\u4f5c\u6d41\u7684\u6bcf\u4e2a\u4e0d\u540c\u9636\u6bb5\u914d\u7f6e\u4e13\u7528\u8d44\u6e90\u6c60\uff0c\u5e76\u5b9a\u5236\u5404\u9636\u6bb5\u7684\u8d44\u6e90\u5206\u914d\u548c\u8c03\u5ea6\u673a\u5236\u3002", "result": "\u8be5\u7b56\u7565\u51cf\u5c11\u4e86\u9636\u6bb5\u95f4\u5e72\u6270\uff0c\u6539\u5584\u4e86KV\u7f13\u5b58\u5229\u7528\uff0c\u5b9e\u73b0\u4e86\u66f4\u9ad8\u7684\u541e\u5410\u91cf\u548c\u66f4\u53ef\u9884\u6d4b\u7684\u6027\u80fd\u3002", "conclusion": "Cortex\u4e3a\u66f4\u5148\u8fdb\u7684\u667a\u80fd\u4f53\u539f\u751f\u670d\u52a1\u8303\u5f0f\u5960\u5b9a\u4e86\u57fa\u7840\uff0c\u5305\u62ec\u53ef\u6269\u5c55\u8d44\u6e90\u7ba1\u7406\u3001\u5de5\u4f5c\u6d41\u5206\u652f\u7684\u63a8\u6d4b\u6267\u884c\u4ee5\u53ca\u5171\u4eab\u7684\u591a\u5c42\u667a\u80fd\u4f53\u72b6\u6001\u7f13\u5b58\u3002"}}
{"id": "2510.14147", "categories": ["cs.DC", "cs.CG", "cs.DS"], "pdf": "https://arxiv.org/pdf/2510.14147", "abs": "https://arxiv.org/abs/2510.14147", "authors": ["Gabriel Raulet", "Dmitriy Morozov", "Aydin Buluc", "Katherine Yelick"], "title": "Distributed-Memory Parallel Algorithms for Fixed-Radius Near Neighbor Graph Construction", "comment": "11 pages, 5 figures, 3 tables", "summary": "Computing fixed-radius near-neighbor graphs is an important first step for\nmany data analysis algorithms. Near-neighbor graphs connect points that are\nclose under some metric, endowing point clouds with a combinatorial structure.\nAs computing power and data acquisition methods advance, diverse sources of\nlarge scientific datasets would greatly benefit from scalable solutions to this\ncommon subroutine for downstream analysis. Prior work on parallel nearest\nneighbors has made great progress in problems like k-nearest and approximate\nnearest neighbor search problems, with particular attention on Euclidean\nspaces. Yet many applications need exact solutions and non-Euclidean metrics.\nThis paper presents a scalable sparsity-aware distributed memory algorithm\nusing cover trees to compute near-neighbor graphs in general metric spaces. We\nprovide a shared-memory algorithm for cover tree construction and demonstrate\nits competitiveness with state-of-the-art fixed-radius search data structures.\nWe then introduce two distributed-memory algorithms for the near-neighbor graph\nproblem, a simple point-partitioning strategy and a spatial-partitioning\nstrategy, which leverage the cover tree algorithm on each node. Our algorithms\nexhibit parallel scaling across a variety of real and synthetic datasets for\nboth traditional and non-traditional metrics. On real world high dimensional\ndatasets with one million points, we achieve speedups up to 678.34x over the\nstate-of-the-art using 1024 cores for graphs with 70 neighbors per vertex (on\naverage), and up to 1590.99x using 4096 cores for graphs with 500 neighbors per\nvertex (on average).", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u5206\u5e03\u5f0f\u5185\u5b58\u7b97\u6cd5\uff0c\u4f7f\u7528\u8986\u76d6\u6811\u8ba1\u7b97\u901a\u7528\u5ea6\u91cf\u7a7a\u95f4\u4e2d\u7684\u56fa\u5b9a\u534a\u5f84\u8fd1\u90bb\u56fe\uff0c\u5728\u771f\u5b9e\u4e16\u754c\u9ad8\u7ef4\u6570\u636e\u96c6\u4e0a\u5b9e\u73b0\u4e86\u663e\u8457\u7684\u5e76\u884c\u52a0\u901f\u3002", "motivation": "\u968f\u7740\u8ba1\u7b97\u80fd\u529b\u548c\u6570\u636e\u83b7\u53d6\u65b9\u6cd5\u7684\u8fdb\u6b65\uff0c\u5927\u578b\u79d1\u5b66\u6570\u636e\u96c6\u9700\u8981\u53ef\u6269\u5c55\u7684\u8fd1\u90bb\u56fe\u8ba1\u7b97\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u73b0\u6709\u5de5\u4f5c\u4e3b\u8981\u5173\u6ce8\u6b27\u51e0\u91cc\u5f97\u7a7a\u95f4\u548c\u8fd1\u4f3c\u89e3\uff0c\u800c\u8bb8\u591a\u5e94\u7528\u9700\u8981\u7cbe\u786e\u89e3\u548c\u975e\u6b27\u51e0\u91cc\u5f97\u5ea6\u91cf\u3002", "method": "\u63d0\u51fa\u4e86\u5171\u4eab\u5185\u5b58\u7684\u8986\u76d6\u6811\u6784\u5efa\u7b97\u6cd5\uff0c\u4ee5\u53ca\u4e24\u79cd\u5206\u5e03\u5f0f\u5185\u5b58\u7b97\u6cd5\uff1a\u7b80\u5355\u7684\u70b9\u5206\u533a\u7b56\u7565\u548c\u7a7a\u95f4\u5206\u533a\u7b56\u7565\uff0c\u5728\u8282\u70b9\u4e0a\u5229\u7528\u8986\u76d6\u6811\u7b97\u6cd5\u3002", "result": "\u5728\u771f\u5b9e\u4e16\u754c\u9ad8\u7ef4\u6570\u636e\u96c6\u4e0a\uff0c\u4f7f\u75281024\u6838\u65f6\u5b9e\u73b0\u4e86678.34\u500d\u7684\u52a0\u901f\uff08\u5e73\u5747\u6bcf\u4e2a\u9876\u70b970\u4e2a\u90bb\u5c45\uff09\uff0c\u4f7f\u75284096\u6838\u65f6\u5b9e\u73b0\u4e861590.99\u500d\u7684\u52a0\u901f\uff08\u5e73\u5747\u6bcf\u4e2a\u9876\u70b9500\u4e2a\u90bb\u5c45\uff09\u3002", "conclusion": "\u8be5\u7b97\u6cd5\u5728\u5404\u79cd\u771f\u5b9e\u548c\u5408\u6210\u6570\u636e\u96c6\u4e0a\u8868\u73b0\u51fa\u826f\u597d\u7684\u5e76\u884c\u6269\u5c55\u6027\uff0c\u9002\u7528\u4e8e\u4f20\u7edf\u548c\u975e\u4f20\u7edf\u5ea6\u91cf\uff0c\u663e\u8457\u4f18\u4e8e\u73b0\u6709\u6280\u672f\u3002"}}
{"id": "2510.14151", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.14151", "abs": "https://arxiv.org/abs/2510.14151", "authors": ["Saeed Moradi", "Koosha Esmaeilzadeh Khorasani", "Sara Rouhani"], "title": "Privacy-Preserving and Incentive-Driven Relay-Based Framework for Cross-Domain Blockchain Interoperability", "comment": null, "summary": "Interoperability is essential for transforming blockchains from isolated\nnetworks into collaborative ecosystems, unlocking their full potential. While\nsignificant progress has been made in public blockchain interoperability,\nbridging permissioned and permissionless blockchains poses unique challenges\ndue to differences in access control, architectures, and security requirements.\nThis paper introduces a blockchain-agnostic framework to enable\ninteroperability between permissioned and permissionless networks. Leveraging\ncryptographic techniques, the framework ensures secure data exchanges. Its\nlightweight architectural design simplifies implementation and maintenance,\nwhile the integration of Clover and Dandelion++ protocols enhances transaction\nanonymity. Performance evaluations demonstrate the framework's effectiveness in\nachieving secure and efficient interoperability by measuring the forwarding\ntime, the throughput, the availability, and their collusion impact of the\nsystem across heterogeneous blockchain ecosystems.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u533a\u5757\u94fe\u65e0\u5173\u7684\u6846\u67b6\uff0c\u7528\u4e8e\u5b9e\u73b0\u8bb8\u53ef\u94fe\u548c\u65e0\u8bb8\u53ef\u94fe\u4e4b\u95f4\u7684\u4e92\u64cd\u4f5c\u6027\uff0c\u901a\u8fc7\u5bc6\u7801\u5b66\u6280\u672f\u786e\u4fdd\u5b89\u5168\u6570\u636e\u4ea4\u6362\uff0c\u5e76\u96c6\u6210\u9690\u79c1\u589e\u5f3a\u534f\u8bae\u3002", "motivation": "\u533a\u5757\u94fe\u4e92\u64cd\u4f5c\u6027\u5bf9\u4e8e\u5c06\u5b64\u7acb\u7f51\u7edc\u8f6c\u53d8\u4e3a\u534f\u4f5c\u751f\u6001\u7cfb\u7edf\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u8bb8\u53ef\u94fe\u548c\u65e0\u8bb8\u53ef\u94fe\u5728\u8bbf\u95ee\u63a7\u5236\u3001\u67b6\u6784\u548c\u5b89\u5168\u8981\u6c42\u65b9\u9762\u7684\u5dee\u5f02\u5e26\u6765\u4e86\u72ec\u7279\u6311\u6218\u3002", "method": "\u91c7\u7528\u8f7b\u91cf\u7ea7\u67b6\u6784\u8bbe\u8ba1\uff0c\u96c6\u6210Clover\u548cDandelion++\u534f\u8bae\u589e\u5f3a\u4ea4\u6613\u533f\u540d\u6027\uff0c\u5229\u7528\u5bc6\u7801\u5b66\u6280\u672f\u786e\u4fdd\u5b89\u5168\u6570\u636e\u4ea4\u6362\u3002", "result": "\u6027\u80fd\u8bc4\u4f30\u663e\u793a\u8be5\u6846\u67b6\u5728\u5f02\u6784\u533a\u5757\u94fe\u751f\u6001\u7cfb\u7edf\u4e2d\u5b9e\u73b0\u4e86\u5b89\u5168\u9ad8\u6548\u7684\u4e92\u64cd\u4f5c\u6027\uff0c\u6d4b\u91cf\u4e86\u8f6c\u53d1\u65f6\u95f4\u3001\u541e\u5410\u91cf\u3001\u53ef\u7528\u6027\u53ca\u5176\u5171\u8c0b\u5f71\u54cd\u3002", "conclusion": "\u8be5\u6846\u67b6\u6210\u529f\u89e3\u51b3\u4e86\u8bb8\u53ef\u94fe\u548c\u65e0\u8bb8\u53ef\u94fe\u4e4b\u95f4\u7684\u4e92\u64cd\u4f5c\u6027\u6311\u6218\uff0c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b89\u5168\u3001\u9ad8\u6548\u4e14\u6613\u4e8e\u5b9e\u73b0\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2510.14186", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.14186", "abs": "https://arxiv.org/abs/2510.14186", "authors": ["Pengkun Ren", "Hai Dong", "Nasrin Sohrabi", "Zahir Tari", "Pengcheng Zhang"], "title": "Proof-Carrying Fair Ordering: Asymmetric Verification for BFT via Incremental Graphs", "comment": "18 pages, 4 figures", "summary": "Byzantine Fault-Tolerant (BFT) consensus protocols ensure agreement on\ntransaction ordering despite malicious actors, but unconstrained ordering power\nenables sophisticated value extraction attacks like front running and sandwich\nattacks - a critical threat to blockchain systems. Order-fair consensus curbs\nadversarial value extraction by constraining how leaders may order\ntransactions. While state-of-the-art protocols such as Themis attain strong\nguarantees through graph-based ordering, they ask every replica to re-run the\nleader's expensive ordering computation for validation - an inherently\nsymmetric and redundant paradigm. We present AUTIG, a high-performance,\npluggable order-fairness service that breaks this symmetry. Our key insight is\nthat verifying a fair order does not require re-computing it. Instead,\nverification can be reduced to a stateless audit of succinct, verifiable\nassertions about the ordering graph's properties. AUTIG realizes this via an\nasymmetric architecture: the leader maintains a persistent\nUnconfirmed-Transaction Incremental Graph (UTIG) to amortize graph construction\nacross rounds and emits a structured proof of fairness with each proposal;\nfollowers validate the proof without maintaining historical state. AUTIG\nintroduces three critical innovations: (i) incremental graph maintenance driven\nby threshold-crossing events and state changes; (ii) a decoupled pipeline that\noverlaps leader-side collection/update/extraction with follower-side stateless\nverification; and (iii) a proof design covering all internal pairs in the\nfinalized prefix plus a frontier completeness check to rule out hidden external\ndependencies. We implement AUTIG and evaluate it against symmetric graph-based\nbaselines under partial synchrony. Experiments show higher throughput and lower\nend-to-end latency while preserving gamma-batch-order-fairness.", "AI": {"tldr": "AUTIG\u662f\u4e00\u4e2a\u9ad8\u6027\u80fd\u3001\u53ef\u63d2\u62d4\u7684\u987a\u5e8f\u516c\u5e73\u670d\u52a1\uff0c\u901a\u8fc7\u975e\u5bf9\u79f0\u67b6\u6784\u6253\u7834\u4f20\u7edf\u5bf9\u79f0\u9a8c\u8bc1\u8303\u5f0f\uff0c\u5c06\u516c\u5e73\u6392\u5e8f\u9a8c\u8bc1\u7b80\u5316\u4e3a\u5bf9\u56fe\u5c5e\u6027\u7684\u65e0\u72b6\u6001\u5ba1\u8ba1\uff0c\u663e\u8457\u63d0\u5347\u4e86\u541e\u5410\u91cf\u548c\u964d\u4f4e\u4e86\u5ef6\u8fdf\u3002", "motivation": "\u73b0\u6709\u7684\u62dc\u5360\u5ead\u5bb9\u9519\u5171\u8bc6\u534f\u8bae\u867d\u7136\u80fd\u786e\u4fdd\u4ea4\u6613\u987a\u5e8f\u4e00\u81f4\u6027\uff0c\u4f46\u9886\u5bfc\u8005\u65e0\u7ea6\u675f\u7684\u6392\u5e8f\u6743\u529b\u4f7f\u5f97\u6076\u610f\u884c\u4e3a\u8005\u80fd\u591f\u8fdb\u884c\u4ef7\u503c\u63d0\u53d6\u653b\u51fb\uff08\u5982\u62a2\u5148\u4ea4\u6613\u548c\u4e09\u660e\u6cbb\u653b\u51fb\uff09\u3002\u867d\u7136Themis\u7b49\u534f\u8bae\u901a\u8fc7\u57fa\u4e8e\u56fe\u7684\u6392\u5e8f\u83b7\u5f97\u5f3a\u4fdd\u8bc1\uff0c\u4f46\u8981\u6c42\u6bcf\u4e2a\u526f\u672c\u91cd\u65b0\u8fd0\u884c\u6602\u8d35\u7684\u6392\u5e8f\u8ba1\u7b97\uff0c\u8fd9\u79cd\u5bf9\u79f0\u5197\u4f59\u8303\u5f0f\u6548\u7387\u4f4e\u4e0b\u3002", "method": "AUTIG\u91c7\u7528\u975e\u5bf9\u79f0\u67b6\u6784\uff1a\u9886\u5bfc\u8005\u7ef4\u62a4\u6301\u4e45\u5316\u7684\u672a\u786e\u8ba4\u4ea4\u6613\u589e\u91cf\u56fe\uff08UTIG\uff09\u6765\u5206\u644a\u591a\u8f6e\u56fe\u7684\u6784\u5efa\u6210\u672c\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u63d0\u6848\u751f\u6210\u7ed3\u6784\u5316\u7684\u516c\u5e73\u6027\u8bc1\u660e\uff1b\u8ddf\u968f\u8005\u65e0\u9700\u7ef4\u62a4\u5386\u53f2\u72b6\u6001\u5373\u53ef\u9a8c\u8bc1\u8bc1\u660e\u3002\u5173\u952e\u6280\u672f\u5305\u62ec\uff1a\u589e\u91cf\u56fe\u7ef4\u62a4\u3001\u89e3\u8026\u6d41\u6c34\u7ebf\u8bbe\u8ba1\u3001\u4ee5\u53ca\u8986\u76d6\u6240\u6709\u5185\u90e8\u5bf9\u548c\u8fb9\u754c\u5b8c\u6574\u6027\u7684\u8bc1\u660e\u673a\u5236\u3002", "result": "\u5728\u90e8\u5206\u540c\u6b65\u7f51\u7edc\u4e0b\u4e0e\u5bf9\u79f0\u56fe\u57fa\u7ebf\u5bf9\u6bd4\uff0cAUTIG\u5b9e\u73b0\u4e86\u66f4\u9ad8\u7684\u541e\u5410\u91cf\u548c\u66f4\u4f4e\u7684\u7aef\u5230\u7aef\u5ef6\u8fdf\uff0c\u540c\u65f6\u4fdd\u6301\u4e86gamma\u6279\u91cf\u987a\u5e8f\u516c\u5e73\u6027\u3002", "conclusion": "AUTIG\u8bc1\u660e\u4e86\u9a8c\u8bc1\u516c\u5e73\u6392\u5e8f\u4e0d\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\uff0c\u901a\u8fc7\u975e\u5bf9\u79f0\u67b6\u6784\u548c\u589e\u91cf\u56fe\u7ef4\u62a4\uff0c\u663e\u8457\u63d0\u5347\u4e86\u987a\u5e8f\u516c\u5e73\u5171\u8bc6\u7684\u6027\u80fd\uff0c\u4e3a\u533a\u5757\u94fe\u7cfb\u7edf\u63d0\u4f9b\u4e86\u66f4\u9ad8\u6548\u7684\u6297\u4ef7\u503c\u63d0\u53d6\u653b\u51fb\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2510.14392", "categories": ["cs.DC", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.14392", "abs": "https://arxiv.org/abs/2510.14392", "authors": ["Hongtao Lyu", "Boyue Liu", "Mingyu Wu", "Haibo Chen"], "title": "FairBatching: Fairness-Aware Batch Formation for LLM Inference", "comment": null, "summary": "Large language model (LLM) inference systems face a fundamental tension\nbetween minimizing Time-to-First-Token (TTFT) latency for new requests and\nmaintaining a high, steady token generation rate (low Time-Per-Output-Token, or\nTPOT) for ongoing requests. Existing stall-free batching schedulers proposed by\nSarathi, while effective at preventing decode stalls, introduce significant\ncomputational unfairness. They prioritize decode tasks excessively,\nsimultaneously leading to underutilized decode slack and unnecessary prefill\nqueuing delays, which collectively degrade the system's overall quality of\nservice (QoS).\n  This work identifies the root cause of this unfairness: the non-monotonic\nnature of Time-Between-Tokens (TBT) as a scheduling metric and the rigid\ndecode-prioritizing policy that fails to adapt to dynamic workload bursts. We\ntherefore propose FairBatching, a novel LLM inference scheduler that enforces\nfair resource allocation between prefill and decode tasks. It features an\nadaptive batch capacity determination mechanism, which dynamically adjusts the\ncomputational budget to improve the GPU utilization without triggering SLO\nviolations. Its fair and dynamic batch formation algorithm breaks away from the\ndecode-prioritizing paradigm, allowing computation resources to be reclaimed\nfrom bursting decode tasks to serve prefill surges, achieving global fairness.\nFurthermore, FairBatching provides a novel load estimation method, enabling\nmore effective coordination with upper-level schedulers. Implemented and\nevaluated on realistic traces, FairBatching significantly reduces TTFT tail\nlatency by up to 2.29x while robustly maintaining TPOT SLOs, achieving overall\n20.0% improvement in single-node capacity and 54.3% improvement in\ncluster-level capacity.", "AI": {"tldr": "FairBatching\u662f\u4e00\u4e2a\u65b0\u7684LLM\u63a8\u7406\u8c03\u5ea6\u5668\uff0c\u901a\u8fc7\u516c\u5e73\u5206\u914dprefill\u548cdecode\u4efb\u52a1\u7684\u8ba1\u7b97\u8d44\u6e90\uff0c\u89e3\u51b3\u4e86\u73b0\u6709\u8c03\u5ea6\u5668\u4e2d\u7684\u8ba1\u7b97\u4e0d\u516c\u5e73\u95ee\u9898\uff0c\u663e\u8457\u964d\u4f4e\u4e86TTFT\u5ef6\u8fdf\u5e76\u63d0\u9ad8\u4e86\u7cfb\u7edf\u5bb9\u91cf\u3002", "motivation": "\u73b0\u6709LLM\u63a8\u7406\u8c03\u5ea6\u5668\u5728\u6700\u5c0f\u5316TTFT\u5ef6\u8fdf\u548c\u7ef4\u6301\u9ad8token\u751f\u6210\u7387\u4e4b\u95f4\u5b58\u5728\u77db\u76fe\uff0cSarathi\u63d0\u51fa\u7684\u65e0\u505c\u987f\u6279\u5904\u7406\u8c03\u5ea6\u5668\u867d\u7136\u9632\u6b62\u4e86\u89e3\u7801\u505c\u987f\uff0c\u4f46\u5f15\u5165\u4e86\u663e\u8457\u7684\u8ba1\u7b97\u4e0d\u516c\u5e73\u6027\uff0c\u8fc7\u5ea6\u4f18\u5148\u89e3\u7801\u4efb\u52a1\u5bfc\u81f4prefill\u6392\u961f\u5ef6\u8fdf\u548c\u7cfb\u7edfQoS\u4e0b\u964d\u3002", "method": "\u63d0\u51faFairBatching\u8c03\u5ea6\u5668\uff0c\u5305\u542b\u81ea\u9002\u5e94\u6279\u5bb9\u91cf\u786e\u5b9a\u673a\u5236\u3001\u516c\u5e73\u52a8\u6001\u6279\u5f62\u6210\u7b97\u6cd5\u548c\u8d1f\u8f7d\u4f30\u8ba1\u65b9\u6cd5\uff0c\u52a8\u6001\u8c03\u6574\u8ba1\u7b97\u9884\u7b97\uff0c\u6253\u7834\u89e3\u7801\u4f18\u5148\u8303\u5f0f\uff0c\u5b9e\u73b0\u5168\u5c40\u516c\u5e73\u7684\u8d44\u6e90\u5206\u914d\u3002", "result": "\u5728\u771f\u5b9etrace\u4e0a\u8bc4\u4f30\uff0cFairBatching\u5c06TTFT\u5c3e\u5ef6\u8fdf\u964d\u4f4e\u9ad8\u8fbe2.29\u500d\uff0c\u7a33\u5065\u7ef4\u6301TPOT SLOs\uff0c\u5355\u8282\u70b9\u5bb9\u91cf\u63d0\u534720.0%\uff0c\u96c6\u7fa4\u7ea7\u5bb9\u91cf\u63d0\u534754.3%\u3002", "conclusion": "FairBatching\u901a\u8fc7\u516c\u5e73\u8d44\u6e90\u5206\u914d\u548c\u81ea\u9002\u5e94\u8c03\u5ea6\u7b56\u7565\uff0c\u6709\u6548\u89e3\u51b3\u4e86LLM\u63a8\u7406\u4e2d\u7684\u8ba1\u7b97\u4e0d\u516c\u5e73\u95ee\u9898\uff0c\u663e\u8457\u63d0\u5347\u4e86\u7cfb\u7edf\u6027\u80fd\u548c\u5bb9\u91cf\u3002"}}
{"id": "2510.14580", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.14580", "abs": "https://arxiv.org/abs/2510.14580", "authors": ["Hyein Woo", "Miryeong Kwon", "Jiseon Kim", "Eunjee Na", "Hanjin Choi", "Seonghyeon Jang", "Myoungsoo Jung"], "title": "ScalePool: Hybrid XLink-CXL Fabric for Composable Resource Disaggregation in Unified Scale-up Domains", "comment": null, "summary": "This paper proposes ScalePool, a novel cluster architecture designed to\ninterconnect numerous accelerators using unified hardware interconnects rather\nthan traditional long-distance networking. ScalePool integrates\nAccelerator-Centric Links (XLink) and Compute Express Link (CXL) into a unified\nXLink-CXL hybrid fabric. Specifically, ScalePool employs XLink for\nintra-cluster, low-latency accelerator communication, while using hierarchical\nCXL-based switching fabrics for scalable and coherent inter-cluster memory\nsharing. By abstracting interfaces through CXL, ScalePool structurally resolves\ninteroperability constraints, enabling heterogeneous cluster operation and\ncomposable resource disaggregation. In addition, ScalePool introduces explicit\nmemory tiering: the latency-critical tier-1 combines accelerator-local memory\nwith coherence-centric CXL and XLink, whereas the highcapacity tier-2 employs\ndedicated memory nodes interconnected by a CXL-based fabric, achieving scalable\nand efficient memory pooling. Evaluation results show that ScalePool\naccelerates LLM training by 1.22x on average and up to 1.84x compared to\nconventional RDMA-based environments. Furthermore, the proposed tier-2 memory\ndisaggregation strategy reduces latency by up to 4.5x for memory-intensive\nworkloads.", "AI": {"tldr": "ScalePool\u662f\u4e00\u79cd\u65b0\u578b\u96c6\u7fa4\u67b6\u6784\uff0c\u901a\u8fc7\u7edf\u4e00\u786c\u4ef6\u4e92\u8fde\u6280\u672f\u8fde\u63a5\u5927\u91cf\u52a0\u901f\u5668\uff0c\u7ed3\u5408XLink\u548cCXL\u6784\u5efa\u6df7\u5408\u7ed3\u6784\uff0c\u5b9e\u73b0\u4f4e\u5ef6\u8fdf\u901a\u4fe1\u548c\u53ef\u6269\u5c55\u5185\u5b58\u5171\u4eab\uff0c\u663e\u8457\u63d0\u5347LLM\u8bad\u7ec3\u6027\u80fd\u3002", "motivation": "\u4f20\u7edf\u957f\u8ddd\u79bb\u7f51\u7edc\u8fde\u63a5\u52a0\u901f\u5668\u5b58\u5728\u5ef6\u8fdf\u9ad8\u3001\u4e92\u64cd\u4f5c\u6027\u5dee\u7684\u95ee\u9898\uff0c\u9700\u8981\u4e00\u79cd\u65b0\u7684\u96c6\u7fa4\u67b6\u6784\u6765\u89e3\u51b3\u5f02\u6784\u52a0\u901f\u5668\u4e92\u8054\u548c\u5185\u5b58\u8d44\u6e90\u6c60\u5316\u7684\u6311\u6218\u3002", "method": "\u91c7\u7528XLink-CXL\u6df7\u5408\u7ed3\u6784\uff1aXLink\u7528\u4e8e\u96c6\u7fa4\u5185\u4f4e\u5ef6\u8fdf\u52a0\u901f\u5668\u901a\u4fe1\uff0c\u5206\u5c42CXL\u4ea4\u6362\u7ed3\u6784\u7528\u4e8e\u53ef\u6269\u5c55\u7684\u96c6\u7fa4\u95f4\u5185\u5b58\u5171\u4eab\u3002\u5f15\u5165\u663e\u5f0f\u5185\u5b58\u5206\u5c42\u7b56\u7565\uff0c\u7b2c\u4e00\u5c42\u4e3a\u5ef6\u8fdf\u5173\u952e\u578b\uff0c\u7b2c\u4e8c\u5c42\u4e3a\u9ad8\u5bb9\u91cf\u578b\u3002", "result": "\u76f8\u6bd4\u4f20\u7edfRDMA\u73af\u5883\uff0cScalePool\u5e73\u5747\u52a0\u901fLLM\u8bad\u7ec31.22\u500d\uff0c\u6700\u9ad8\u8fbe1.84\u500d\uff1b\u7b2c\u4e8c\u5c42\u5185\u5b58\u5206\u89e3\u7b56\u7565\u4e3a\u5185\u5b58\u5bc6\u96c6\u578b\u5de5\u4f5c\u8d1f\u8f7d\u964d\u4f4e\u5ef6\u8fdf\u8fbe4.5\u500d\u3002", "conclusion": "ScalePool\u901a\u8fc7\u7edf\u4e00\u7684\u786c\u4ef6\u4e92\u8fde\u67b6\u6784\u6709\u6548\u89e3\u51b3\u4e86\u52a0\u901f\u5668\u96c6\u7fa4\u7684\u4e92\u8054\u548c\u5185\u5b58\u6c60\u5316\u95ee\u9898\uff0c\u663e\u8457\u63d0\u5347\u4e86\u7cfb\u7edf\u6027\u80fd\u548c\u8d44\u6e90\u5229\u7528\u6548\u7387\u3002"}}
{"id": "2510.14599", "categories": ["cs.DC", "D.4.1; C.4; C.1.4; D.1.3"], "pdf": "https://arxiv.org/pdf/2510.14599", "abs": "https://arxiv.org/abs/2510.14599", "authors": ["Michal Konopa", "Jan Fesl", "Ladislav Ber \u00e1nek"], "title": "JASDA: Introducing Job-Aware Scheduling in Scheduler-Driven Job Atomization", "comment": "25 pages", "summary": "The increasing complexity and temporal variability of workloads on\nMIG-enabled GPUs challenge the scalability of traditional centralized\nscheduling. Building upon the SJA concept, this paper introduces JASDA-a novel\nparadigm that extends SJA from a largely centralized scheduling model toward a\nfully decentralized negotiation process. In JASDA, jobs actively generate and\nscore feasible subjobs in response to scheduler-announced execution windows,\nwhile the scheduler performs policy-driven clearing that balances utilization,\nfairness, and temporal responsiveness. This bidirectional, iterative\ninteraction embeds feedback, calibration, and probabilistic safety directly\ninto the scheduling loop, enabling adaptive and transparent decision-making. By\ncoupling principles from auction theory and online optimization with the\ntemporal granularity of GPU workloads, JASDA provides a scalable foundation for\nmarket-aware and fairness-driven resource management-bridging theoretical\nscheduling models with practical deployment in modern MIG-enabled environments\nrelevant to Artificial Intelligence and Agriculture 4.0.", "AI": {"tldr": "JASDA\u662f\u4e00\u4e2a\u53bb\u4e2d\u5fc3\u5316\u7684\u8c03\u5ea6\u6846\u67b6\uff0c\u901a\u8fc7\u62cd\u5356\u7406\u8bba\u548c\u5728\u7ebf\u4f18\u5316\u65b9\u6cd5\uff0c\u8ba9\u4f5c\u4e1a\u4e3b\u52a8\u751f\u6210\u548c\u8bc4\u5206\u53ef\u884c\u5b50\u4f5c\u4e1a\uff0c\u8c03\u5ea6\u5668\u8fdb\u884c\u7b56\u7565\u9a71\u52a8\u7684\u6e05\u7a7a\u64cd\u4f5c\uff0c\u5b9e\u73b0\u53ef\u6269\u5c55\u7684\u8d44\u6e90\u7ba1\u7406\u3002", "motivation": "\u4f20\u7edf\u96c6\u4e2d\u5f0f\u8c03\u5ea6\u5728MIG GPU\u4e0a\u96be\u4ee5\u5e94\u5bf9\u5de5\u4f5c\u8d1f\u8f7d\u7684\u590d\u6742\u6027\u548c\u65f6\u95f4\u53d8\u5316\u6027\uff0c\u9700\u8981\u66f4\u53ef\u6269\u5c55\u7684\u8c03\u5ea6\u65b9\u6848\u3002", "method": "\u6269\u5c55SJA\u6982\u5ff5\uff0c\u91c7\u7528\u53cc\u5411\u8fed\u4ee3\u4ea4\u4e92\uff1a\u4f5c\u4e1a\u751f\u6210\u548c\u8bc4\u5206\u53ef\u884c\u5b50\u4f5c\u4e1a\uff0c\u8c03\u5ea6\u5668\u6267\u884c\u7b56\u7565\u9a71\u52a8\u7684\u6e05\u7a7a\u64cd\u4f5c\uff0c\u7ed3\u5408\u62cd\u5356\u7406\u8bba\u548c\u5728\u7ebf\u4f18\u5316\u3002", "result": "JASDA\u5728\u8c03\u5ea6\u5faa\u73af\u4e2d\u5d4c\u5165\u53cd\u9988\u3001\u6821\u51c6\u548c\u6982\u7387\u5b89\u5168\u6027\uff0c\u5b9e\u73b0\u81ea\u9002\u5e94\u548c\u900f\u660e\u7684\u51b3\u7b56\u5236\u5b9a\u3002", "conclusion": "JASDA\u4e3a\u73b0\u4ee3MIG\u73af\u5883\u63d0\u4f9b\u4e86\u53ef\u6269\u5c55\u7684\u3001\u5e02\u573a\u611f\u77e5\u548c\u516c\u5e73\u9a71\u52a8\u7684\u8d44\u6e90\u7ba1\u7406\u57fa\u7840\uff0c\u8fde\u63a5\u7406\u8bba\u8c03\u5ea6\u6a21\u578b\u4e0e\u5b9e\u9645\u90e8\u7f72\u3002"}}
{"id": "2510.14622", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.14622", "abs": "https://arxiv.org/abs/2510.14622", "authors": ["Miryeong Kwon", "Donghyun Gouk", "Hyein Woo", "Junhee Kim", "Jinwoo Baek", "Kyungkuk Nam", "Sangyoon Ji", "Jiseon Kim", "Hanyeoreum Bae", "Junhyeok Jang", "Hyunwoo You", "Junseok Moon", "Myoungsoo Jung"], "title": "MPI-over-CXL: Enhancing Communication Efficiency in Distributed HPC Systems", "comment": null, "summary": "MPI implementations commonly rely on explicit memory-copy operations,\nincurring overhead from redundant data movement and buffer management. This\noverhead notably impacts HPC workloads involving intensive inter-processor\ncommunication. In response, we introduce MPI-over-CXL, a novel MPI\ncommunication paradigm leveraging CXL, which provides cache-coherent shared\nmemory across multiple hosts. MPI-over-CXL replaces traditional data-copy\nmethods with direct shared memory access, significantly reducing communication\nlatency and memory bandwidth usage. By mapping shared memory regions directly\ninto the virtual address spaces of MPI processes, our design enables efficient\npointer-based communication, eliminating redundant copying operations. To\nvalidate this approach, we implement a comprehensive hardware and software\nenvironment, including a custom CXL 3.2 controller, FPGA-based multi-host\nemulation, and dedicated software stack. Our evaluations using representative\nbenchmarks demonstrate substantial performance improvements over conventional\nMPI systems, underscoring MPI-over-CXL's potential to enhance efficiency and\nscalability in large-scale HPC environments.", "AI": {"tldr": "MPI-over-CXL\u662f\u4e00\u79cd\u5229\u7528CXL\u6280\u672f\u7684\u65b0\u578bMPI\u901a\u4fe1\u8303\u5f0f\uff0c\u901a\u8fc7\u5171\u4eab\u5185\u5b58\u76f4\u63a5\u8bbf\u95ee\u66ff\u4ee3\u4f20\u7edf\u6570\u636e\u62f7\u8d1d\u65b9\u6cd5\uff0c\u663e\u8457\u964d\u4f4e\u901a\u4fe1\u5ef6\u8fdf\u548c\u5185\u5b58\u5e26\u5bbd\u4f7f\u7528\u3002", "motivation": "\u4f20\u7edfMPI\u5b9e\u73b0\u4f9d\u8d56\u663e\u5f0f\u5185\u5b58\u62f7\u8d1d\u64cd\u4f5c\uff0c\u5bfc\u81f4\u5197\u4f59\u6570\u636e\u79fb\u52a8\u548c\u7f13\u51b2\u533a\u7ba1\u7406\u7684\u5f00\u9500\uff0c\u7279\u522b\u662f\u5728\u6d89\u53ca\u5bc6\u96c6\u5904\u7406\u5668\u95f4\u901a\u4fe1\u7684HPC\u5de5\u4f5c\u8d1f\u8f7d\u4e2d\u5f71\u54cd\u663e\u8457\u3002", "method": "\u5229\u7528CXL\u63d0\u4f9b\u8de8\u591a\u4e3b\u673a\u7684\u7f13\u5b58\u4e00\u81f4\u6027\u5171\u4eab\u5185\u5b58\uff0c\u5c06\u5171\u4eab\u5185\u5b58\u533a\u57df\u76f4\u63a5\u6620\u5c04\u5230MPI\u8fdb\u7a0b\u7684\u865a\u62df\u5730\u5740\u7a7a\u95f4\uff0c\u5b9e\u73b0\u9ad8\u6548\u7684\u57fa\u4e8e\u6307\u9488\u7684\u901a\u4fe1\uff0c\u6d88\u9664\u5197\u4f59\u62f7\u8d1d\u64cd\u4f5c\u3002", "result": "\u4f7f\u7528\u4ee3\u8868\u6027\u57fa\u51c6\u6d4b\u8bd5\u8fdb\u884c\u8bc4\u4f30\uff0c\u76f8\u6bd4\u4f20\u7edfMPI\u7cfb\u7edf\u5c55\u73b0\u51fa\u663e\u8457\u7684\u6027\u80fd\u63d0\u5347\u3002", "conclusion": "MPI-over-CXL\u6709\u6f5c\u529b\u5728\u5927\u89c4\u6a21HPC\u73af\u5883\u4e2d\u63d0\u9ad8\u6548\u7387\u548c\u53ef\u6269\u5c55\u6027\u3002"}}
{"id": "2510.14686", "categories": ["cs.DC", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.14686", "abs": "https://arxiv.org/abs/2510.14686", "authors": ["Tongxuan Liu", "Tao Peng", "Peijun Yang", "Xiaoyang Zhao", "Xiusheng Lu", "Weizhe Huang", "Zirui Liu", "Xiaoyu Chen", "Zhiwei Liang", "Jun Xiong", "Donghe Jin", "Minchao Zhang", "Jinrong Guo", "Yingxu Deng", "Xu Zhang", "Xianzhe Dong", "Siqi Wang", "Siyu Wu", "Yu Wu", "Zihan Tang", "Yuting Zeng", "Yanshu Wang", "Jinguang Liu", "Meng Kang", "Menxin Li", "Yunlong Wang", "Yiming Liu", "Xiaolong Ma", "Yifan Wang", "Yichen Zhang", "Jinrun Yin", "Keyang Zheng", "Jiawei Yin", "Jun Zhang", "Ziyue Wang", "Xiaobo Lin", "Liangyu Liu", "Liwei Lan", "Yang Liu", "Chunhua Peng", "Han Liu", "Songcheng Ren", "Xuezhu Wang", "Yunheng Shen", "Yi Wang", "Guyue Liu", "Hui Chen", "Tong Yang", "Hailong Yang", "Jing Li", "Guiguang Ding", "Ke Zhang"], "title": "xLLM Technical Report", "comment": "39 pages", "summary": "We introduce xLLM, an intelligent and efficient Large Language Model (LLM)\ninference framework designed for high-performance, large-scale enterprise-grade\nserving, with deep optimizations for diverse AI accelerators. To address these\nchallenges, xLLM builds a novel decoupled service-engine architecture. At the\nservice layer, xLLM-Service features an intelligent scheduling module that\nefficiently processes multimodal requests and co-locates online and offline\ntasks through unified elastic scheduling to maximize cluster utilization. This\nmodule also relies on a workload-adaptive dynamic Prefill-Decode (PD)\ndisaggregation policy and a novel Encode-Prefill-Decode (EPD) disaggregation\npolicy designed for multimodal inputs. Furthermore, it incorporates a\ndistributed architecture to provide global KV Cache management and robust\nfault-tolerant capabilities for high availability. At the engine layer,\nxLLM-Engine co-optimizes system and algorithm designs to fully saturate\ncomputing resources. This is achieved through comprehensive multi-layer\nexecution pipeline optimizations, an adaptive graph mode and an xTensor memory\nmanagement. xLLM-Engine also further integrates algorithmic enhancements such\nas optimized speculative decoding and dynamic EPLB, collectively serving to\nsubstantially boost throughput and inference efficiency. Extensive evaluations\ndemonstrate that xLLM delivers significantly superior performance and resource\nefficiency. Under identical TPOT constraints, xLLM achieves throughput up to\n1.7x that of MindIE and 2.2x that of vLLM-Ascend with Qwen-series models, while\nmaintaining an average throughput of 1.7x that of MindIE with Deepseek-series\nmodels. xLLM framework is publicly available at\nhttps://github.com/jd-opensource/xllm and\nhttps://github.com/jd-opensource/xllm-service.", "AI": {"tldr": "xLLM\u662f\u4e00\u4e2a\u9ad8\u6548\u7684\u5927\u578b\u8bed\u8a00\u6a21\u578b\u63a8\u7406\u6846\u67b6\uff0c\u91c7\u7528\u89e3\u8026\u7684\u670d\u52a1-\u5f15\u64ce\u67b6\u6784\uff0c\u901a\u8fc7\u667a\u80fd\u8c03\u5ea6\u3001\u5206\u5e03\u5f0fKV\u7f13\u5b58\u7ba1\u7406\u548c\u7b97\u6cd5\u4f18\u5316\uff0c\u663e\u8457\u63d0\u5347\u541e\u5410\u91cf\u548c\u63a8\u7406\u6548\u7387\u3002", "motivation": "\u4e3a\u4e86\u89e3\u51b3\u4f01\u4e1a\u7ea7\u5927\u89c4\u6a21LLM\u670d\u52a1\u4e2d\u7684\u6027\u80fd\u74f6\u9888\u548c\u8d44\u6e90\u5229\u7528\u6548\u7387\u95ee\u9898\uff0c\u7279\u522b\u662f\u5728\u591a\u6837\u5316AI\u52a0\u901f\u5668\u4e0a\u7684\u4f18\u5316\u9700\u6c42\u3002", "method": "\u6784\u5efa\u89e3\u8026\u7684\u670d\u52a1-\u5f15\u64ce\u67b6\u6784\uff1a\u670d\u52a1\u5c42\u5305\u542b\u667a\u80fd\u8c03\u5ea6\u6a21\u5757\u3001\u52a8\u6001Prefill-Decode\u89e3\u8026\u7b56\u7565\u548c\u5206\u5e03\u5f0fKV\u7f13\u5b58\u7ba1\u7406\uff1b\u5f15\u64ce\u5c42\u901a\u8fc7\u591a\u7ea7\u6267\u884c\u6d41\u6c34\u7ebf\u4f18\u5316\u3001\u81ea\u9002\u5e94\u56fe\u6a21\u5f0f\u548cxTensor\u5185\u5b58\u7ba1\u7406\u6765\u9971\u548c\u8ba1\u7b97\u8d44\u6e90\u3002", "result": "\u5728\u76f8\u540cTPOT\u7ea6\u675f\u4e0b\uff0cxLLM\u7684\u541e\u5410\u91cf\u8fbe\u5230MindIE\u76841.7\u500d\u548cvLLM-Ascend\u76842.2\u500d\uff08\u4f7f\u7528Qwen\u7cfb\u5217\u6a21\u578b\uff09\uff0c\u5728Deepseek\u7cfb\u5217\u6a21\u578b\u4e0a\u5e73\u5747\u541e\u5410\u91cf\u4e3aMindIE\u76841.7\u500d\u3002", "conclusion": "xLLM\u6846\u67b6\u901a\u8fc7\u521b\u65b0\u7684\u7cfb\u7edf\u67b6\u6784\u548c\u6df1\u5ea6\u4f18\u5316\uff0c\u4e3a\u5927\u89c4\u6a21\u4f01\u4e1a\u7ea7LLM\u670d\u52a1\u63d0\u4f9b\u4e86\u663e\u8457\u4f18\u8d8a\u7684\u6027\u80fd\u548c\u8d44\u6e90\u6548\u7387\u3002"}}
{"id": "2510.14798", "categories": ["cs.DC", "cs.DS", "math.PR"], "pdf": "https://arxiv.org/pdf/2510.14798", "abs": "https://arxiv.org/abs/2510.14798", "authors": ["Petra Berenbrink", "Tom Friedetzky", "Peter Kling", "Lars Nagel"], "title": "Balls and Bins and the Infinite Process with Random Deletions", "comment": null, "summary": "We consider an infinite balls-into-bins process with deletions where in each\ndiscrete step $t$ a coin is tossed as to whether, with probability $\\beta(t)\n\\in (0,1)$, a new ball is allocated using the Greedy[2] strategy (which places\nthe ball in the lower loaded of two bins sampled uniformly at random) or, with\nremaining probability $1-\\beta(t)$, a ball is deleted from a non-empty bin\nchosen uniformly at random. Let $n$ be the number of bins and $m(t)$ the total\nload at time $t$. We are interested in bounding the discrepancy $x_{\\max}(t) -\nm(t)/n$ (current maximum load relative to current average) and the overload\n$x_{\\max}(t) - m_{\\max}(t)/n$ (current maximum load relative to highest average\nobserved so far).\n  We prove that at an arbitrarily chosen time $t$ the total number of balls\nabove the average is $O(n)$ and that the discrepancy is $ O(\\log(n))$. For the\ndiscrepancy, we provide a matching lower bound. Furthermore we prove that at an\narbitrarily chosen time $t$ the overload is $\\log\\log(n)+O(1)$. For \"good\"\ninsertion probability sequences (in which the average load of time intervals\nwith polynomial length increases in expectation) we show that even the\ndiscrepancy is bounded by $\\log\\log(n)+O(1)$.\n  One of our main analytical tools is a layered induction, as per [ABKU99].\nSince our model allows for rather more general scenarios than what was\npreviously considered, the formal analysis requires some extra ingredients as\nwell, in particular a detailed potential analysis. Furthermore, we simplify the\nsetup by applying probabilistic couplings to obtain certain \"recovery\"\nproperties, which eliminate much of the need for intricate and careful\nconditioning elsewhere in the analysis.", "AI": {"tldr": "\u8be5\u8bba\u6587\u7814\u7a76\u4e86\u4e00\u4e2a\u65e0\u9650\u7403\u5165\u7bb1\u8fc7\u7a0b\u7684\u53d8\u4f53\uff0c\u5305\u542b\u63d2\u5165\u548c\u5220\u9664\u64cd\u4f5c\u3002\u8bc1\u660e\u4e86\u5728\u4efb\u610f\u65f6\u95f4\u70b9\uff0c\u8d85\u8fc7\u5e73\u5747\u503c\u7684\u7403\u6570\u4e3aO(n)\uff0c\u5dee\u5f02\u5ea6\u4e3aO(log(n))\u4e14\u5b58\u5728\u5339\u914d\u4e0b\u754c\uff0c\u8fc7\u8f7d\u5ea6\u4e3aloglog(n)+O(1)\u3002\u5bf9\u4e8e\u826f\u597d\u7684\u63d2\u5165\u6982\u7387\u5e8f\u5217\uff0c\u5dee\u5f02\u5ea6\u4e5f\u53ef\u8fbe\u5230loglog(n)+O(1)\u3002", "motivation": "\u7814\u7a76\u5e26\u6709\u5220\u9664\u64cd\u4f5c\u7684\u7403\u5165\u7bb1\u8fc7\u7a0b\uff0c\u5206\u6790\u7cfb\u7edf\u8d1f\u8f7d\u7684\u52a8\u6001\u7279\u6027\uff0c\u7279\u522b\u662f\u6700\u5927\u8d1f\u8f7d\u4e0e\u5e73\u5747\u8d1f\u8f7d\u4e4b\u95f4\u7684\u5dee\u5f02\u5ea6\u548c\u8fc7\u8f7d\u5ea6\u3002", "method": "\u4f7f\u7528\u5206\u5c42\u5f52\u7eb3\u6cd5\u4f5c\u4e3a\u4e3b\u8981\u5206\u6790\u5de5\u5177\uff0c\u7ed3\u5408\u8be6\u7ec6\u7684\u52bf\u80fd\u5206\u6790\u548c\u6982\u7387\u8026\u5408\u6280\u672f\u6765\u7b80\u5316\u5206\u6790\u8fc7\u7a0b\u3002", "result": "\u8bc1\u660e\u4e86\u5728\u4efb\u610f\u65f6\u95f4\u70b9\uff1a\u8d85\u8fc7\u5e73\u5747\u503c\u7684\u7403\u6570\u4e3aO(n)\uff1b\u5dee\u5f02\u5ea6\u4e3aO(log(n))\u4e14\u5b58\u5728\u5339\u914d\u4e0b\u754c\uff1b\u8fc7\u8f7d\u5ea6\u4e3aloglog(n)+O(1)\uff1b\u5bf9\u4e8e\u826f\u597d\u63d2\u5165\u5e8f\u5217\uff0c\u5dee\u5f02\u5ea6\u4e5f\u53ef\u8fbe\u5230loglog(n)+O(1)\u3002", "conclusion": "\u8be5\u6a21\u578b\u5728\u66f4\u4e00\u822c\u7684\u573a\u666f\u4e0b\u4ecd\u80fd\u4fdd\u6301\u826f\u597d\u7684\u8d1f\u8f7d\u5e73\u8861\u7279\u6027\uff0c\u901a\u8fc7\u6982\u7387\u8026\u5408\u6280\u672f\u7b80\u5316\u4e86\u5206\u6790\u8fc7\u7a0b\uff0c\u4e3a\u52a8\u6001\u8d1f\u8f7d\u5e73\u8861\u7cfb\u7edf\u63d0\u4f9b\u4e86\u7406\u8bba\u4fdd\u8bc1\u3002"}}
