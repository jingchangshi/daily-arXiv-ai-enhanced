{"id": "2509.21527", "categories": ["cs.DC", "cs.PF", "physics.comp-ph"], "pdf": "https://arxiv.org/pdf/2509.21527", "abs": "https://arxiv.org/abs/2509.21527", "authors": ["Mahesh Doijade", "Andrey Alekseenko", "Ania Brown", "Alan Gray", "Szilárd Páll"], "title": "Redesigning GROMACS Halo Exchange: Improving Strong Scaling with GPU-initiated NVSHMEM", "comment": "17 pages, 8 figures, submitted to PAW-ATM Workshop, SC 2025", "summary": "Improving time-to-solution in molecular dynamics simulations often requires\nstrong scaling due to fixed-sized problems. GROMACS is highly\nlatency-sensitive, with peak iteration rates in the sub-millisecond, making\nscalability on heterogeneous supercomputers challenging. MPI's CPU-centric\nnature introduces additional latencies on GPU-resident applications' critical\npath, hindering GPU utilization and scalability. To address these limitations,\nwe present an NVSHMEM-based GPU kernel-initiated redesign of the GROMACS domain\ndecomposition halo-exchange algorithm. Highly tuned GPU kernels fuse data\npacking and communication, leveraging hardware latency-hiding for fine-grained\noverlap. We employ kernel fusion across overlapped data forwarding\ncommunication phases and utilize the asynchronous copy engine over NVLink to\noptimize latency and bandwidth. Our GPU-resident formulation greatly increases\ncommunication-computation overlap, improving GROMACS strong scaling performance\nacross NVLink by up to 1.5x (intra-node) and 2x (multi-node), and up to 1.3x\nmulti-node over NVLink+InfiniBand. This demonstrates the profound benefits of\nGPU-initiated communication for strong-scaling a broad range of\nlatency-sensitive applications."}
{"id": "2509.21841", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2509.21841", "abs": "https://arxiv.org/abs/2509.21841", "authors": ["Chang Chen", "Tiancheng Chen", "Jiangfei Duan", "Qianchao Zhu", "Zerui Wang", "Qinghao Hu", "Peng Sun", "Xiuhong Li", "Chao Yang", "Torsten Hoefler"], "title": "Zeppelin: Balancing Variable-length Workloads in Data Parallel Large Model Training", "comment": null, "summary": "Training large language models (LLMs) with increasingly long and varying\nsequence lengths introduces severe load imbalance challenges in large-scale\ndata-parallel training. Recent frameworks attempt to mitigate these issues\nthrough data reorganization or hybrid parallel strategies. However, they often\noverlook how computational and communication costs scale with sequence length,\nresulting in suboptimal performance. We identify three critical challenges: (1)\nvarying computation-to-communication ratios across sequences of different\nlengths in distributed attention, (2) mismatch between static NIC-GPU affinity\nand dynamic parallel workloads, and (3) distinct optimal partitioning\nstrategies required for quadratic attention versus linear components. To\naddress these challenges, we present Zeppelin, a novel training system that\nintegrates three key techniques: (1) a hierarchical sequence partitioning\nmethod for the attention module that reduces communication overhead and\nbalances computation, supported by an efficient attention engine that applies\ndivergent parallel strategies; (2) a routing layer that orchestrates inter-node\ntransfers to fully utilize NIC bandwidth; and (3) a remapping layer that\ntransforms sequence layouts between attention and linear modules, ensuring high\ncomputational efficiency across both. Comprehensive evaluations across diverse\nconfigurations show that Zeppelin delivers an average 2.80x speedup over\nstate-of-the-art methods."}
{"id": "2509.22068", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2509.22068", "abs": "https://arxiv.org/abs/2509.22068", "authors": ["Sebastian Werner", "Mathis Kähler", "Alireza Hakamian"], "title": "Code once, Run Green: Automated Green Code Translation in Serverless Computing", "comment": "Accepted at IC2E 2025", "summary": "The rapid digitization and the increasing use of emerging technologies such\nas AI models have significantly contributed to the emissions of computing\ninfrastructure. Efforts to mitigate this impact typically focus on the\ninfrastructure level such as powering data centers with renewable energy, or\nthrough the specific design of energy-efficient software. However, both\nstrategies rely on stakeholder intervention, making their adoption in legacy\nand already-deployed systems unlikely. As a result, past architectural and\nimplementation decisions continue to incur additional energy usage - a\nphenomenon we refer to as energy debt.\n  Hence, in this paper, we investigate the potential of serverless computing\nplatforms to automatically reduce energy debt by leveraging the unique access\nto function source code. Specifically, we explore whether large language models\n(LLMs) can translate serverless functions into more energy-efficient\nprogramming languages while preserving functional correctness. To this end, we\ndesign and implement ReFaaS and integrate it into the Fission serverless\nframework. We evaluate multiple LLMs on their ability to perform such code\ntranslations and analyze their impact on energy consumption.\n  Our preliminary results indicate that translated functions can reduce\ninvocation energy by up to 70%, achieving net energy savings after\napproximately 3,000 to 5,000 invocations, depending on the LLM used.\nNonetheless, the approach faces several challenges: not all functions are\nsuitable for translation, and for some, the amortization threshold is\nsignificantly higher or unreachable. Despite these limitations, we identify\nfour key research challenges whose resolution could unlock long-term, automated\nmitigation of energy debt in serverless computing."}
{"id": "2509.22117", "categories": ["cs.DC", "cs.AI"], "pdf": "https://arxiv.org/pdf/2509.22117", "abs": "https://arxiv.org/abs/2509.22117", "authors": ["Lucio Anderlini", "Giulio Bianchini", "Diego Ciangottini", "Stefano Dal Pra", "Diego Michelotto", "Rosa Petrini", "Daniele Spiga"], "title": "The AI_INFN Platform: Artificial Intelligence Development in the Cloud", "comment": "To be published in SciPost Physics Proceedings for European AI for\n  Fundamental Physics Conference (EuCAIFCon 2025)", "summary": "Machine Learning (ML) is driving a revolution in the way scientists design,\ndevelop, and deploy data-intensive software. However, the adoption of ML\npresents new challenges for the computing infrastructure, particularly in terms\nof provisioning and orchestrating access to hardware accelerators for\ndevelopment, testing, and production. The INFN-funded project AI_INFN\n(Artificial Intelligence at INFN) aims at fostering the adoption of ML\ntechniques within INFN use cases by providing support on multiple aspects,\nincluding the provisioning of AI-tailored computing resources. It leverages\ncloud-native solutions in the context of INFN Cloud, to share hardware\naccelerators as effectively as possible, ensuring the diversity of the\nInstitute's research activities is not compromised. In this contribution, we\nprovide an update on the commissioning of a Kubernetes platform designed to\nease the development of GPU-powered data analysis workflows and their\nscalability on heterogeneous distributed computing resources, also using the\noffloading mechanism with Virtual Kubelet and InterLink API. This setup can\nmanage workflows across different resource providers, including sites of the\nWorldwide LHC Computing Grid and supercomputers such as CINECA Leonardo,\nproviding a model for use cases requiring dedicated infrastructures for\ndifferent parts of the workload. Initial test results, emerging case studies,\nand integration scenarios will be presented with functional tests and\nbenchmarks."}
{"id": "2509.21762", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2509.21762", "abs": "https://arxiv.org/abs/2509.21762", "authors": ["Ian McDougall", "Michael Davies", "Rahul Chatterjee", "Somesh Jha", "Karthikeyan Sankaralingam"], "title": "Privacy-Preserving Performance Profiling of In-The-Wild GPUs", "comment": "26 pages, 10 figures", "summary": "GPUs are the dominant platform for many important applications today\nincluding deep learning, accelerated computing, and scientific simulation.\nHowever, as the complexity of both applications and hardware increases, GPU\nchip manufacturers face a significant challenge: how to gather comprehensive\nperformance characteristics and value profiles from GPUs deployed in real-world\nscenarios. Such data, encompassing the types of kernels executed and the time\nspent in each, is crucial for optimizing chip design and enhancing application\nperformance. Unfortunately, despite the availability of low-level tools like\nNSYS and NCU, current methodologies fall short, offering data collection\ncapabilities only on an individual user basis rather than a broader, more\ninformative fleet-wide scale. This paper takes on the problem of realizing a\nsystem that allows planet-scale real-time GPU performance profiling of\nlow-level hardware characteristics. The three fundamental problems we solve\nare: i) user experience of achieving this with no slowdown; ii) preserving user\nprivacy, so that no 3rd party is aware of what applications any user runs; iii)\nefficacy in showing we are able to collect data and assign it applications even\nwhen run on 1000s of GPUs. Our results simulate a 100,000 size GPU deployment,\nrunning applications from the Torchbench suite, showing our system addresses\nall 3 problems."}
{"id": "2509.21629", "categories": ["cs.PL", "cs.AI", "cs.CL", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.21629", "abs": "https://arxiv.org/abs/2509.21629", "authors": ["Anjiang Wei", "Tarun Suresh", "Tianran Sun", "Haoze Wu", "Ke Wang", "Alex Aiken"], "title": "InvBench: Can LLMs Accelerate Program Verification with Invariant Synthesis?", "comment": null, "summary": "Program verification relies on loop invariants, yet automatically discovering\nstrong invariants remains a long-standing challenge. We introduce a principled\nframework for evaluating LLMs on invariant synthesis. Our approach uses a\nverifier-based decision procedure with a formal soundness guarantee and\nassesses not only correctness but also the speedup that invariants provide in\nverification. We evaluate 7 state-of-the-art LLMs, and existing LLM-based\nverifiers against the traditional solver UAutomizer. While LLM-based verifiers\nrepresent a promising direction, they do not yet offer a significant advantage\nover UAutomizer. Model capability also proves critical, as shown by sharp\ndifferences in speedups across models, and our benchmark remains an open\nchallenge for current LLMs. Finally, we show that supervised fine-tuning and\nBest-of-N sampling can improve performance: fine-tuning on 3589 instances\nraises the percentage of speedup cases for Qwen3-Coder-480B from 8% to 29.2%,\nand Best-of-N sampling with N=16 improves Claude-sonnet-4 from 8.8% to 22.1%."}
{"id": "2509.22233", "categories": ["cs.DC", "cs.DS"], "pdf": "https://arxiv.org/pdf/2509.22233", "abs": "https://arxiv.org/abs/2509.22233", "authors": ["Thomas Boudier", "Filippo Casagrande", "Avinandan Das", "Massimo Equi", "Henrik Lievonen", "Augusto Modanese", "Ronja Stimpert"], "title": "Orientation does not help with 3-coloring a grid in online-LOCAL", "comment": "16 pages, 3 figures", "summary": "The online-LOCAL and SLOCAL models are extensions of the LOCAL model where\nnodes are processed in a sequential but potentially adversarial order. So far,\nthe only problem we know of where the global memory of the online-LOCAL model\nhas an advantage over SLOCAL is 3-coloring bipartite graphs. Recently, Chang et\nal. [PODC 2024] showed that even in grids, 3-coloring requires $\\Omega(\\log n)$\nlocality in deterministic online-LOCAL. This result was subsequently extended\nby Akbari et al. [STOC 2025] to also hold in randomized online-LOCAL. However,\nboth proofs heavily rely on the assumption that the algorithm does not have\naccess to the orientation of the underlying grid. In this paper, we show how to\nlift this requirement and obtain the same lower bound (against either model)\neven when the algorithm is explicitly given a globally consistent orientation\nof the grid."}
{"id": "2509.22410", "categories": ["cs.AR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2509.22410", "abs": "https://arxiv.org/abs/2509.22410", "authors": ["Shayne Wadle", "Yanxin Zhang", "Vikas Singh", "Karthikeyan Sankaralingam"], "title": "NeuroScalar: A Deep Learning Framework for Fast, Accurate, and In-the-Wild Cycle-Level Performance Prediction", "comment": null, "summary": "The evaluation of new microprocessor designs is constrained by slow,\ncycle-accurate simulators that rely on unrepresentative benchmark traces. This\npaper introduces a novel deep learning framework for high-fidelity,\n``in-the-wild'' simulation on production hardware. Our core contribution is a\nDL model trained on microarchitecture-independent features to predict\ncycle-level performance for hypothetical processor designs. This unique\napproach allows the model to be deployed on existing silicon to evaluate future\nhardware. We propose a complete system featuring a lightweight hardware trace\ncollector and a principled sampling strategy to minimize user impact. This\nsystem achieves a simulation speed of 5 MIPS on a commodity GPU, imposing a\nmere 0.1% performance overhead. Furthermore, our co-designed Neutrino on-chip\naccelerator improves performance by 85x over the GPU. We demonstrate that this\nframework enables accurate performance analysis and large-scale hardware A/B\ntesting on a massive scale using real-world applications."}
{"id": "2509.21793", "categories": ["cs.PL", "cs.CL"], "pdf": "https://arxiv.org/pdf/2509.21793", "abs": "https://arxiv.org/abs/2509.21793", "authors": ["Jianhong Zhao", "Everett Hildenbrandt", "Juan Conejero", "Yongwang Zhao"], "title": "Compiling by Proving: Language-Agnostic Automatic Optimization from Formal Semantics", "comment": null, "summary": "Verification proofs encode complete program behavior, yet we discard them\nafter checking correctness. We present compiling by proving, a paradigm that\ntransforms these proofs into optimized execution rules. By constructing\nAll-Path Reachability Proofs through symbolic execution and compiling their\ngraph structure, we consolidate many semantic rewrites into single rules while\npreserving correctness by construction. We implement this as a\nlanguage-agnostic extension to the K framework. Evaluation demonstrates\nperformance improvements across different compilation scopes: opcode-level\noptimizations show consistent speedups, while whole-program compilation\nachieves orders of magnitude greater performance gains."}
{"id": "2509.22512", "categories": ["cs.AR", "n/a"], "pdf": "https://arxiv.org/pdf/2509.22512", "abs": "https://arxiv.org/abs/2509.22512", "authors": ["Soroush Ahadi", "Mehdi Modarressi", "Masoud Daneshtalab"], "title": "AxLLM: accelerator architecture for large language models with computation reuse capability", "comment": "7 pages, 9 figures", "summary": "Large language models demand massive computational power and memory\nresources, posing significant challenges for efficient deployment. While\nquantization has been widely explored to reduce model size and computation,\nthis paper demonstrates an additional benefit: quantization increases parameter\nlocality, creating opportunities for computation reuse. Building on this\ninsight, we propose AxLLM, a hardware accelerator architecture designed for\nquantized models. Axllm introduces a novel redundancy elimination technique\nthat caches and reuses multiplication results for repeated weight values,\nsubstantially reducing redundant operations. The architecture features dual\nmultiply and reuse pipelines, efficiently supporting both base models and LoRA\nfine-tuned models without altering parameters, retraining, or requiring offline\npreprocessing. Experimental results show that AxLLM achieves up to 90%\nreduction in computations, delivering 28% lower energy consumption and a 1.7x\nspeedup over baseline execution. These results highlight Axllm as a scalable\nand efficient solution for accelerating LLMs on specialized hardware."}
{"id": "2509.22614", "categories": ["cs.PL", "D.3.1; F.3.2; D.3.2; D.3.3"], "pdf": "https://arxiv.org/pdf/2509.22614", "abs": "https://arxiv.org/abs/2509.22614", "authors": ["Dmitri Volkov", "Yafei Yang", "Chung-chieh Shan"], "title": "Committing to the bit: Relational programming with semiring arrays and SAT solving", "comment": "12 pages, for associated repo see\n  https://github.com/sporkl/semiringkanren", "summary": "We propose semiringKanren, a relational programming language where each\nrelation expression denotes a semiring array. We formalize a type system that\nrestricts the arrays to finite size. We then define a semantics that is\nparameterized by the semiring that the arrays draw their elements from. We\ncompile semiringKanren types to bitstring representations. For the Boolean\nsemiring, this compilation enables us to use an SAT solver to run\nsemiringKanren programs efficiently. We compare the performance of\nsemiringKanren and faster miniKanren for solving Sudoku puzzles. Our experiment\nshows that semiringKanren can be a more efficient variant of miniKanren."}
