{"id": "2507.08190", "categories": ["cs.DC", "cs.CR"], "pdf": "https://arxiv.org/pdf/2507.08190", "abs": "https://arxiv.org/abs/2507.08190", "authors": ["Simon Johnson", "Raghunandan Makaram", "Amy Santoni", "Vinnie Scarlata"], "title": "Supporting Intel(r) SGX on Multi-Package Platforms", "comment": "8 pages, 6 figures", "summary": "Intel(r) Software Guard Extensions (SGX) was originally released on client\nplatforms and later extended to single socket server platforms. As developers\nhave become familiar with the capabilities of the technology, the applicability\nof this capability in the cloud has been tested. Various Cloud Service\nProviders (CSPs) are demonstrating the value of using SGX based Trusted\nExecution Environments (TEE) to create a new paradigm of Confidential Cloud\nComputing. This paper describes the additional platform enhancements we believe\nare necessary to deliver a user programmable Trusted Execution Environment that\nscales to cloud usages, performs and is secure on multi-package platforms.", "AI": {"tldr": "\u672c\u6587\u63a2\u8ba8\u4e86Intel SGX\u6280\u672f\u5728\u4e91\u8ba1\u7b97\u4e2d\u7684\u5e94\u7528\uff0c\u5e76\u63d0\u51fa\u4e86\u591a\u5e73\u53f0\u6269\u5c55\u7684\u5fc5\u8981\u6027\u3002", "motivation": "\u968f\u7740\u5f00\u53d1\u8005\u5bf9SGX\u6280\u672f\u7684\u719f\u6089\uff0c\u5176\u5728\u4e91\u8ba1\u7b97\u4e2d\u7684\u9002\u7528\u6027\u88ab\u6d4b\u8bd5\uff0c\u9700\u8981\u8fdb\u4e00\u6b65\u6269\u5c55\u4ee5\u652f\u6301\u591a\u5e73\u53f0\u3002", "method": "\u63cf\u8ff0\u4e86\u4e3a\u652f\u6301\u591a\u5e73\u53f0\u548c\u4e91\u8ba1\u7b97\u7684SGX\u5e73\u53f0\u589e\u5f3a\u63aa\u65bd\u3002", "result": "\u5c55\u793a\u4e86SGX\u5728\u4e91\u8ba1\u7b97\u4e2d\u7684\u6f5c\u529b\uff0c\u5e76\u63d0\u51fa\u4e86\u6269\u5c55\u9700\u6c42\u3002", "conclusion": "SGX\u6280\u672f\u9700\u8981\u8fdb\u4e00\u6b65\u6269\u5c55\u4ee5\u5b9e\u73b0\u53ef\u7f16\u7a0b\u3001\u9ad8\u6027\u80fd\u4e14\u5b89\u5168\u7684\u4e91\u8ba1\u7b97\u73af\u5883\u3002"}}
{"id": "2507.08281", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2507.08281", "abs": "https://arxiv.org/abs/2507.08281", "authors": ["Ahmad Zaki Akmal", "Azkario Rizky Pratama", "Guntur Dharma Putra"], "title": "Fast and Interactive Byzantine Fault-tolerant Web Services via Session-Based Consensus Decoupling", "comment": "6 pages, 5 figures. Accepted to IEEE MetaCom 2025 as a short paper", "summary": "Byzantine fault-tolerant (BFT) web services provide critical integrity\nguarantees for distributed applications but face significant latency challenges\nthat hinder interactive user experiences. We propose a novel two-layer\narchitecture that addresses this fundamental tension between security and\nresponsiveness in BFT systems. Our approach introduces a session-aware\ntransaction buffer layer (Layer 2) that delivers immediate feedback to users\nthrough consensus simulation, while periodically committing batched operations\nto a fully Byzantine fault-tolerant consensus layer (Layer 1). By separating\ninteractive operations from consensus finalization, our system achieves\nresponsive user experiences of under 200ms, while maintaining strong BFT\nsecurity guarantees. We demonstrate the efficacy of our architecture through a\nsupply chain management implementation, where operators require both immediate\nfeedback during multi-step workflows and tamper-proof record keeping. Our\nevaluation shows that our Layer 2 operations perform four times faster than the\nLayer 1 counterpart, while substantially preserving the end-to-end transaction\nintegrity. Our approach enables BFT applications in domains previously\nconsidered impractical due to latency constraints, such as metaverse\nenvironments, where users require both responsive interaction and guaranteed\nstate consistency.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u578b\u7684\u4e24\u5c42\u67b6\u6784\uff0c\u901a\u8fc7\u5206\u79bb\u4ea4\u4e92\u64cd\u4f5c\u548c\u5171\u8bc6\u6700\u7ec8\u5316\uff0c\u89e3\u51b3\u4e86BFT\u7cfb\u7edf\u4e2d\u5b89\u5168\u6027\u548c\u54cd\u5e94\u6027\u4e4b\u95f4\u7684\u77db\u76fe\uff0c\u5b9e\u73b0\u4e86\u4f4e\u5ef6\u8fdf\u548c\u9ad8\u5b89\u5168\u6027\u3002", "motivation": "\u89e3\u51b3BFT\u7cfb\u7edf\u5728\u63d0\u4f9b\u5173\u952e\u5b8c\u6574\u6027\u4fdd\u8bc1\u65f6\u9762\u4e34\u7684\u5ef6\u8fdf\u95ee\u9898\uff0c\u4ee5\u63d0\u5347\u4ea4\u4e92\u5f0f\u7528\u6237\u4f53\u9a8c\u3002", "method": "\u91c7\u7528\u4e24\u5c42\u67b6\u6784\uff1a\u4f1a\u8bdd\u611f\u77e5\u7684\u4e8b\u52a1\u7f13\u51b2\u5c42\uff08Layer 2\uff09\u63d0\u4f9b\u5373\u65f6\u53cd\u9988\uff0c\u5b9a\u671f\u5c06\u6279\u91cf\u64cd\u4f5c\u63d0\u4ea4\u5230\u5b8c\u5168BFT\u5171\u8bc6\u5c42\uff08Layer 1\uff09\u3002", "result": "\u7cfb\u7edf\u5b9e\u73b0\u4e86\u4f4e\u4e8e200ms\u7684\u54cd\u5e94\u65f6\u95f4\uff0c\u540c\u65f6\u4fdd\u6301\u5f3aBFT\u5b89\u5168\u6027\uff1bLayer 2\u64cd\u4f5c\u901f\u5ea6\u662fLayer 1\u7684\u56db\u500d\u3002", "conclusion": "\u8be5\u67b6\u6784\u4f7fBFT\u5e94\u7528\u5728\u5ef6\u8fdf\u53d7\u9650\u9886\u57df\uff08\u5982\u5143\u5b87\u5b99\uff09\u6210\u4e3a\u53ef\u80fd\uff0c\u6ee1\u8db3\u4e86\u54cd\u5e94\u6027\u548c\u72b6\u6001\u4e00\u81f4\u6027\u7684\u53cc\u91cd\u9700\u6c42\u3002"}}
{"id": "2507.08348", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2507.08348", "abs": "https://arxiv.org/abs/2507.08348", "authors": ["Yi-Jun Chang", "Lyuting Chen", "Haoran Zhou"], "title": "Content-Oblivious Leader Election in 2-Edge-Connected Networks", "comment": null, "summary": "Censor-Hillel, Cohen, Gelles, and Sela (PODC 2022 \\& Distributed Computing\n2023) studied fully-defective asynchronous networks, where communication\nchannels may suffer an extreme form of alteration errors, rendering messages\ncompletely corrupted. The model is equivalent to content-oblivious computation,\nwhere nodes communicate solely via pulses. They showed that if the network is\n2-edge-connected, then any algorithm for a noiseless setting can be simulated\nin the fully-defective setting; otherwise, no non-trivial computation is\npossible in the fully-defective setting. However, their simulation requires a\npredesignated leader, which they conjectured to be necessary for any\nnon-trivial content-oblivious task.\n  Recently, Frei, Gelles, Ghazy, and Nolin (DISC 2024) refuted this conjecture\nfor the special case of oriented ring topology. They designed two asynchronous\ncontent-oblivious leader election algorithms with message complexity $O(n \\cdot\n\\mathsf{ID}_{\\max})$, where $n$ is the number of nodes and $\\mathsf{ID}_{\\max}$\nis the maximum $\\mathsf{ID}$. The first algorithm stabilizes in unoriented\nrings without termination detection. The second algorithm quiescently\nterminates in oriented rings, thus enabling the execution of the simulation\nalgorithm after leader election.\n  In this work, we present an asynchronous content-oblivious leader election\nalgorithm that quiescently terminates in any 2-edge connected network with\nmessage complexity $O(m \\cdot N \\cdot \\mathsf{ID}_{\\min})$, where $m$ is the\nnumber of edges, $N$ is a known upper bound on the number of nodes, and\n$\\mathsf{ID}_{\\min}$ is the smallest $\\mathsf{ID}$. Combined with the previous\nsimulation result, our finding implies that any algorithm from the noiseless\nsetting can be simulated in the fully-defective setting without assuming a\npreselected leader, entirely refuting the original conjecture.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57282\u8fb9\u8fde\u901a\u7f51\u7edc\u4e2d\u5f02\u6b65\u65e0\u5185\u5bb9\u611f\u77e5\u7684\u9886\u5bfc\u8005\u9009\u4e3e\u7b97\u6cd5\uff0c\u6d88\u606f\u590d\u6742\u5ea6\u4e3aO(m\u22c5N\u22c5ID_min)\uff0c\u7ed3\u5408\u4e4b\u524d\u7684\u6a21\u62df\u7ed3\u679c\uff0c\u5b8c\u5168\u53cd\u9a73\u4e86\u539f\u731c\u60f3\u3002", "motivation": "\u7814\u7a76\u5b8c\u5168\u7f3a\u9677\u5f02\u6b65\u7f51\u7edc\u4e2d\u65e0\u9700\u9884\u8bbe\u9886\u5bfc\u8005\u5373\u53ef\u8fdb\u884c\u975e\u5e73\u51e1\u8ba1\u7b97\u7684\u53ef\u80fd\u6027\uff0c\u7279\u522b\u662f\u9488\u5bf92\u8fb9\u8fde\u901a\u7f51\u7edc\u3002", "method": "\u8bbe\u8ba1\u4e86\u4e00\u79cd\u5f02\u6b65\u65e0\u5185\u5bb9\u611f\u77e5\u7684\u9886\u5bfc\u8005\u9009\u4e3e\u7b97\u6cd5\uff0c\u9002\u7528\u4e8e2\u8fb9\u8fde\u901a\u7f51\u7edc\uff0c\u6d88\u606f\u590d\u6742\u5ea6\u4e3aO(m\u22c5N\u22c5ID_min)\u3002", "result": "\u7b97\u6cd5\u80fd\u591f\u57282\u8fb9\u8fde\u901a\u7f51\u7edc\u4e2d\u9759\u9ed8\u7ec8\u6b62\uff0c\u7ed3\u5408\u4e4b\u524d\u7684\u6a21\u62df\u7ed3\u679c\uff0c\u8bc1\u660e\u65e0\u9700\u9884\u8bbe\u9886\u5bfc\u8005\u5373\u53ef\u6a21\u62df\u65e0\u566a\u58f0\u8bbe\u7f6e\u4e2d\u7684\u7b97\u6cd5\u3002", "conclusion": "\u5b8c\u5168\u53cd\u9a73\u4e86\u539f\u731c\u60f3\uff0c\u8bc1\u660e\u4e86\u57282\u8fb9\u8fde\u901a\u7f51\u7edc\u4e2d\u65e0\u9700\u9884\u8bbe\u9886\u5bfc\u8005\u5373\u53ef\u8fdb\u884c\u975e\u5e73\u51e1\u8ba1\u7b97\u3002"}}
{"id": "2507.08725", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2507.08725", "abs": "https://arxiv.org/abs/2507.08725", "authors": ["Dominik Schweisgut", "Anne Benoit", "Yves Robert", "Henning Meyerhenke"], "title": "Carbon-Aware Workflow Scheduling with Fixed Mapping and Deadline Constraint", "comment": "40 pages, 17 figures. Accepted at ICPP 2025. Code available at:\n  https://github.com/KIT-EAE/CaWoSched.git", "summary": "Large data and computing centers consume a significant share of the world's\nenergy consumption. A prominent subset of the workloads in such centers are\nworkflows with interdependent tasks, usually represented as directed acyclic\ngraphs (DAGs). To reduce the carbon emissions resulting from executing such\nworkflows in centers with a mixed (renewable and non-renewable) energy supply,\nit is advisable to move task executions to time intervals with sufficient green\nenergy when possible. To this end, we formalize the above problem as a\nscheduling problem with a given mapping and ordering of the tasks. We show that\nthis problem can be solved in polynomial time in the uniprocessor case. For at\nleast two processors, however, the problem becomes NP-hard. Hence, we propose a\nheuristic framework called CaWoSched that combines several greedy approaches\nwith local search. To assess the 16 heuristics resulting from different\ncombinations, we also devise a simple baseline algorithm and an exact ILP-based\nsolution. Our experimental results show that our heuristics provide significant\nsavings in carbon emissions compared to the baseline.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u8c03\u5ea6\u6846\u67b6CaWoSched\uff0c\u7528\u4e8e\u5728\u6df7\u5408\u80fd\u6e90\u6570\u636e\u4e2d\u5fc3\u4e2d\u4f18\u5316\u4efb\u52a1\u8c03\u5ea6\u4ee5\u51cf\u5c11\u78b3\u6392\u653e\u3002", "motivation": "\u5927\u578b\u6570\u636e\u4e2d\u5fc3\u80fd\u8017\u9ad8\uff0c\u78b3\u6392\u653e\u95ee\u9898\u4e25\u91cd\uff0c\u5c24\u5176\u662f\u4efb\u52a1\u4f9d\u8d56\u6027\u5f3a\u7684\u5de5\u4f5c\u6d41\u3002\u901a\u8fc7\u4f18\u5316\u8c03\u5ea6\u4efb\u52a1\u5230\u7eff\u8272\u80fd\u6e90\u5145\u8db3\u65f6\u6bb5\uff0c\u53ef\u51cf\u5c11\u78b3\u6392\u653e\u3002", "method": "\u5c06\u95ee\u9898\u5f62\u5f0f\u5316\u4e3a\u8c03\u5ea6\u95ee\u9898\uff0c\u63d0\u51fa\u591a\u9879\u5f0f\u65f6\u95f4\u89e3\uff08\u5355\u5904\u7406\u5668\uff09\u548cNP\u96be\u89e3\uff08\u591a\u5904\u7406\u5668\uff09\u3002\u63d0\u51fa\u542f\u53d1\u5f0f\u6846\u67b6CaWoSched\uff0c\u7ed3\u5408\u8d2a\u5a6a\u7b97\u6cd5\u548c\u5c40\u90e8\u641c\u7d22\u3002", "result": "\u5b9e\u9a8c\u8868\u660e\uff0cCaWoSched\u76f8\u6bd4\u57fa\u7ebf\u7b97\u6cd5\u663e\u8457\u51cf\u5c11\u4e86\u78b3\u6392\u653e\u3002", "conclusion": "CaWoSched\u5728\u6df7\u5408\u80fd\u6e90\u6570\u636e\u4e2d\u5fc3\u4e2d\u6709\u6548\u51cf\u5c11\u78b3\u6392\u653e\uff0c\u5c24\u5176\u9002\u7528\u4e8e\u591a\u5904\u7406\u5668\u73af\u5883\u3002"}}
{"id": "2507.08406", "categories": ["cs.AR", "cs.DC"], "pdf": "https://arxiv.org/pdf/2507.08406", "abs": "https://arxiv.org/abs/2507.08406", "authors": ["Weigang Feng", "Yijia Zhang", "Zekun Wang", "Zhengyang Wang", "Yi Wang", "Peijun Ma", "Ningyi Xu"], "title": "CCSS: Hardware-Accelerated RTL Simulation with Fast Combinational Logic Computing and Sequential Logic Synchronization", "comment": null, "summary": "As transistor counts in a single chip exceed tens of billions, the complexity\nof RTL-level simulation and verification has grown exponentially, often\nextending simulation campaigns to several months. In industry practice, RTL\nsimulation is divided into two phases: functional debug and system validation.\nWhile system validation demands high simulation speed and is typically\naccelerated using FPGAs, functional debug relies on rapid compilation-rendering\nmulti-core CPUs the primary choice. However, the limited simulation speed of\nCPUs has become a major bottleneck. To address this challenge, we propose CCSS,\na scalable multi-core RTL simulation platform that achieves both fast\ncompilation and high simulation throughput. CCSS accelerates combinational\nlogic computation and sequential logic synchronization through specialized\narchitecture and compilation strategies. It employs a balanced DAG partitioning\nmethod and efficient boolean computation cores for combinational logic, and\nadopts a low-latency network-on-chip (NoC) design to synchronize sequential\nstates across cores efficiently. Experimental results show that CCSS delivers\nup to 12.9x speedup over state-of-the-art multi-core simulators.", "AI": {"tldr": "CCSS\u662f\u4e00\u4e2a\u53ef\u6269\u5c55\u7684\u591a\u6838RTL\u4eff\u771f\u5e73\u53f0\uff0c\u901a\u8fc7\u4e13\u7528\u67b6\u6784\u548c\u7f16\u8bd1\u7b56\u7565\u52a0\u901f\u7ec4\u5408\u903b\u8f91\u8ba1\u7b97\u548c\u65f6\u5e8f\u903b\u8f91\u540c\u6b65\uff0c\u6bd4\u73b0\u6709\u6280\u672f\u5feb12.9\u500d\u3002", "motivation": "\u968f\u7740\u5355\u82af\u7247\u6676\u4f53\u7ba1\u6570\u91cf\u8d85\u8fc7\u6570\u767e\u4ebf\uff0cRTL\u7ea7\u4eff\u771f\u548c\u9a8c\u8bc1\u7684\u590d\u6742\u6027\u5448\u6307\u6570\u589e\u957f\uff0c\u4eff\u771f\u5468\u671f\u957f\u8fbe\u6570\u6708\u3002CPU\u4eff\u771f\u901f\u5ea6\u6210\u4e3a\u529f\u80fd\u8c03\u8bd5\u7684\u4e3b\u8981\u74f6\u9888\u3002", "method": "CCSS\u91c7\u7528\u5e73\u8861\u7684DAG\u5206\u533a\u65b9\u6cd5\u548c\u9ad8\u6548\u7684\u5e03\u5c14\u8ba1\u7b97\u6838\u5fc3\u5904\u7406\u7ec4\u5408\u903b\u8f91\uff0c\u5e76\u901a\u8fc7\u4f4e\u5ef6\u8fdf\u7247\u4e0a\u7f51\u7edc\uff08NoC\uff09\u8bbe\u8ba1\u540c\u6b65\u65f6\u5e8f\u72b6\u6001\u3002", "result": "\u5b9e\u9a8c\u7ed3\u679c\u8868\u660e\uff0cCCSS\u6bd4\u6700\u5148\u8fdb\u7684\u591a\u6838\u4eff\u771f\u5668\u5feb12.9\u500d\u3002", "conclusion": "CCSS\u901a\u8fc7\u4f18\u5316\u67b6\u6784\u548c\u7f16\u8bd1\u7b56\u7565\uff0c\u663e\u8457\u63d0\u5347\u4e86RTL\u4eff\u771f\u7684\u901f\u5ea6\u548c\u6548\u7387\u3002"}}
{"id": "2507.08759", "categories": ["cs.PL", "cs.LO"], "pdf": "https://arxiv.org/pdf/2507.08759", "abs": "https://arxiv.org/abs/2507.08759", "authors": ["Maximilian Dor\u00e9"], "title": "Dependent Multiplicities in Dependent Linear Type Theory", "comment": null, "summary": "We present a novel dependent linear type theory in which the multiplicity of\nsome variable - i.e., the number of times the variable can be used in a program\n- can depend on other variables. This allows us to give precise resource\nannotations to many higher-order functions that cannot be adequately typed in\nany other system. Inspired by the Dialectica translation, our typing discipline\nis obtained by embedding linear logic into dependent type theory and specifying\nhow the embedded logic interacts with the host theory. We can then use a\nstandard natural numbers type to obtain a quantitative typing system with\ndependent multiplicities. We characterise the semantics for our theory as a\ncombination of standard models of dependent type theory and linear logic. Our\nsystem can be added to any dependently typed language, which we demonstrate\nwith an implementation in Agda.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u9896\u7684\u4f9d\u8d56\u7ebf\u6027\u7c7b\u578b\u7406\u8bba\uff0c\u5176\u4e2d\u53d8\u91cf\u7684\u591a\u91cd\u6027\uff08\u5373\u53d8\u91cf\u5728\u7a0b\u5e8f\u4e2d\u7684\u4f7f\u7528\u6b21\u6570\uff09\u53ef\u4ee5\u4f9d\u8d56\u4e8e\u5176\u4ed6\u53d8\u91cf\uff0c\u4ece\u800c\u4e3a\u9ad8\u9636\u51fd\u6570\u63d0\u4f9b\u7cbe\u786e\u7684\u8d44\u6e90\u6ce8\u91ca\u3002", "motivation": "\u73b0\u6709\u7cfb\u7edf\u65e0\u6cd5\u4e3a\u67d0\u4e9b\u9ad8\u9636\u51fd\u6570\u63d0\u4f9b\u51c6\u786e\u7684\u8d44\u6e90\u6ce8\u91ca\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u79cd\u80fd\u591f\u652f\u6301\u4f9d\u8d56\u591a\u91cd\u6027\u7684\u7c7b\u578b\u7406\u8bba\u3002", "method": "\u901a\u8fc7\u5c06\u7ebf\u6027\u903b\u8f91\u5d4c\u5165\u4f9d\u8d56\u7c7b\u578b\u7406\u8bba\uff0c\u5e76\u6307\u5b9a\u5d4c\u5165\u903b\u8f91\u4e0e\u5bbf\u4e3b\u7406\u8bba\u7684\u4ea4\u4e92\u65b9\u5f0f\uff0c\u6784\u5efa\u4e86\u4e00\u4e2a\u5b9a\u91cf\u7c7b\u578b\u7cfb\u7edf\u3002", "result": "\u7406\u8bba\u8bed\u4e49\u7ed3\u5408\u4e86\u4f9d\u8d56\u7c7b\u578b\u7406\u8bba\u548c\u7ebf\u6027\u903b\u8f91\u7684\u6807\u51c6\u6a21\u578b\uff0c\u5e76\u5728Agda\u4e2d\u5b9e\u73b0\u4e86\u8be5\u7cfb\u7edf\u3002", "conclusion": "\u8be5\u7406\u8bba\u4e3a\u4f9d\u8d56\u7c7b\u578b\u8bed\u8a00\u63d0\u4f9b\u4e86\u7075\u6d3b\u7684\u8d44\u6e90\u7ba1\u7406\u80fd\u529b\uff0c\u6269\u5c55\u4e86\u5176\u8868\u8fbe\u80fd\u529b\u3002"}}
{"id": "2507.08658", "categories": ["cs.AR", "cs.DS", "eess.IV"], "pdf": "https://arxiv.org/pdf/2507.08658", "abs": "https://arxiv.org/abs/2507.08658", "authors": ["Robert B. Kent", "Marios S. Pattichis"], "title": "Fast and Efficient Merge of Sorted Input Lists in Hardware Using List Offset Merge Sorters", "comment": null, "summary": "A new set of hardware merge sort devices are introduced here, which merge\nmultiple sorted input lists into a single sorted output list in a fast and\nefficient manner. In each merge sorter, the values from the sorted input lists\nare arranged in an input 2-D setup array, but with the order of each sorted\ninput list offset from the order of each of the other sorted input lists. In\nthese new devices, called List Offset Merge Sorters (LOMS), a minimal set of\ncolumn sort stages alternating with row sort stages process the input setup\narray into a final output array, now in the defined sorted order. LOMS 2-way\nsorters, which merge 2 sorted input lists, require only 2 merge stages and are\nsignificantly faster than Kenneth Batcher's previous state-of-the-art 2-way\nmerge devices, Bitonic Merge Sorters and Odd-Even Merge Sorters. LOMS 2-way\nsorters utilize the recently-introduced Single-Stage 2-way Merge Sorters (S2MS)\nin their first stage. Both LOMS and S2MS devices can merge any mixture of input\nlist sizes, while Batcher's merge sorters are difficult to design unless the 2\ninput lists are equal, and a power-of-2. By themselves, S2MS devices are the\nfastest 2-way merge sorters when implemented in this study's target FPGA\ndevices, but they tend to use a large number of LUT resources. LOMS 2-way\ndevices use fewer resources than comparable S2MS devices, enabling some large\nLOMS devices to be implemented in a given FPGA when comparable S2MS devices\ncannot fit in that FPGA. A List Offset 2-way sorter merges 2 lists, each with\n32 values, into a sorted output list of those 64 values in 2.24 nS, a speedup\nof 2.63 versus a comparable Batcher device. A LOMS 3-way merge sorter, merging\n3 sorted input lists with 7 values, fully merges the 21 values in 3.4 nS, a\nspeedup of 1.36 versus the comparable state-of-the-art 3-way merge device.", "AI": {"tldr": "\u4ecb\u7ecd\u4e86\u65b0\u578b\u786c\u4ef6\u5408\u5e76\u6392\u5e8f\u8bbe\u5907LOMS\uff0c\u901a\u8fc7\u5217\u6392\u5e8f\u548c\u884c\u6392\u5e8f\u4ea4\u66ff\u8fdb\u884c\uff0c\u9ad8\u6548\u5408\u5e76\u591a\u4e2a\u6709\u5e8f\u8f93\u5165\u5217\u8868\u3002LOMS 2-way\u8bbe\u5907\u6bd4\u73b0\u6709\u8bbe\u5907\u66f4\u5feb\u4e14\u8d44\u6e90\u5360\u7528\u66f4\u5c11\u3002", "motivation": "\u89e3\u51b3\u73b0\u6709\u5408\u5e76\u6392\u5e8f\u8bbe\u5907\uff08\u5982Bitonic\u548cOdd-Even\uff09\u5728\u901f\u5ea6\u548c\u8d44\u6e90\u6548\u7387\u4e0a\u7684\u4e0d\u8db3\uff0c\u652f\u6301\u4e0d\u540c\u5927\u5c0f\u7684\u8f93\u5165\u5217\u8868\u3002", "method": "\u4f7f\u7528\u8f93\u51652-D\u6570\u7ec4\uff0c\u901a\u8fc7\u5217\u6392\u5e8f\u548c\u884c\u6392\u5e8f\u4ea4\u66ff\u5904\u7406\uff0c\u5229\u7528S2MS\u8bbe\u5907\u4f5c\u4e3a\u7b2c\u4e00\u9636\u6bb5\u3002", "result": "LOMS 2-way\u8bbe\u5907\u5408\u5e7632\u503c\u5217\u8868\u4ec5\u97002.24 nS\uff0c\u901f\u5ea6\u63d0\u53472.63\u500d\uff1b3-way\u8bbe\u5907\u5408\u5e7621\u503c\u5217\u8868\u4ec5\u97003.4 nS\uff0c\u901f\u5ea6\u63d0\u53471.36\u500d\u3002", "conclusion": "LOMS\u8bbe\u5907\u5728\u901f\u5ea6\u548c\u8d44\u6e90\u6548\u7387\u4e0a\u4f18\u4e8e\u73b0\u6709\u6280\u672f\uff0c\u9002\u7528\u4e8eFPGA\u5b9e\u73b0\u3002"}}
{"id": "2507.08796", "categories": ["cs.PL", "cs.LG"], "pdf": "https://arxiv.org/pdf/2507.08796", "abs": "https://arxiv.org/abs/2507.08796", "authors": ["Owen Lewis", "Neil Ghani", "Andrew Dudzik", "Christos Perivolaropoulos", "Razvan Pascanu", "Petar Veli\u010dkovi\u0107"], "title": "Filter Equivariant Functions: A symmetric account of length-general extrapolation on lists", "comment": "18 pages, 2 figures", "summary": "What should a function that extrapolates beyond known input/output examples\nlook like? This is a tricky question to answer in general, as any function\nmatching the outputs on those examples can in principle be a correct\nextrapolant. We argue that a \"good\" extrapolant should follow certain kinds of\nrules, and here we study a particularly appealing criterion for rule-following\nin list functions: that the function should behave predictably even when\ncertain elements are removed. In functional programming, a standard way to\nexpress such removal operations is by using a filter function. Accordingly, our\npaper introduces a new semantic class of functions -- the filter equivariant\nfunctions. We show that this class contains interesting examples, prove some\nbasic theorems about it, and relate it to the well-known class of map\nequivariant functions. We also present a geometric account of filter\nequivariants, showing how they correspond naturally to certain simplicial\nstructures. Our highlight result is the amalgamation algorithm, which\nconstructs any filter-equivariant function's output by first studying how it\nbehaves on sublists of the input, in a way that extrapolates perfectly.", "AI": {"tldr": "\u8bba\u6587\u63a2\u8ba8\u4e86\u5982\u4f55\u8bbe\u8ba1\u4e00\u4e2a\u80fd\u5916\u63a8\u5df2\u77e5\u8f93\u5165/\u8f93\u51fa\u793a\u4f8b\u7684\u51fd\u6570\uff0c\u63d0\u51fa\u4e86\u201c\u8fc7\u6ee4\u5668\u7b49\u53d8\u51fd\u6570\u201d\u8fd9\u4e00\u65b0\u8bed\u4e49\u7c7b\uff0c\u5e76\u7814\u7a76\u4e86\u5176\u6027\u8d28\u3001\u51e0\u4f55\u89e3\u91ca\u53ca\u6784\u9020\u7b97\u6cd5\u3002", "motivation": "\u7814\u7a76\u51fd\u6570\u5728\u5916\u63a8\u65f6\u7684\u884c\u4e3a\u89c4\u5219\uff0c\u63d0\u51fa\u8fc7\u6ee4\u5668\u7b49\u53d8\u51fd\u6570\u4f5c\u4e3a\u201c\u597d\u201d\u5916\u63a8\u51fd\u6570\u7684\u5019\u9009\u3002", "method": "\u5f15\u5165\u8fc7\u6ee4\u5668\u7b49\u53d8\u51fd\u6570\u7c7b\uff0c\u8bc1\u660e\u5176\u57fa\u672c\u5b9a\u7406\uff0c\u4e0e\u6620\u5c04\u7b49\u53d8\u51fd\u6570\u7c7b\u5173\u8054\uff0c\u5e76\u7ed9\u51fa\u51e0\u4f55\u89e3\u91ca\u548c\u6784\u9020\u7b97\u6cd5\u3002", "result": "\u8bc1\u660e\u4e86\u8fc7\u6ee4\u5668\u7b49\u53d8\u51fd\u6570\u7684\u6027\u8d28\uff0c\u63d0\u51fa\u4e86\u4e00\u79cd\u5b8c\u7f8e\u5916\u63a8\u7684\u6784\u9020\u7b97\u6cd5\u3002", "conclusion": "\u8fc7\u6ee4\u5668\u7b49\u53d8\u51fd\u6570\u4e3a\u5916\u63a8\u95ee\u9898\u63d0\u4f9b\u4e86\u6709\u524d\u666f\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5176\u51e0\u4f55\u548c\u7b97\u6cd5\u7279\u6027\u503c\u5f97\u8fdb\u4e00\u6b65\u7814\u7a76\u3002"}}
