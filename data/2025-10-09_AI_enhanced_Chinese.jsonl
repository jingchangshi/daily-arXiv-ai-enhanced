{"id": "2510.06296", "categories": ["cs.PL", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.06296", "abs": "https://arxiv.org/abs/2510.06296", "authors": ["Lingfei Zeng", "Fengdi Che", "Xuhan Huang", "Fei Ye", "Xu Xu", "Binhang Yuan", "Jie Fu"], "title": "VeriEquivBench: An Equivalence Score for Ground-Truth-Free Evaluation of Formally Verifiable Code", "comment": null, "summary": "Formal verification is the next frontier for ensuring the correctness of code\ngenerated by Large Language Models (LLMs). While methods that co-generate code\nand formal specifications in formal languages, like Dafny, can, in principle,\nprove alignment with user intent, progress is bottlenecked by specification\nquality evaluation. Current benchmarks rely on matching against ground-truth\nspecifications, a manual and expertise-intensive process that has limited\nexisting datasets to a few hundred simple problems and also suffers from a\nreliability issue. To address this, we introduce VeriEquivBench, a new\nbenchmark with $2,389$ complex algorithmic problems that probe the limitations\nof current models in both code generation and formal reasoning. Our evaluation\nframework replaces ground-truth matching with a formally grounded metric, the\nequivalence score, and rigorously verifies the quality of generated\nspecifications and code. Our results show that generating formally verifiable\ncode remains a profound challenge for state-of-the-art LLMs. This underscores\nboth the difficulty of the task and the need for benchmarks like VeriEquivBench\nto drive progress toward scalable and reliable coding agents.", "AI": {"tldr": "\u4ecb\u7ecd\u4e86VeriEquivBench\u57fa\u51c6\u6d4b\u8bd5\uff0c\u5305\u542b2389\u4e2a\u590d\u6742\u7b97\u6cd5\u95ee\u9898\uff0c\u7528\u4e8e\u8bc4\u4f30LLM\u5728\u4ee3\u7801\u751f\u6210\u548c\u5f62\u5f0f\u63a8\u7406\u65b9\u9762\u7684\u80fd\u529b\uff0c\u4f7f\u7528\u5f62\u5f0f\u5316\u7b49\u4ef7\u8bc4\u5206\u4ee3\u66ff\u4eba\u5de5\u6807\u6ce8\u3002", "motivation": "\u89e3\u51b3\u5f53\u524d\u57fa\u4e8e\u4eba\u5de5\u6807\u6ce8\u7684\u5f62\u5f0f\u5316\u9a8c\u8bc1\u57fa\u51c6\u6d4b\u8bd5\u89c4\u6a21\u5c0f\u3001\u53ef\u9760\u6027\u5dee\u7684\u95ee\u9898\uff0c\u63a8\u52a8LLM\u751f\u6210\u53ef\u9a8c\u8bc1\u4ee3\u7801\u7684\u53d1\u5c55\u3002", "method": "\u521b\u5efa\u5305\u542b2389\u4e2a\u590d\u6742\u7b97\u6cd5\u95ee\u9898\u7684\u57fa\u51c6\u6d4b\u8bd5\uff0c\u91c7\u7528\u5f62\u5f0f\u5316\u7b49\u4ef7\u8bc4\u5206\u4f5c\u4e3a\u8bc4\u4f30\u6307\u6807\uff0c\u4e25\u683c\u9a8c\u8bc1\u751f\u6210\u7684\u89c4\u8303\u548c\u4ee3\u7801\u8d28\u91cf\u3002", "result": "\u5b9e\u9a8c\u8868\u660e\uff0c\u5f53\u524d\u6700\u5148\u8fdb\u7684LLM\u5728\u751f\u6210\u53ef\u5f62\u5f0f\u5316\u9a8c\u8bc1\u7684\u4ee3\u7801\u65b9\u9762\u4ecd\u9762\u4e34\u5de8\u5927\u6311\u6218\u3002", "conclusion": "VeriEquivBench\u57fa\u51c6\u6d4b\u8bd5\u5bf9\u4e8e\u63a8\u52a8\u53ef\u6269\u5c55\u548c\u53ef\u9760\u7684\u7f16\u7801\u4ee3\u7406\u53d1\u5c55\u81f3\u5173\u91cd\u8981\uff0c\u7a81\u663e\u4e86\u8be5\u4efb\u52a1\u7684\u96be\u5ea6\u3002"}}
{"id": "2510.06387", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.06387", "abs": "https://arxiv.org/abs/2510.06387", "authors": ["Raaghav Ravishankar", "Sandeep Kulkarni", "Sathya Peri", "Gokarna Sharma"], "title": "DiLi: A Lock-Free Asynchronously Distributable Linked List", "comment": null, "summary": "Modern databases use dynamic search structures that store a huge amount of\ndata, and often serve them using multi-threaded algorithms to support the\never-increasing throughput needs. When this throughput need exceeds the\ncapacity of the machine hosting the structure, one either needs to replace the\nunderlying hardware (an option that is typically not viable and introduces a\nlong down time) or make the data structure distributed. Static partitioning of\nthe data structure for distribution is not desirable, as it is prone to uneven\nload distribution over time, and having to change the partitioning scheme later\nwill require downtime.\n  Since a distributed data structure, inherently, relies on communication\nsupport from the network stack and operating systems, we introduce the notion\nof conditional lock-freedom that extends the notion of lock-free computation\nwith reasonable assumptions about communication between processes. We present\nDiLi, a conditional lock-free, linearizable, and distributable linked list that\ncan be asynchronously and dynamically (1) partitioned into multiple sublists\nand (2) load balanced by distributing sublists across multiple machines. DiLi\ncontains primitives for these that also maintain the lock-free property of the\nunderlying search structure that supports find, remove, and insert of a key as\nthe client operations.\n  Searching for an item in DiLi is by a novel traversal that involves a binary\nsearch on the partitioning scheme, and then a linear traversal on a limitable\nnumber of linked nodes. As a result, we are able to empirically show that DiLi\nperforms as well as the state-of-the-art lock-free concurrent search structures\nthat are based off of a linked list when executed on a single-machine. We also\nshow that the throughput of DiLi scales linearly with the number of machines\nthat host it.", "AI": {"tldr": "DiLi\u662f\u4e00\u4e2a\u6761\u4ef6\u65e0\u9501\u3001\u53ef\u7ebf\u6027\u5316\u3001\u53ef\u5206\u5e03\u5f0f\u90e8\u7f72\u7684\u94fe\u8868\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u52a8\u6001\u5206\u533a\u548c\u8d1f\u8f7d\u5747\u8861\uff0c\u5728\u591a\u673a\u73af\u5883\u4e0b\u80fd\u591f\u7ebf\u6027\u6269\u5c55\u541e\u5410\u91cf", "motivation": "\u73b0\u4ee3\u6570\u636e\u5e93\u9700\u8981\u5904\u7406\u6d77\u91cf\u6570\u636e\u548c\u9ad8\u541e\u5410\u91cf\u9700\u6c42\uff0c\u5f53\u5355\u673a\u5bb9\u91cf\u4e0d\u8db3\u65f6\uff0c\u8981\u4e48\u66ff\u6362\u786c\u4ef6\uff08\u4e0d\u53ef\u884c\u4e14\u505c\u673a\u65f6\u95f4\u957f\uff09\uff0c\u8981\u4e48\u91c7\u7528\u5206\u5e03\u5f0f\u6570\u636e\u7ed3\u6784\u3002\u9759\u6001\u5206\u533a\u5bb9\u6613\u5bfc\u81f4\u8d1f\u8f7d\u4e0d\u5747\uff0c\u52a8\u6001\u8c03\u6574\u5206\u533a\u65b9\u6848\u53c8\u9700\u8981\u505c\u673a\u65f6\u95f4", "method": "\u63d0\u51fa\u6761\u4ef6\u65e0\u9501\u6982\u5ff5\uff0c\u6269\u5c55\u65e0\u9501\u8ba1\u7b97\u4ee5\u652f\u6301\u8fdb\u7a0b\u95f4\u901a\u4fe1\u3002DiLi\u652f\u6301\u5f02\u6b65\u52a8\u6001\u5206\u533a\u548c\u8d1f\u8f7d\u5747\u8861\uff0c\u901a\u8fc7\u5206\u533a\u65b9\u6848\u4e0a\u7684\u4e8c\u5206\u641c\u7d22\u548c\u6709\u9650\u6570\u91cf\u7684\u94fe\u8868\u8282\u70b9\u7ebf\u6027\u904d\u5386\u6765\u5b9e\u73b0\u641c\u7d22\u64cd\u4f5c", "result": "\u5b9e\u9a8c\u8868\u660eDiLi\u5728\u5355\u673a\u73af\u5883\u4e0b\u6027\u80fd\u4e0e\u6700\u5148\u8fdb\u7684\u65e0\u9501\u5e76\u53d1\u641c\u7d22\u7ed3\u6784\u76f8\u5f53\uff0c\u5728\u591a\u673a\u73af\u5883\u4e0b\u541e\u5410\u91cf\u968f\u673a\u5668\u6570\u91cf\u7ebf\u6027\u6269\u5c55", "conclusion": "DiLi\u63d0\u4f9b\u4e86\u4e00\u79cd\u6709\u6548\u7684\u5206\u5e03\u5f0f\u6570\u636e\u7ed3\u6784\u89e3\u51b3\u65b9\u6848\uff0c\u80fd\u591f\u5728\u4fdd\u6301\u65e0\u9501\u7279\u6027\u7684\u540c\u65f6\u5b9e\u73b0\u52a8\u6001\u5206\u533a\u548c\u8d1f\u8f7d\u5747\u8861\uff0c\u6ee1\u8db3\u73b0\u4ee3\u6570\u636e\u5e93\u7684\u9ad8\u541e\u5410\u91cf\u9700\u6c42"}}
{"id": "2510.06513", "categories": ["cs.AR", "cs.DC"], "pdf": "https://arxiv.org/pdf/2510.06513", "abs": "https://arxiv.org/abs/2510.06513", "authors": ["Debendra Das Sharma", "Swadesh Choudhary", "Peter Onufryk", "Rob Pelt"], "title": "On-Package Memory with Universal Chiplet Interconnect Express (UCIe): A Low Power, High Bandwidth, Low Latency and Low Cost Approach", "comment": "10 pages", "summary": "Emerging computing applications such as Artificial Intelligence (AI) are\nfacing a memory wall with existing on-package memory solutions that are unable\nto meet the power-efficient bandwidth demands. We propose to enhance UCIe with\nmemory semantics to deliver power-efficient bandwidth and cost-effective\non-package memory solutions applicable across the entire computing continuum.\nWe propose approaches by reusing existing LPDDR6 and HBM memory through a logic\ndie that connects to the SoC using UCIe. We also propose an approach where the\nDRAM die natively supports UCIe instead of the LPDDR6 bus interface. Our\napproaches result in significantly higher bandwidth density (up to 10x), lower\nlatency (up to 3x), lower power (up to 3x), and lower cost compared to existing\nHBM4 and LPDDR on-package memory solutions.", "AI": {"tldr": "\u63d0\u51fa\u901a\u8fc7\u589e\u5f3aUCIe\u63a5\u53e3\u652f\u6301\u5185\u5b58\u8bed\u4e49\uff0c\u4e3aAI\u7b49\u8ba1\u7b97\u5e94\u7528\u63d0\u4f9b\u9ad8\u5e26\u5bbd\u5bc6\u5ea6\u3001\u4f4e\u5ef6\u8fdf\u3001\u4f4e\u529f\u8017\u548c\u4f4e\u6210\u672c\u7684\u5c01\u88c5\u5185\u5b58\u89e3\u51b3\u65b9\u6848\u3002", "motivation": "\u73b0\u6709\u5c01\u88c5\u5185\u5b58\u89e3\u51b3\u65b9\u6848\u65e0\u6cd5\u6ee1\u8db3AI\u7b49\u65b0\u5174\u8ba1\u7b97\u5e94\u7528\u5bf9\u9ad8\u80fd\u6548\u5e26\u5bbd\u7684\u9700\u6c42\uff0c\u9762\u4e34\u5185\u5b58\u5899\u95ee\u9898\u3002", "method": "\u901a\u8fc7\u91cd\u7528LPDDR6\u548cHBM\u5185\u5b58\uff0c\u4f7f\u7528\u903b\u8f91\u82af\u7247\u901a\u8fc7UCIe\u8fde\u63a5\u5230SoC\uff1b\u6216\u8ba9DRAM\u82af\u7247\u539f\u751f\u652f\u6301UCIe\u63a5\u53e3\u66ff\u4ee3LPDDR6\u603b\u7ebf\u63a5\u53e3\u3002", "result": "\u76f8\u6bd4\u73b0\u6709HBM4\u548cLPDDR\u5c01\u88c5\u5185\u5b58\u65b9\u6848\uff0c\u5e26\u5bbd\u5bc6\u5ea6\u63d0\u5347\u9ad8\u8fbe10\u500d\uff0c\u5ef6\u8fdf\u964d\u4f4e\u9ad8\u8fbe3\u500d\uff0c\u529f\u8017\u964d\u4f4e\u9ad8\u8fbe3\u500d\uff0c\u6210\u672c\u66f4\u4f4e\u3002", "conclusion": "\u589e\u5f3aUCIe\u652f\u6301\u5185\u5b58\u8bed\u4e49\u80fd\u591f\u4e3a\u6574\u4e2a\u8ba1\u7b97\u8fde\u7eed\u4f53\u63d0\u4f9b\u9ad8\u80fd\u6548\u5e26\u5bbd\u548c\u6210\u672c\u6548\u76ca\u7684\u5c01\u88c5\u5185\u5b58\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2510.06396", "categories": ["cs.DC", "cs.AI", "cs.PF", "cs.SE"], "pdf": "https://arxiv.org/pdf/2510.06396", "abs": "https://arxiv.org/abs/2510.06396", "authors": ["Aymen Alsaadi", "Jonathan Ash", "Mikhail Titov", "Matteo Turilli", "Andre Merzky", "Shantenu Jha", "Sagar Khare"], "title": "Adaptive Protein Design Protocols and Middleware", "comment": "N/A", "summary": "Computational protein design is experiencing a transformation driven by\nAI/ML. However, the range of potential protein sequences and structures is\nastronomically vast, even for moderately sized proteins. Hence, achieving\nconvergence between generated and predicted structures demands substantial\ncomputational resources for sampling. The Integrated Machine-learning for\nProtein Structures at Scale (IMPRESS) offers methods and advanced computing\nsystems for coupling AI to high-performance computing tasks, enabling the\nability to evaluate the effectiveness of protein designs as they are developed,\nas well as the models and simulations used to generate data and train models.\nThis paper introduces IMPRESS and demonstrates the development and\nimplementation of an adaptive protein design protocol and its supporting\ncomputing infrastructure. This leads to increased consistency in the quality of\nprotein design and enhanced throughput of protein design due to dynamic\nresource allocation and asynchronous workload execution.", "AI": {"tldr": "IMPRESS\u662f\u4e00\u4e2a\u5c06AI\u4e0e\u9ad8\u6027\u80fd\u8ba1\u7b97\u7ed3\u5408\u7684\u86cb\u767d\u8d28\u8bbe\u8ba1\u7cfb\u7edf\uff0c\u901a\u8fc7\u81ea\u9002\u5e94\u534f\u8bae\u548c\u52a8\u6001\u8d44\u6e90\u5206\u914d\u63d0\u9ad8\u8bbe\u8ba1\u8d28\u91cf\u548c\u6548\u7387", "motivation": "\u86cb\u767d\u8d28\u5e8f\u5217\u548c\u7ed3\u6784\u7a7a\u95f4\u6781\u5176\u5e9e\u5927\uff0c\u4f20\u7edf\u8ba1\u7b97\u65b9\u6cd5\u9700\u8981\u5927\u91cf\u8ba1\u7b97\u8d44\u6e90\u8fdb\u884c\u91c7\u6837\uff0c\u96be\u4ee5\u5b9e\u73b0\u751f\u6210\u7ed3\u6784\u4e0e\u9884\u6d4b\u7ed3\u6784\u4e4b\u95f4\u7684\u6536\u655b", "method": "\u5f00\u53d1IMPRESS\u7cfb\u7edf\uff0c\u7ed3\u5408AI\u4e0e\u9ad8\u6027\u80fd\u8ba1\u7b97\uff0c\u91c7\u7528\u81ea\u9002\u5e94\u86cb\u767d\u8d28\u8bbe\u8ba1\u534f\u8bae\u3001\u52a8\u6001\u8d44\u6e90\u5206\u914d\u548c\u5f02\u6b65\u5de5\u4f5c\u8d1f\u8f7d\u6267\u884c", "result": "\u63d0\u9ad8\u4e86\u86cb\u767d\u8d28\u8bbe\u8ba1\u8d28\u91cf\u7684\u4e00\u81f4\u6027\uff0c\u589e\u5f3a\u4e86\u86cb\u767d\u8d28\u8bbe\u8ba1\u7684\u541e\u5410\u91cf", "conclusion": "IMPRESS\u7cfb\u7edf\u901a\u8fc7AI\u4e0e\u9ad8\u6027\u80fd\u8ba1\u7b97\u7684\u96c6\u6210\uff0c\u6709\u6548\u89e3\u51b3\u4e86\u86cb\u767d\u8d28\u8bbe\u8ba1\u4e2d\u7684\u8ba1\u7b97\u6311\u6218\uff0c\u63d0\u5347\u4e86\u8bbe\u8ba1\u6548\u7387\u548c\u53ef\u9760\u6027"}}
{"id": "2510.06644", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.06644", "abs": "https://arxiv.org/abs/2510.06644", "authors": ["Leshu Li", "Jiayin Qin", "Jie Peng", "Zishen Wan", "Huaizhi Qu", "Ye Han", "Pingqing Zheng", "Hongsen Zhang", "Yu", "Cao", "Tianlong Chen", "Yang", "Zhao"], "title": "RTGS: Real-Time 3D Gaussian Splatting SLAM via Multi-Level Redundancy Reduction", "comment": "Accepted by MICRO2025", "summary": "3D Gaussian Splatting (3DGS) based Simultaneous Localization and Mapping\n(SLAM) systems can largely benefit from 3DGS's state-of-the-art rendering\nefficiency and accuracy, but have not yet been adopted in resource-constrained\nedge devices due to insufficient speed. Addressing this, we identify notable\nredundancies across the SLAM pipeline for acceleration. While conceptually\nstraightforward, practical approaches are required to minimize the overhead\nassociated with identifying and eliminating these redundancies. In response, we\npropose RTGS, an algorithm-hardware co-design framework that comprehensively\nreduces the redundancies for real-time 3DGS-SLAM on edge. To minimize the\noverhead, RTGS fully leverages the characteristics of the 3DGS-SLAM pipeline.\nOn the algorithm side, we introduce (1) an adaptive Gaussian pruning step to\nremove the redundant Gaussians by reusing gradients computed during\nbackpropagation; and (2) a dynamic downsampling technique that directly reuses\nthe keyframe identification and alpha computing steps to eliminate redundant\npixels. On the hardware side, we propose (1) a subtile-level streaming strategy\nand a pixel-level pairwise scheduling strategy that mitigates workload\nimbalance via a Workload Scheduling Unit (WSU) guided by previous iteration\ninformation; (2) a Rendering and Backpropagation (R&B) Buffer that accelerates\nthe rendering backpropagation by reusing intermediate data computed during\nrendering; and (3) a Gradient Merging Unit (GMU) to reduce intensive memory\naccesses caused by atomic operations while enabling pipelined aggregation.\nIntegrated into an edge GPU, RTGS achieves real-time performance (>= 30 FPS) on\nfour datasets and three algorithms, with up to 82.5x energy efficiency over the\nbaseline and negligible quality loss. Code is available at\nhttps://github.com/UMN-ZhaoLab/RTGS.", "AI": {"tldr": "RTGS\u662f\u4e00\u4e2a\u7b97\u6cd5-\u786c\u4ef6\u534f\u540c\u8bbe\u8ba1\u6846\u67b6\uff0c\u901a\u8fc7\u51cf\u5c113D\u9ad8\u65af\u6e85\u5c04SLAM\u6d41\u6c34\u7ebf\u4e2d\u7684\u5197\u4f59\uff0c\u5728\u8fb9\u7f18\u8bbe\u5907\u4e0a\u5b9e\u73b0\u5b9e\u65f63DGS-SLAM\u6027\u80fd\u3002", "motivation": "\u73b0\u6709\u76843DGS-SLAM\u7cfb\u7edf\u867d\u7136\u5177\u6709\u6700\u5148\u8fdb\u7684\u6e32\u67d3\u6548\u7387\u548c\u7cbe\u5ea6\uff0c\u4f46\u7531\u4e8e\u901f\u5ea6\u4e0d\u8db3\u5c1a\u672a\u5728\u8d44\u6e90\u53d7\u9650\u7684\u8fb9\u7f18\u8bbe\u5907\u4e0a\u91c7\u7528\uff0c\u9700\u8981\u89e3\u51b3\u5197\u4f59\u95ee\u9898\u4ee5\u5b9e\u73b0\u5b9e\u65f6\u6027\u80fd\u3002", "method": "\u7b97\u6cd5\u5c42\u9762\uff1a\u5f15\u5165\u81ea\u9002\u5e94\u9ad8\u65af\u526a\u679d\u548c\u52a8\u6001\u4e0b\u91c7\u6837\u6280\u672f\uff1b\u786c\u4ef6\u5c42\u9762\uff1a\u63d0\u51fa\u5b50\u74e6\u7247\u7ea7\u6d41\u5f0f\u7b56\u7565\u3001\u6e32\u67d3\u4e0e\u53cd\u5411\u4f20\u64ad\u7f13\u51b2\u533a\u3001\u68af\u5ea6\u5408\u5e76\u5355\u5143\u7b49\u4f18\u5316\u65b9\u6848\u3002", "result": "\u5728\u8fb9\u7f18GPU\u4e0a\u5b9e\u73b0\u5b9e\u65f6\u6027\u80fd\uff08\u226530 FPS\uff09\uff0c\u5728\u56db\u4e2a\u6570\u636e\u96c6\u548c\u4e09\u79cd\u7b97\u6cd5\u4e0a\u9a8c\u8bc1\uff0c\u76f8\u6bd4\u57fa\u7ebf\u5b9e\u73b0\u9ad8\u8fbe82.5\u500d\u7684\u80fd\u6548\u63d0\u5347\uff0c\u4e14\u8d28\u91cf\u635f\u5931\u53ef\u5ffd\u7565\u3002", "conclusion": "RTGS\u901a\u8fc7\u7b97\u6cd5-\u786c\u4ef6\u534f\u540c\u8bbe\u8ba1\u6210\u529f\u89e3\u51b3\u4e863DGS-SLAM\u5728\u8fb9\u7f18\u8bbe\u5907\u4e0a\u7684\u5b9e\u65f6\u6027\u80fd\u74f6\u9888\uff0c\u4e3a\u8d44\u6e90\u53d7\u9650\u73af\u5883\u4e0b\u76843D\u91cd\u5efa\u5e94\u7528\u63d0\u4f9b\u4e86\u53ef\u884c\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2510.06404", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.06404", "abs": "https://arxiv.org/abs/2510.06404", "authors": ["Raaghav Ravishankar", "Sandeep Kulkarni", "Nitin H Vaidya"], "title": "MuFASA -- Asynchronous Checkpoint for Weakly Consistent Fully Replicated Databases", "comment": null, "summary": "We focus on the problem of checkpointing in fully replicated weakly\nconsistent distributed databases, which we refer to as Distributed Transaction\nConsistent Snapshot (DTCS). A typical example of such a system is a main-memory\ndatabase that provides strong eventual consistency. This problem is important\nand challenging for several reasons: (1) eventual consistency often creates\nanomalies that the users do not anticipate. Hence, frequent checkpoints to\nascertain desired invariants is highly beneficial in their use, and (2)\ntraditional checkpoints lead to significant overhead and/or inconsistencies. By\nshowing that the traditional checkpoint leads to inconsistencies or excessive\noverhead, we define the notion of size-minimal checkpointing for fully\nreplicated databases. We present an algorithm for checkpointing with minimal\ncheckpointing overhead (only O(n) new messages and addition of a single counter\nfor existing messages). It also provides a significant benefit over existing\ncheckpointing algorithms for distributed systems and main-memory databases.\n  A key benefit of DTCS is that it summarizes the computation by a sequence of\nsnapshots that are strongly consistent even though the underlying computation\nis weakly consistent. In essence, when anomalies arise in an eventually\nconsistent system, DTCS enables one to concentrate solely on the snapshots\nsurrounding the time point of the anomaly.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u7528\u4e8e\u5b8c\u5168\u590d\u5236\u5f31\u4e00\u81f4\u6027\u5206\u5e03\u5f0f\u6570\u636e\u5e93\u7684\u6700\u5c0f\u5316\u68c0\u67e5\u70b9\u7b97\u6cd5DTCS\uff0c\u901a\u8fc7O(n)\u6d88\u606f\u5f00\u9500\u548c\u5355\u4e2a\u8ba1\u6570\u5668\u5b9e\u73b0\u5f3a\u4e00\u81f4\u6027\u5feb\u7167\uff0c\u89e3\u51b3\u4e86\u4f20\u7edf\u68c0\u67e5\u70b9\u7684\u4e0d\u4e00\u81f4\u6027\u548c\u9ad8\u5f00\u9500\u95ee\u9898\u3002", "motivation": "\u5f31\u4e00\u81f4\u6027\u5206\u5e03\u5f0f\u6570\u636e\u5e93\u4e2d\u7684\u6700\u7ec8\u4e00\u81f4\u6027\u4f1a\u5bfc\u81f4\u7528\u6237\u672a\u9884\u671f\u7684\u5f02\u5e38\uff0c\u4f20\u7edf\u68c0\u67e5\u70b9\u65b9\u6cd5\u5b58\u5728\u663e\u8457\u5f00\u9500\u6216\u4e0d\u4e00\u81f4\u95ee\u9898\uff0c\u9700\u8981\u4e00\u79cd\u9ad8\u6548\u4e14\u4e00\u81f4\u7684\u68c0\u67e5\u70b9\u673a\u5236\u6765\u786e\u4fdd\u671f\u671b\u7684\u4e0d\u53d8\u6027\u3002", "method": "\u5b9a\u4e49\u4e86\u5b8c\u5168\u590d\u5236\u6570\u636e\u5e93\u7684\u5927\u5c0f\u6700\u5c0f\u5316\u68c0\u67e5\u70b9\u6982\u5ff5\uff0c\u63d0\u51faDTCS\u7b97\u6cd5\uff0c\u4ec5\u9700O(n)\u65b0\u6d88\u606f\u548c\u73b0\u6709\u6d88\u606f\u6dfb\u52a0\u5355\u4e2a\u8ba1\u6570\u5668\uff0c\u751f\u6210\u5f3a\u4e00\u81f4\u6027\u5feb\u7167\u5e8f\u5217\u3002", "result": "DTCS\u7b97\u6cd5\u5b9e\u73b0\u4e86\u6700\u5c0f\u5316\u68c0\u67e5\u70b9\u5f00\u9500\uff0c\u76f8\u6bd4\u73b0\u6709\u5206\u5e03\u5f0f\u7cfb\u7edf\u548c\u5185\u5b58\u6570\u636e\u5e93\u68c0\u67e5\u70b9\u7b97\u6cd5\u6709\u663e\u8457\u4f18\u52bf\uff0c\u80fd\u591f\u5728\u5f31\u4e00\u81f4\u6027\u8ba1\u7b97\u4e2d\u63d0\u4f9b\u5f3a\u4e00\u81f4\u6027\u5feb\u7167\u3002", "conclusion": "DTCS\u901a\u8fc7\u6700\u5c0f\u5316\u5f00\u9500\u7684\u68c0\u67e5\u70b9\u673a\u5236\uff0c\u5728\u6700\u7ec8\u4e00\u81f4\u6027\u7cfb\u7edf\u4e2d\u63d0\u4f9b\u5f3a\u4e00\u81f4\u6027\u5feb\u7167\uff0c\u4f7f\u5f02\u5e38\u5206\u6790\u80fd\u591f\u96c6\u4e2d\u5728\u5f02\u5e38\u65f6\u95f4\u70b9\u5468\u56f4\u7684\u5feb\u7167\u4e0a\uff0c\u6709\u6548\u89e3\u51b3\u4e86\u5f31\u4e00\u81f4\u6027\u6570\u636e\u5e93\u7684\u68c0\u67e5\u70b9\u6311\u6218\u3002"}}
{"id": "2510.06767", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.06767", "abs": "https://arxiv.org/abs/2510.06767", "authors": ["Bindu G Gowda", "Yogesh Goyal", "Yash Gupta", "Madhav Rao"], "title": "Hardware-Efficient CNNs: Interleaved Approximate FP32 Multipliers for Kernel Computation", "comment": null, "summary": "Single-precision floating point (FP32) data format, defined by the IEEE 754\nstandard, is widely employed in scientific computing, signal processing, and\ndeep learning training, where precision is critical. However, FP32\nmultiplication is computationally expensive and requires complex hardware,\nespecially for precisely handling mantissa multiplication. In practical\napplications like neural network inference, perfect accuracy is not always\nnecessary, minor multiplication errors often have little impact on final\naccuracy. This enables trading precision for gains in area, power, and speed.\nThis work focuses on CNN inference using approximate FP32 multipliers, where\nthe mantissa multiplication is approximated by employing error-variant\napproximate compressors, that significantly reduce hardware cost. Furthermore,\nthis work optimizes CNN performance by employing differently approximated FP32\nmultipliers and studying their impact when interleaved within the kernels\nacross the convolutional layers. The placement and ordering of these\napproximate multipliers within each kernel are carefully optimized using the\nNon-dominated Sorting Genetic Algorithm-II, balancing the trade-off between\naccuracy and hardware efficiency.", "AI": {"tldr": "\u8be5\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u4f7f\u7528\u8fd1\u4f3cFP32\u4e58\u6cd5\u5668\u7684CNN\u63a8\u7406\u65b9\u6cd5\uff0c\u901a\u8fc7\u91c7\u7528\u8bef\u5dee\u53ef\u53d8\u7684\u8fd1\u4f3c\u538b\u7f29\u5668\u6765\u8fd1\u4f3c\u5c3e\u6570\u4e58\u6cd5\uff0c\u663e\u8457\u964d\u4f4e\u786c\u4ef6\u6210\u672c\uff0c\u5e76\u4f7f\u7528NSGA-II\u7b97\u6cd5\u4f18\u5316\u8fd1\u4f3c\u4e58\u6cd5\u5668\u7684\u653e\u7f6e\u548c\u6392\u5e8f\uff0c\u4ee5\u5e73\u8861\u7cbe\u5ea6\u548c\u786c\u4ef6\u6548\u7387\u3002", "motivation": "FP32\u4e58\u6cd5\u5728\u8ba1\u7b97\u4e0a\u6602\u8d35\u4e14\u9700\u8981\u590d\u6742\u786c\u4ef6\uff0c\u4f46\u5728\u795e\u7ecf\u7f51\u7edc\u63a8\u7406\u7b49\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u5b8c\u7f8e\u7cbe\u5ea6\u5e76\u975e\u603b\u662f\u5fc5\u8981\uff0c\u5fae\u5c0f\u7684\u4e58\u6cd5\u8bef\u5dee\u901a\u5e38\u5bf9\u6700\u7ec8\u7cbe\u5ea6\u5f71\u54cd\u4e0d\u5927\uff0c\u8fd9\u4e3a\u5728\u9762\u79ef\u3001\u529f\u8017\u548c\u901f\u5ea6\u65b9\u9762\u6362\u53d6\u589e\u76ca\u63d0\u4f9b\u4e86\u53ef\u80fd\u3002", "method": "\u4f7f\u7528\u8bef\u5dee\u53ef\u53d8\u7684\u8fd1\u4f3c\u538b\u7f29\u5668\u6765\u8fd1\u4f3cFP32\u4e58\u6cd5\u5668\u7684\u5c3e\u6570\u4e58\u6cd5\uff0c\u663e\u8457\u964d\u4f4e\u786c\u4ef6\u6210\u672c\uff1b\u91c7\u7528\u975e\u652f\u914d\u6392\u5e8f\u9057\u4f20\u7b97\u6cd5II\uff08NSGA-II\uff09\u4f18\u5316CNN\u4e2d\u4e0d\u540c\u8fd1\u4f3cFP32\u4e58\u6cd5\u5668\u7684\u653e\u7f6e\u548c\u6392\u5e8f\uff0c\u5e73\u8861\u7cbe\u5ea6\u548c\u786c\u4ef6\u6548\u7387\u7684\u6743\u8861\u3002", "result": "\u901a\u8fc7\u8fd1\u4f3cFP32\u4e58\u6cd5\u5668\u548c\u4f18\u5316\u7b56\u7565\uff0c\u5728CNN\u63a8\u7406\u4e2d\u5b9e\u73b0\u4e86\u786c\u4ef6\u6210\u672c\u7684\u663e\u8457\u964d\u4f4e\uff0c\u540c\u65f6\u4fdd\u6301\u4e86\u53ef\u63a5\u53d7\u7684\u7cbe\u5ea6\u6c34\u5e73\u3002", "conclusion": "\u5728CNN\u63a8\u7406\u4e2d\u91c7\u7528\u8fd1\u4f3cFP32\u4e58\u6cd5\u5668\u5e76\u7ed3\u5408\u4f18\u5316\u7b97\u6cd5\uff0c\u53ef\u4ee5\u6709\u6548\u5e73\u8861\u7cbe\u5ea6\u548c\u786c\u4ef6\u6548\u7387\uff0c\u4e3a\u5b9e\u9645\u5e94\u7528\u63d0\u4f9b\u4e86\u4e00\u79cd\u53ef\u884c\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2510.06675", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.06675", "abs": "https://arxiv.org/abs/2510.06675", "authors": ["Xu Bai", "Muhammed Tawfiqul Islam", "Rajkumar Buyya", "Adel N. Toosi"], "title": "REACH: Reinforcement Learning for Adaptive Microservice Rescheduling in the Cloud-Edge Continuum", "comment": "10 pages, 10 figures", "summary": "Cloud computing, despite its advantages in scalability, may not always fully\nsatisfy the low-latency demands of emerging latency-sensitive pervasive\napplications. The cloud-edge continuum addresses this by integrating the\nresponsiveness of edge resources with cloud scalability. Microservice\nArchitecture (MSA) characterized by modular, loosely coupled services, aligns\neffectively with this continuum. However, the heterogeneous and dynamic\ncomputing resource poses significant challenges to the optimal placement of\nmicroservices. We propose REACH, a novel rescheduling algorithm that\ndynamically adapts microservice placement in real time using reinforcement\nlearning to react to fluctuating resource availability, and performance\nvariations across distributed infrastructures. Extensive experiments on a\nreal-world testbed demonstrate that REACH reduces average end-to-end latency by\n7.9%, 10%, and 8% across three benchmark MSA applications, while effectively\nmitigating latency fluctuations and spikes.", "AI": {"tldr": "REACH\u662f\u4e00\u79cd\u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u5fae\u670d\u52a1\u91cd\u8c03\u5ea6\u7b97\u6cd5\uff0c\u7528\u4e8e\u5728\u4e91\u8fb9\u8fde\u7eed\u4f53\u4e2d\u52a8\u6001\u4f18\u5316\u5fae\u670d\u52a1\u90e8\u7f72\uff0c\u4ee5\u5e94\u5bf9\u8d44\u6e90\u6ce2\u52a8\u548c\u6027\u80fd\u53d8\u5316\uff0c\u663e\u8457\u964d\u4f4e\u7aef\u5230\u7aef\u5ef6\u8fdf\u3002", "motivation": "\u4e91\u8ba1\u7b97\u867d\u7136\u5177\u6709\u53ef\u6269\u5c55\u6027\u4f18\u52bf\uff0c\u4f46\u65e0\u6cd5\u5b8c\u5168\u6ee1\u8db3\u65b0\u5174\u5ef6\u8fdf\u654f\u611f\u5e94\u7528\u7684\u5b9e\u65f6\u9700\u6c42\u3002\u4e91\u8fb9\u8fde\u7eed\u4f53\u7ed3\u5408\u4e86\u8fb9\u7f18\u8d44\u6e90\u7684\u54cd\u5e94\u6027\u548c\u4e91\u7684\u53ef\u6269\u5c55\u6027\uff0c\u4f46\u5f02\u6784\u52a8\u6001\u7684\u8ba1\u7b97\u8d44\u6e90\u7ed9\u5fae\u670d\u52a1\u4f18\u5316\u90e8\u7f72\u5e26\u6765\u4e86\u6311\u6218\u3002", "method": "\u63d0\u51faREACH\u7b97\u6cd5\uff0c\u4f7f\u7528\u5f3a\u5316\u5b66\u4e60\u5b9e\u65f6\u52a8\u6001\u8c03\u6574\u5fae\u670d\u52a1\u90e8\u7f72\u4f4d\u7f6e\uff0c\u4ee5\u54cd\u5e94\u5206\u5e03\u5f0f\u57fa\u7840\u8bbe\u65bd\u4e2d\u6ce2\u52a8\u7684\u8d44\u6e90\u53ef\u7528\u6027\u548c\u6027\u80fd\u53d8\u5316\u3002", "result": "\u5728\u771f\u5b9e\u6d4b\u8bd5\u5e73\u53f0\u4e0a\u7684\u5e7f\u6cdb\u5b9e\u9a8c\u8868\u660e\uff0cREACH\u5728\u4e09\u4e2a\u57fa\u51c6MSA\u5e94\u7528\u4e2d\u5206\u522b\u5c06\u5e73\u5747\u7aef\u5230\u7aef\u5ef6\u8fdf\u964d\u4f4e\u4e867.9%\u300110%\u548c8%\uff0c\u540c\u65f6\u6709\u6548\u7f13\u89e3\u4e86\u5ef6\u8fdf\u6ce2\u52a8\u548c\u5cf0\u503c\u3002", "conclusion": "REACH\u7b97\u6cd5\u901a\u8fc7\u5f3a\u5316\u5b66\u4e60\u9a71\u52a8\u7684\u52a8\u6001\u91cd\u8c03\u5ea6\uff0c\u5728\u4e91\u8fb9\u8fde\u7eed\u4f53\u4e2d\u5b9e\u73b0\u4e86\u5fae\u670d\u52a1\u7684\u4f18\u5316\u90e8\u7f72\uff0c\u663e\u8457\u63d0\u5347\u4e86\u5ef6\u8fdf\u654f\u611f\u5e94\u7528\u7684\u6027\u80fd\u8868\u73b0\u3002"}}
{"id": "2510.07304", "categories": ["cs.AR", "cs.AI", "cs.CR", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.07304", "abs": "https://arxiv.org/abs/2510.07304", "authors": ["Donghwan Kim", "Xin Gu", "Jinho Baek", "Timothy Lo", "Younghoon Min", "Kwangsik Shin", "Jongryool Kim", "Jongse Park", "Kiwan Maeng"], "title": "Cocoon: A System Architecture for Differentially Private Training with Correlated Noises", "comment": null, "summary": "Machine learning (ML) models memorize and leak training data, causing serious\nprivacy issues to data owners. Training algorithms with differential privacy\n(DP), such as DP-SGD, have been gaining attention as a solution. However,\nDP-SGD adds a noise at each training iteration, which degrades the accuracy of\nthe trained model. To improve accuracy, a new family of approaches adds\ncarefully designed correlated noises, so that noises cancel out each other\nacross iterations. We performed an extensive characterization study of these\nnew mechanisms, for the first time to the best of our knowledge, and show they\nincur non-negligible overheads when the model is large or uses large embedding\ntables. Motivated by the analysis, we propose Cocoon, a hardware-software\nco-designed framework for efficient training with correlated noises. Cocoon\naccelerates models with embedding tables through pre-computing and storing\ncorrelated noises in a coalesced format (Cocoon-Emb), and supports large models\nthrough a custom near-memory processing device (Cocoon-NMP). On a real system\nwith an FPGA-based NMP device prototype, Cocoon improves the performance by\n2.33-10.82x(Cocoon-Emb) and 1.55-3.06x (Cocoon-NMP).", "AI": {"tldr": "Cocoon\u662f\u4e00\u4e2a\u8f6f\u786c\u4ef6\u534f\u540c\u8bbe\u8ba1\u7684\u6846\u67b6\uff0c\u901a\u8fc7\u9884\u8ba1\u7b97\u548c\u5b58\u50a8\u76f8\u5173\u566a\u58f0\u4ee5\u53ca\u5b9a\u5236\u8fd1\u5185\u5b58\u5904\u7406\u8bbe\u5907\uff0c\u663e\u8457\u63d0\u5347\u4e86\u4f7f\u7528\u76f8\u5173\u566a\u58f0\u7684\u5dee\u5206\u9690\u79c1\u8bad\u7ec3\u6548\u7387\u3002", "motivation": "\u673a\u5668\u5b66\u4e60\u6a21\u578b\u4f1a\u8bb0\u5fc6\u548c\u6cc4\u9732\u8bad\u7ec3\u6570\u636e\uff0c\u5e26\u6765\u4e25\u91cd\u7684\u9690\u79c1\u95ee\u9898\u3002\u867d\u7136DP-SGD\u7b49\u5dee\u5206\u9690\u79c1\u8bad\u7ec3\u7b97\u6cd5\u662f\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u5b83\u4eec\u5728\u6bcf\u4e2a\u8bad\u7ec3\u8fed\u4ee3\u4e2d\u6dfb\u52a0\u566a\u58f0\u4f1a\u964d\u4f4e\u6a21\u578b\u51c6\u786e\u6027\u3002\u65b0\u7684\u76f8\u5173\u566a\u58f0\u65b9\u6cd5\u867d\u7136\u80fd\u63d0\u9ad8\u51c6\u786e\u6027\uff0c\u4f46\u5728\u6a21\u578b\u8f83\u5927\u6216\u4f7f\u7528\u5927\u5d4c\u5165\u8868\u65f6\u4f1a\u4ea7\u751f\u663e\u8457\u5f00\u9500\u3002", "method": "\u63d0\u51faCocoon\u6846\u67b6\uff1a1) \u901a\u8fc7\u9884\u8ba1\u7b97\u5e76\u4ee5\u5408\u5e76\u683c\u5f0f\u5b58\u50a8\u76f8\u5173\u566a\u58f0\u6765\u52a0\u901f\u5e26\u6709\u5d4c\u5165\u8868\u7684\u6a21\u578b(Cocoon-Emb)\uff1b2) \u901a\u8fc7\u5b9a\u5236\u8fd1\u5185\u5b58\u5904\u7406\u8bbe\u5907\u652f\u6301\u5927\u578b\u6a21\u578b(Cocoon-NMP)\u3002", "result": "\u5728\u57fa\u4e8eFPGA\u7684NMP\u8bbe\u5907\u539f\u578b\u4e0a\uff0cCocoon-Emb\u5c06\u6027\u80fd\u63d0\u5347\u4e862.33-10.82\u500d\uff0cCocoon-NMP\u63d0\u5347\u4e861.55-3.06\u500d\u3002", "conclusion": "Cocoon\u901a\u8fc7\u8f6f\u786c\u4ef6\u534f\u540c\u8bbe\u8ba1\u6709\u6548\u89e3\u51b3\u4e86\u76f8\u5173\u566a\u58f0\u65b9\u6cd5\u5728\u5927\u578b\u6a21\u578b\u548c\u5927\u5d4c\u5165\u8868\u573a\u666f\u4e0b\u7684\u6027\u80fd\u5f00\u9500\u95ee\u9898\uff0c\u663e\u8457\u63d0\u5347\u4e86\u5dee\u5206\u9690\u79c1\u8bad\u7ec3\u7684\u6548\u7387\u3002"}}
{"id": "2510.06882", "categories": ["cs.DC", "cs.AI", "cs.LG", "cs.PF"], "pdf": "https://arxiv.org/pdf/2510.06882", "abs": "https://arxiv.org/abs/2510.06882", "authors": ["Boris Sedlak", "Philipp Raith", "Andrea Morichetta", "V\u00edctor Casamayor Pujol", "Schahram Dustdar"], "title": "Multi-Dimensional Autoscaling of Stream Processing Services on Edge Devices", "comment": null, "summary": "Edge devices have limited resources, which inevitably leads to situations\nwhere stream processing services cannot satisfy their needs. While existing\nautoscaling mechanisms focus entirely on resource scaling, Edge devices require\nalternative ways to sustain the Service Level Objectives (SLOs) of competing\nservices. To address these issues, we introduce a Multi-dimensional Autoscaling\nPlatform (MUDAP) that supports fine-grained vertical scaling across both\nservice- and resource-level dimensions. MUDAP supports service-specific scaling\ntailored to available parameters, e.g., scale data quality or model size for a\nparticular service. To optimize the execution across services, we present a\nscaling agent based on Regression Analysis of Structural Knowledge (RASK). The\nRASK agent efficiently explores the solution space and learns a continuous\nregression model of the processing environment for inferring optimal scaling\nactions. We compared our approach with two autoscalers, the Kubernetes VPA and\na reinforcement learning agent, for scaling up to 9 services on a single Edge\ndevice. Our results showed that RASK can infer an accurate regression model in\nmerely 20 iterations (i.e., observe 200s of processing). By increasingly adding\nelasticity dimensions, RASK sustained the highest request load with 28% less\nSLO violations, compared to baselines.", "AI": {"tldr": "\u63d0\u51fa\u4e86MUDAP\u591a\u7ef4\u5ea6\u81ea\u52a8\u4f38\u7f29\u5e73\u53f0\uff0c\u652f\u6301\u670d\u52a1\u7ea7\u548c\u8d44\u6e90\u7ea7\u7684\u7ec6\u7c92\u5ea6\u5782\u76f4\u4f38\u7f29\uff0c\u901a\u8fc7RASK\u667a\u80fd\u4ee3\u7406\u5b66\u4e60\u73af\u5883\u56de\u5f52\u6a21\u578b\u6765\u4f18\u5316\u4f38\u7f29\u51b3\u7b56\uff0c\u5728\u8fb9\u7f18\u8bbe\u5907\u4e0a\u6bd4\u73b0\u6709\u65b9\u6cd5\u51cf\u5c1128%\u7684SLO\u8fdd\u89c4\u3002", "motivation": "\u8fb9\u7f18\u8bbe\u5907\u8d44\u6e90\u6709\u9650\uff0c\u73b0\u6709\u81ea\u52a8\u4f38\u7f29\u673a\u5236\u4ec5\u5173\u6ce8\u8d44\u6e90\u4f38\u7f29\uff0c\u65e0\u6cd5\u6ee1\u8db3\u7ade\u4e89\u670d\u52a1\u7684SLO\u8981\u6c42\uff0c\u9700\u8981\u652f\u6301\u591a\u7ef4\u5ea6\u4f38\u7f29\u6765\u7ef4\u6301\u670d\u52a1\u8d28\u91cf\u3002", "method": "\u5f00\u53d1MUDAP\u5e73\u53f0\u652f\u6301\u670d\u52a1\u7ea7\u548c\u8d44\u6e90\u7ea7\u5782\u76f4\u4f38\u7f29\uff0c\u4f7f\u7528\u57fa\u4e8e\u7ed3\u6784\u77e5\u8bc6\u56de\u5f52\u5206\u6790\u7684RASK\u4ee3\u7406\u63a2\u7d22\u89e3\u7a7a\u95f4\u5e76\u5b66\u4e60\u8fde\u7eed\u56de\u5f52\u6a21\u578b\uff0c\u63a8\u65ad\u6700\u4f18\u4f38\u7f29\u52a8\u4f5c\u3002", "result": "RASK\u4ec5\u970020\u6b21\u8fed\u4ee3\uff08\u7ea6200\u79d2\u5904\u7406\u65f6\u95f4\uff09\u5373\u53ef\u5b66\u4e60\u51c6\u786e\u56de\u5f52\u6a21\u578b\uff0c\u76f8\u6bd4Kubernetes VPA\u548c\u5f3a\u5316\u5b66\u4e60\u4ee3\u7406\uff0c\u57289\u4e2a\u670d\u52a1\u573a\u666f\u4e0b\u51cf\u5c1128%\u7684SLO\u8fdd\u89c4\uff0c\u652f\u6301\u66f4\u9ad8\u8bf7\u6c42\u8d1f\u8f7d\u3002", "conclusion": "\u591a\u7ef4\u5ea6\u81ea\u52a8\u4f38\u7f29\u65b9\u6cd5\u80fd\u6709\u6548\u63d0\u5347\u8fb9\u7f18\u8bbe\u5907\u4e0a\u6d41\u5904\u7406\u670d\u52a1\u7684\u6027\u80fd\uff0cRASK\u4ee3\u7406\u901a\u8fc7\u9ad8\u6548\u5b66\u4e60\u73af\u5883\u6a21\u578b\u5b9e\u73b0\u4e86\u66f4\u597d\u7684SLO\u4fdd\u969c\u3002"}}
{"id": "2510.06998", "categories": ["cs.DC", "cs.AR"], "pdf": "https://arxiv.org/pdf/2510.06998", "abs": "https://arxiv.org/abs/2510.06998", "authors": ["Martin Wilhelm", "Franz Freitag", "Max Tzschoppe", "Thilo Pionteck"], "title": "Evaluating Rapid Makespan Predictions for Heterogeneous Systems with Programmable Logic", "comment": "To be published on NorCAS 2025", "summary": "Heterogeneous computing systems, which combine general-purpose processors\nwith specialized accelerators, are increasingly important for optimizing the\nperformance of modern applications. A central challenge is to decide which\nparts of an application should be executed on which accelerator or, more\ngenerally, how to map the tasks of an application to available devices.\nPredicting the impact of a change in a task mapping on the overall makespan is\nnon-trivial. While there are very capable simulators, these generally require a\nfull implementation of the tasks in question, which is particularly\ntime-intensive for programmable logic. A promising alternative is to use a\npurely analytical function, which allows for very fast predictions, but\nabstracts significantly from reality. Bridging the gap between theory and\npractice poses a significant challenge to algorithm developers. This paper aims\nto aid in the development of rapid makespan prediction algorithms by providing\na highly flexible evaluation framework for heterogeneous systems consisting of\nCPUs, GPUs and FPGAs, which is capable of collecting real-world makespan\nresults based on abstract task graph descriptions. We analyze to what extent\nactual makespans can be predicted by existing analytical approaches.\nFurthermore, we present common challenges that arise from high-level\ncharacteristics such as data transfer overhead and device congestion in\nheterogeneous systems.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u4e2a\u7528\u4e8e\u5f02\u6784\u8ba1\u7b97\u7cfb\u7edf\u7684\u7075\u6d3b\u8bc4\u4f30\u6846\u67b6\uff0c\u80fd\u591f\u57fa\u4e8e\u62bd\u8c61\u4efb\u52a1\u56fe\u63cf\u8ff0\u6536\u96c6\u771f\u5b9e\u4e16\u754c\u7684makespan\u7ed3\u679c\uff0c\u5206\u6790\u73b0\u6709\u5206\u6790\u65b9\u6cd5\u9884\u6d4b\u5b9e\u9645makespan\u7684\u80fd\u529b\uff0c\u5e76\u8bc6\u522b\u5f02\u6784\u7cfb\u7edf\u4e2d\u7684\u5e38\u89c1\u6311\u6218\u3002", "motivation": "\u5f02\u6784\u8ba1\u7b97\u7cfb\u7edf\u7ed3\u5408\u901a\u7528\u5904\u7406\u5668\u548c\u4e13\u7528\u52a0\u901f\u5668\u5bf9\u73b0\u4ee3\u5e94\u7528\u6027\u80fd\u4f18\u5316\u65e5\u76ca\u91cd\u8981\uff0c\u4f46\u9884\u6d4b\u4efb\u52a1\u6620\u5c04\u53d8\u5316\u5bf9\u6574\u4f53makespan\u7684\u5f71\u54cd\u5177\u6709\u6311\u6218\u6027\u3002\u73b0\u6709\u6a21\u62df\u5668\u9700\u8981\u5b8c\u6574\u4efb\u52a1\u5b9e\u73b0\uff0c\u800c\u5206\u6790\u65b9\u6cd5\u867d\u7136\u5feb\u901f\u4f46\u8fc7\u4e8e\u62bd\u8c61\u3002", "method": "\u5f00\u53d1\u4e86\u4e00\u4e2a\u9ad8\u5ea6\u7075\u6d3b\u7684\u8bc4\u4f30\u6846\u67b6\uff0c\u652f\u6301CPU\u3001GPU\u548cFPGA\u5f02\u6784\u7cfb\u7edf\uff0c\u80fd\u591f\u57fa\u4e8e\u62bd\u8c61\u4efb\u52a1\u56fe\u63cf\u8ff0\u6536\u96c6\u771f\u5b9emakespan\u7ed3\u679c\uff0c\u5e76\u5206\u6790\u73b0\u6709\u5206\u6790\u65b9\u6cd5\u9884\u6d4b\u80fd\u529b\u3002", "result": "\u5206\u6790\u4e86\u73b0\u6709\u5206\u6790\u65b9\u6cd5\u9884\u6d4b\u5b9e\u9645makespan\u7684\u7a0b\u5ea6\uff0c\u8bc6\u522b\u4e86\u6570\u636e\u4f20\u8f93\u5f00\u9500\u548c\u8bbe\u5907\u62e5\u585e\u7b49\u5f02\u6784\u7cfb\u7edf\u9ad8\u5c42\u7279\u6027\u5e26\u6765\u7684\u5e38\u89c1\u6311\u6218\u3002", "conclusion": "\u8be5\u6846\u67b6\u6709\u52a9\u4e8e\u5f00\u53d1\u5feb\u901fmakespan\u9884\u6d4b\u7b97\u6cd5\uff0c\u5f25\u5408\u7406\u8bba\u4e0e\u5b9e\u8df5\u4e4b\u95f4\u7684\u5dee\u8ddd\uff0c\u4e3a\u5f02\u6784\u7cfb\u7edf\u7b97\u6cd5\u5f00\u53d1\u63d0\u4f9b\u652f\u6301\u3002"}}
{"id": "2510.06902", "categories": ["cs.DC", "cs.PF"], "pdf": "https://arxiv.org/pdf/2510.06902", "abs": "https://arxiv.org/abs/2510.06902", "authors": ["Ayesha Afzal", "Anna Kahler", "Georg Hager", "Gerhard Wellein"], "title": "GROMACS Unplugged: How Power Capping and Frequency Shapes Performance on GPUs", "comment": "12 pages", "summary": "Molecular dynamics simulations are essential tools in computational\nbiophysics, but their performance depend heavily on hardware choices and\nconfiguration. In this work, we presents a comprehensive performance analysis\nof four NVIDIA GPU accelerators -- A40, A100, L4, and L40 -- using six\nrepresentative GROMACS biomolecular workloads alongside two synthetic\nbenchmarks: Pi Solver (compute bound) and STREAM Triad (memory bound). We\ninvestigate how performance scales with GPU graphics clock frequency and how\nworkloads respond to power capping. The two synthetic benchmarks define the\nextremes of frequency scaling: Pi Solver shows ideal compute scalability, while\nSTREAM Triad reveals memory bandwidth limits -- framing GROMACS's performance\nin context. Our results reveal distinct frequency scaling behaviors: Smaller\nGROMACS systems exhibit strong frequency sensitivity, while larger systems\nsaturate quickly, becoming increasingly memory bound. Under power capping,\nperformance remains stable until architecture- and workload-specific thresholds\nare reached, with high-end GPUs like the A100 maintaining near-maximum\nperformance even under reduced power budgets. Our findings provide practical\nguidance for selecting GPU hardware and optimizing GROMACS performance for\nlarge-scale MD workflows under power constraints.", "AI": {"tldr": "\u5bf9\u56db\u79cdNVIDIA GPU\u52a0\u901f\u5668\uff08A40\u3001A100\u3001L4\u3001L40\uff09\u5728GROMACS\u5206\u5b50\u52a8\u529b\u5b66\u6a21\u62df\u4e2d\u7684\u6027\u80fd\u5206\u6790\uff0c\u5305\u62ec\u9891\u7387\u7f29\u653e\u548c\u529f\u8017\u9650\u5236\u7684\u5f71\u54cd\u7814\u7a76\u3002", "motivation": "\u5206\u5b50\u52a8\u529b\u5b66\u6a21\u62df\u7684\u6027\u80fd\u9ad8\u5ea6\u4f9d\u8d56\u4e8e\u786c\u4ef6\u9009\u62e9\u548c\u914d\u7f6e\uff0c\u9700\u8981\u4e3a\u5927\u89c4\u6a21MD\u5de5\u4f5c\u6d41\u7a0b\u5728\u529f\u8017\u9650\u5236\u4e0b\u63d0\u4f9bGPU\u786c\u4ef6\u9009\u62e9\u548cGROMACS\u6027\u80fd\u4f18\u5316\u7684\u5b9e\u7528\u6307\u5bfc\u3002", "method": "\u4f7f\u7528\u516d\u4e2a\u4ee3\u8868\u6027GROMACS\u751f\u7269\u5206\u5b50\u5de5\u4f5c\u8d1f\u8f7d\u548c\u4e24\u4e2a\u5408\u6210\u57fa\u51c6\u6d4b\u8bd5\uff08\u8ba1\u7b97\u53d7\u9650\u7684Pi Solver\u548c\u5185\u5b58\u53d7\u9650\u7684STREAM Triad\uff09\uff0c\u7814\u7a76GPU\u56fe\u5f62\u65f6\u949f\u9891\u7387\u7f29\u653e\u548c\u529f\u8017\u9650\u5236\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u3002", "result": "\u8f83\u5c0f\u7684GROMACS\u7cfb\u7edf\u8868\u73b0\u51fa\u5f3a\u70c8\u7684\u9891\u7387\u654f\u611f\u6027\uff0c\u800c\u8f83\u5927\u7684\u7cfb\u7edf\u5feb\u901f\u9971\u548c\uff0c\u53d8\u5f97\u8d8a\u6765\u8d8a\u53d7\u5185\u5b58\u9650\u5236\u3002\u5728\u529f\u8017\u9650\u5236\u4e0b\uff0c\u6027\u80fd\u4fdd\u6301\u7a33\u5b9a\u76f4\u5230\u8fbe\u5230\u67b6\u6784\u548c\u5de5\u4f5c\u8d1f\u8f7d\u7279\u5b9a\u7684\u9608\u503c\uff0c\u9ad8\u7aefGPU\u5982A100\u5373\u4f7f\u5728\u964d\u4f4e\u7684\u529f\u8017\u9884\u7b97\u4e0b\u4e5f\u80fd\u4fdd\u6301\u63a5\u8fd1\u6700\u5927\u6027\u80fd\u3002", "conclusion": "\u7814\u7a76\u7ed3\u679c\u4e3a\u5728\u529f\u8017\u9650\u5236\u4e0b\u9009\u62e9GPU\u786c\u4ef6\u548c\u4f18\u5316GROMACS\u6027\u80fd\u63d0\u4f9b\u4e86\u5b9e\u7528\u6307\u5bfc\uff0c\u63ed\u793a\u4e86\u4e0d\u540c\u89c4\u6a21\u7cfb\u7edf\u5728\u9891\u7387\u7f29\u653e\u548c\u529f\u8017\u7ba1\u7406\u65b9\u9762\u7684\u4e0d\u540c\u884c\u4e3a\u7279\u5f81\u3002"}}
