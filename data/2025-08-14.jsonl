{"id": "2508.09505", "categories": ["cs.DC", "cs.AI"], "pdf": "https://arxiv.org/pdf/2508.09505", "abs": "https://arxiv.org/abs/2508.09505", "authors": ["Zhanghan Wang", "Ding Ding", "Hang Zhu", "Haibin Lin", "Aurojit Panda"], "title": "Verify Distributed Deep Learning Model Implementation Refinement with Iterative Relation Inference", "comment": null, "summary": "Distributed machine learning training and inference is common today because\ntoday's large models require more memory and compute than can be provided by a\nsingle GPU. Distributed models are generally produced by programmers who take a\nsequential model specification and apply several distribution strategies to\ndistribute state and computation across GPUs. Unfortunately, bugs can be\nintroduced in the process, and a distributed model implementation's outputs\nmight differ from the sequential model's outputs. In this paper, we describe an\napproach to statically identify such bugs by checking model refinement, that\nis, can the sequential model's outputs be reconstructed from the distributed\nmodel's outputs? Our approach, implemented in GraphGuard, uses iterative\nrewriting to prove model refinement. Our approach can scale to today's large\nmodels and deployments: we evaluate it using GPT and Llama-3. Further, it\nprovides actionable output that aids in bug localization."}
{"id": "2508.09591", "categories": ["cs.DC", "cs.LG"], "pdf": "https://arxiv.org/pdf/2508.09591", "abs": "https://arxiv.org/abs/2508.09591", "authors": ["Wenxiang Lin", "Xinglin Pan", "Lin Zhang", "Shaohuai Shi", "Xuan Wang", "Xiaowen Chu"], "title": "HierMoE: Accelerating MoE Training with Hierarchical Token Deduplication and Expert Swap", "comment": null, "summary": "The sparsely activated mixture-of-experts (MoE) transformer has become a\ncommon architecture for large language models (LLMs) due to its sparsity, which\nrequires fewer computational demands while easily scaling the model size. In\nMoE models, each MoE layer requires to dynamically choose tokens to activate\nparticular experts for computation while the activated experts may not be\nlocated in the same device or GPU as the token. However, this leads to\nsubstantial communication and load imbalances across all GPUs, which obstructs\nthe scalability of distributed systems within a GPU cluster. To this end, we\nintroduce HierMoE to accelerate the training of MoE models by two\ntopology-aware techniques: 1) token deduplication to reduce the communication\ntraffic, and 2) expert swap to balance the workloads among all GPUs. To enable\nthe above two proposed approaches to be more general, we build theoretical\nmodels aimed at achieving the best token duplication and expert swap strategy\nunder different model configurations and hardware environments. We implement\nour prototype HierMoE system atop Megatron-LM and conduct experiments on a\n32-GPU cluster with DeepSeek-V3 and Qwen3-30B-A3B models. Experimental results\nshow that our HierMoE achieves $1.55\\times$ to $3.32\\times$ faster\ncommunication and delivers $1.18\\times$ to $1.27\\times$ faster end-to-end\ntraining compared to state-of-the-art MoE training systems, Tutel-2DH,\nSmartMoE, and Megatron-LM."}
{"id": "2508.09663", "categories": ["cs.DC", "cs.NI"], "pdf": "https://arxiv.org/pdf/2508.09663", "abs": "https://arxiv.org/abs/2508.09663", "authors": ["Philipp A. Friese", "Ahmed Eleliemy", "Utz-Uwe Haus", "Martin Schulz"], "title": "Closing the HPC-Cloud Convergence Gap: Multi-Tenant Slingshot RDMA for Kubernetes", "comment": "10 pages, 12 figures, 1 table, 3 listings, to be published in IEEE\n  Cluster 2025", "summary": "Converged HPC-Cloud computing is an emerging computing paradigm that aims to\nsupport increasingly complex and multi-tenant scientific workflows. These\nsystems require reconciliation of the isolation requirements of native cloud\nworkloads and the performance demands of HPC applications. In this context,\nnetworking hardware is a critical boundary component: it is the conduit for\nhigh-throughput, low-latency communication and enables isolation across\ntenants. HPE Slingshot is a high-speed network interconnect that provides up to\n200 Gbps of throughput per port and targets high-performance computing (HPC)\nsystems. The Slingshot host software, including hardware drivers and network\nmiddleware libraries, is designed to meet HPC deployments, which predominantly\nuse single-tenant access modes. Hence, the Slingshot stack is not suited for\nsecure use in multi-tenant deployments, such as converged HPC-Cloud\ndeployments. In this paper, we design and implement an extension to the\nSlingshot stack targeting converged deployments on the basis of Kubernetes. Our\nintegration provides secure, container-granular, and multi-tenant access to\nSlingshot RDMA networking capabilities at minimal overhead."}
{"id": "2508.09856", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2508.09856", "abs": "https://arxiv.org/abs/2508.09856", "authors": ["Mathieu Boespflug", "Arnaud Spiwack"], "title": "Invertible Syntax without the Tuples (Functional Pearl)", "comment": null, "summary": "In the seminal paper Functional unparsing, Olivier Danvy used continuation\npassing to reanalyse printf-like format strings as combinators. In the\nintervening decades, the conversation shifted towards a concurrent line of work\n-- applicative, monadic or arrow-based combinator libraries -- in an effort to\nfind combinators for invertible syntax descriptions that simultaneously\ndetermine a parser as well as a printer, and with more expressive power, able\nto handle inductive structures such as lists and trees. Along the way,\ncontinuation passing got lost. This paper argues that Danvy's insight remains\nas relevant to the general setting as it was to the restricted setting of his\noriginal paper. Like him, we present three solutions that exploit\ncontinuation-passing style as an alternative to both dependent types and\nmonoidal aggregation via nested pairs, in our case to parse and print\nstructured data with increasing expressive power."}
{"id": "2508.09570", "categories": ["cs.AR", "B.3.0; B.6.0"], "pdf": "https://arxiv.org/pdf/2508.09570", "abs": "https://arxiv.org/abs/2508.09570", "authors": ["Xiangfeng Liu", "Zhe Jiang", "Anzhen Zhu", "Xiaomeng Han", "Mingsong Lyu", "Qingxu Deng", "Nan Guan"], "title": "Re-thinking Memory-Bound Limitations in CGRAs", "comment": "25 pages, 18 figures, CODES+ISSS 2025", "summary": "Coarse-Grained Reconfigurable Arrays (CGRAs) are specialized accelerators\ncommonly employed to boost performance in workloads with iterative structures.\nExisting research typically focuses on compiler or architecture optimizations\naimed at improving CGRA performance, energy efficiency, flexibility, and area\nutilization, under the idealistic assumption that kernels can access all data\nfrom Scratchpad Memory (SPM). However, certain complex workloads-particularly\nin fields like graph analytics, irregular database operations, and specialized\nforms of high-performance computing (e.g., unstructured mesh\nsimulations)-exhibit irregular memory access patterns that hinder CGRA\nutilization, sometimes dropping below 1.5%, making the CGRA memory-bound. To\naddress this challenge, we conduct a thorough analysis of the underlying causes\nof performance degradation, then propose a redesigned memory subsystem and\nrefine the memory model. With both microarchitectural and theoretical\noptimization, our solution can effectively manage irregular memory accesses\nthrough CGRA-specific runahead execution mechanism and cache reconfiguration\ntechniques. Our results demonstrate that we can achieve performance comparable\nto the original SPM-only system while requiring only 1.27% of the storage size.\nThe runahead execution mechanism achieves an average 3.04x speedup (up to\n6.91x), with cache reconfiguration technique providing an additional 6.02%\nimprovement, significantly enhancing CGRA performance for irregular memory\naccess patterns."}
