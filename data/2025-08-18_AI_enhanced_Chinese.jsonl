{"id": "2508.11035", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2508.11035", "abs": "https://arxiv.org/abs/2508.11035", "authors": ["Hasibul Jamil", "MD S Q Zulkar Nine", "Tevfik Kosar"], "title": "EMLIO: Minimizing I/O Latency and Energy Consumption for Large-Scale AI Training", "comment": "SC25 Sustainable Supercomputing Workshop", "summary": "Large-scale deep learning workloads increasingly suffer from I/O bottlenecks\nas datasets grow beyond local storage capacities and GPU compute outpaces\nnetwork and disk latencies. While recent systems optimize data-loading time,\nthey overlook the energy cost of I/O - a critical factor at large scale. We\nintroduce EMLIO, an Efficient Machine Learning I/O service that jointly\nminimizes end-to-end data-loading latency T and I/O energy consumption E across\nvariable-latency networked storage. EMLIO deploys a lightweight data-serving\ndaemon on storage nodes that serializes and batches raw samples, streams them\nover TCP with out-of-order prefetching, and integrates seamlessly with\nGPU-accelerated (NVIDIA DALI) preprocessing on the client side. In exhaustive\nevaluations over local disk, LAN (0.05 ms & 10 ms RTT), and WAN (30 ms RTT)\nenvironments, EMLIO delivers up to 8.6X faster I/O and 10.9X lower energy use\ncompared to state-of-the-art loaders, while maintaining constant performance\nand energy profiles irrespective of network distance. EMLIO's service-based\narchitecture offers a scalable blueprint for energy-aware I/O in\nnext-generation AI clouds.", "AI": {"tldr": "EMLIO\u662f\u4e00\u79cd\u9ad8\u6548\u7684\u673a\u5668\u5b66\u4e60I/O\u670d\u52a1\uff0c\u65e8\u5728\u51cf\u5c11\u6570\u636e\u52a0\u8f7d\u5ef6\u8fdf\u548cI/O\u80fd\u8017\uff0c\u9002\u7528\u4e8e\u5927\u89c4\u6a21\u6df1\u5ea6\u5b66\u4e60\u4efb\u52a1\u3002", "motivation": "\u968f\u7740\u6570\u636e\u96c6\u89c4\u6a21\u8d85\u8fc7\u672c\u5730\u5b58\u50a8\u5bb9\u91cf\uff0cGPU\u8ba1\u7b97\u901f\u5ea6\u8d85\u8fc7\u7f51\u7edc\u548c\u78c1\u76d8\u5ef6\u8fdf\uff0c\u5927\u89c4\u6a21\u6df1\u5ea6\u5b66\u4e60\u4efb\u52a1\u9762\u4e34I/O\u74f6\u9888\u3002\u73b0\u6709\u7cfb\u7edf\u867d\u4f18\u5316\u4e86\u6570\u636e\u52a0\u8f7d\u65f6\u95f4\uff0c\u4f46\u5ffd\u89c6\u4e86I/O\u7684\u80fd\u8017\u95ee\u9898\u3002", "method": "EMLIO\u5728\u5b58\u50a8\u8282\u70b9\u4e0a\u90e8\u7f72\u8f7b\u91cf\u7ea7\u6570\u636e\u670d\u52a1\u5b88\u62a4\u8fdb\u7a0b\uff0c\u901a\u8fc7\u5e8f\u5217\u5316\u548c\u6279\u91cf\u5904\u7406\u539f\u59cb\u6837\u672c\uff0c\u4f7f\u7528TCP\u6d41\u4f20\u8f93\u5e76\u652f\u6301\u4e71\u5e8f\u9884\u53d6\uff0c\u540c\u65f6\u4e0eGPU\u52a0\u901f\u9884\u5904\u7406\u65e0\u7f1d\u96c6\u6210\u3002", "result": "\u5728\u672c\u5730\u78c1\u76d8\u3001\u5c40\u57df\u7f51\uff080.05 ms\u548c10 ms RTT\uff09\u548c\u5e7f\u57df\u7f51\uff0830 ms RTT\uff09\u73af\u5883\u4e2d\uff0cEMLIO\u6bd4\u73b0\u6709\u52a0\u8f7d\u5668\u5feb8.6\u500d\uff0c\u80fd\u8017\u964d\u4f4e10.9\u500d\uff0c\u4e14\u6027\u80fd\u4e0e\u80fd\u8017\u4e0d\u53d7\u7f51\u7edc\u8ddd\u79bb\u5f71\u54cd\u3002", "conclusion": "EMLIO\u7684\u670d\u52a1\u67b6\u6784\u4e3a\u4e0b\u4e00\u4ee3AI\u4e91\u63d0\u4f9b\u4e86\u53ef\u6269\u5c55\u7684\u80fd\u6e90\u611f\u77e5I/O\u65b9\u6848\u3002"}}
{"id": "2508.11266", "categories": ["cs.DC", "cs.CY"], "pdf": "https://arxiv.org/pdf/2508.11266", "abs": "https://arxiv.org/abs/2508.11266", "authors": ["Ailiya Borjigin", "Cong He", "Charles CC Lee", "Wei Zhou"], "title": "Element and Everything Tokens: Two-Tier Architecture for Mobilizing Alternative Assets", "comment": "8 Pages, Submitted to RASSE 2025", "summary": "Alternative assets such as mines, power plants, or infrastructure projects\nare often large, heterogeneous bundles of resources, rights, and outputs whose\nvalue is difficult to trade or fractionalize under traditional frameworks. This\npaper proposes a novel two-tier tokenization architecture to enhance the\nliquidity and transparency of such complex assets. We introduce the concepts of\nElement Tokens and Everything Tokens: elemental tokens represent standardized,\nfully collateralized components of an asset (e.g., outputs, rights, or\ncredits), while an everything token represents the entire asset as a fixed\ncombination of those elements. The architecture enables both fine-grained\npartial ownership and integrated whole-asset ownership through a system of\ntwo-way convertibility. We detail the design and mechanics of this system,\nincluding an arbitrage mechanism that keeps the price of the composite token\naligned with the net asset value of its constituents. Through illustrative\nexamples in the energy and industrial sectors, we demonstrate that our approach\nallows previously illiquid, high-value projects to be fractionalized and traded\nakin to stocks or exchange-traded funds (ETFs). We discuss the benefits for\ninvestors and asset owners, such as lower entry barriers, improved price\ndiscovery, and flexible financing, as well as the considerations for\nimplementation and regulation.", "AI": {"tldr": "\u63d0\u51fa\u4e00\u79cd\u53cc\u5c42\u4ee3\u5e01\u5316\u67b6\u6784\uff0c\u901a\u8fc7\u5143\u7d20\u4ee3\u5e01\u548c\u6574\u4f53\u4ee3\u5e01\u589e\u5f3a\u590d\u6742\u8d44\u4ea7\u7684\u6d41\u52a8\u6027\u548c\u900f\u660e\u5ea6\u3002", "motivation": "\u4f20\u7edf\u6846\u67b6\u96be\u4ee5\u4ea4\u6613\u6216\u5206\u5272\u590d\u6742\u8d44\u4ea7\uff08\u5982\u77ff\u5c71\u3001\u53d1\u7535\u5382\u7b49\uff09\uff0c\u9700\u65b0\u65b9\u6cd5\u63d0\u5347\u5176\u6d41\u52a8\u6027\u548c\u900f\u660e\u5ea6\u3002", "method": "\u5f15\u5165\u5143\u7d20\u4ee3\u5e01\uff08\u6807\u51c6\u5316\u3001\u62b5\u62bc\u7684\u8d44\u4ea7\u7ec4\u4ef6\uff09\u548c\u6574\u4f53\u4ee3\u5e01\uff08\u8d44\u4ea7\u7684\u56fa\u5b9a\u7ec4\u5408\uff09\uff0c\u652f\u6301\u53cc\u5411\u8f6c\u6362\u548c\u5957\u5229\u673a\u5236\u3002", "result": "\u901a\u8fc7\u80fd\u6e90\u548c\u5de5\u4e1a\u6848\u4f8b\u5c55\u793a\uff0c\u8be5\u65b9\u6cd5\u4f7f\u9ad8\u4ef7\u503c\u9879\u76ee\u53ef\u5206\u5272\u4ea4\u6613\uff0c\u7c7b\u4f3c\u80a1\u7968\u6216ETF\u3002", "conclusion": "\u8be5\u67b6\u6784\u964d\u4f4e\u6295\u8d44\u95e8\u69db\uff0c\u6539\u5584\u4ef7\u683c\u53d1\u73b0\uff0c\u63d0\u4f9b\u7075\u6d3b\u878d\u8d44\uff0c\u4f46\u9700\u8003\u8651\u5b9e\u65bd\u548c\u76d1\u7ba1\u95ee\u9898\u3002"}}
{"id": "2508.11298", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2508.11298", "abs": "https://arxiv.org/abs/2508.11298", "authors": ["Gabin Schieffer", "Jacob Wahlgren", "Ruimin Shi", "Edgar A. Le\u00f3n", "Roger Pearce", "Maya Gokhale", "Ivy Peng"], "title": "Inter-APU Communication on AMD MI300A Systems via Infinity Fabric: a Deep Dive", "comment": null, "summary": "The ever-increasing compute performance of GPU accelerators drives up the\nneed for efficient data movements within HPC applications to sustain\nperformance. Proposed as a solution to alleviate CPU-GPU data movement, AMD\nMI300A Accelerated Processing Unit (APU) combines CPU, GPU, and high-bandwidth\nmemory (HBM) within a single physical package. Leadership supercomputers, such\nas El Capitan, group four APUs within a single compute node, using Infinity\nFabric Interconnect. In this work, we design specific benchmarks to evaluate\ndirect memory access from the GPU, explicit inter-APU data movement, and\ncollective multi-APU communication. We also compare the efficiency of HIP APIs,\nMPI routines, and the GPU-specialized RCCL library. Our results highlight key\ndesign choices for optimizing inter-APU communication on multi-APU AMD MI300A\nsystems with Infinity Fabric, including programming interfaces, allocators, and\ndata movement. Finally, we optimize two real HPC applications, Quicksilver and\nCloverLeaf, and evaluate them on a four MI100A APU system.", "AI": {"tldr": "\u672c\u6587\u7814\u7a76\u4e86AMD MI300A APU\u5728\u591aAPU\u7cfb\u7edf\u4e2d\u7684\u901a\u4fe1\u6548\u7387\uff0c\u901a\u8fc7\u8bbe\u8ba1\u57fa\u51c6\u6d4b\u8bd5\u6bd4\u8f83\u4e86HIP API\u3001MPI\u548cRCCL\u5e93\u7684\u6027\u80fd\uff0c\u5e76\u4f18\u5316\u4e86\u4e24\u4e2aHPC\u5e94\u7528\u3002", "motivation": "\u968f\u7740GPU\u8ba1\u7b97\u6027\u80fd\u7684\u63d0\u5347\uff0cHPC\u5e94\u7528\u4e2d\u9ad8\u6548\u7684\u6570\u636e\u79fb\u52a8\u6210\u4e3a\u5173\u952e\u3002AMD MI300A APU\u901a\u8fc7\u96c6\u6210CPU\u3001GPU\u548cHBM\uff0c\u65e8\u5728\u51cf\u5c11CPU-GPU\u6570\u636e\u4f20\u8f93\u5f00\u9500\u3002", "method": "\u8bbe\u8ba1\u4e86\u57fa\u51c6\u6d4b\u8bd5\u8bc4\u4f30GPU\u76f4\u63a5\u5185\u5b58\u8bbf\u95ee\u3001APU\u95f4\u6570\u636e\u4f20\u8f93\u548c\u96c6\u4f53\u901a\u4fe1\uff0c\u6bd4\u8f83\u4e86HIP API\u3001MPI\u548cRCCL\u5e93\u7684\u6548\u7387\u3002", "result": "\u7814\u7a76\u63ed\u793a\u4e86\u4f18\u5316\u591aAPU\u7cfb\u7edf\u901a\u4fe1\u7684\u5173\u952e\u8bbe\u8ba1\u9009\u62e9\uff0c\u5305\u62ec\u7f16\u7a0b\u63a5\u53e3\u3001\u5206\u914d\u5668\u548c\u6570\u636e\u4f20\u8f93\u7b56\u7565\u3002", "conclusion": "\u901a\u8fc7\u4f18\u5316Quicksilver\u548cCloverLeaf\u5e94\u7528\uff0c\u9a8c\u8bc1\u4e86MI300A APU\u5728HPC\u4e2d\u7684\u6f5c\u529b\u3002"}}
{"id": "2508.11384", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2508.11384", "abs": "https://arxiv.org/abs/2508.11384", "authors": ["Joel Rybicki", "Jakob Solnerzik", "Olivier Stietel", "Robin Vacus"], "title": "Space-efficient population protocols for exact majority in general graphs", "comment": null, "summary": "We study exact majority consensus in the population protocol model. In this\nmodel, the system is described by a graph $G = (V,E)$ with $n$ nodes, and in\neach time step, a scheduler samples uniformly at random a pair of adjacent\nnodes to interact. In the exact majority consensus task, each node is given a\nbinary input, and the goal is to design a protocol that almost surely reaches a\nstable configuration, where all nodes output the majority input value.\n  We give improved upper and lower bounds for the exact majority in general\ngraphs. First, we give asymptotically tight time lower bounds for general\n(unbounded space) protocols. Second, we obtain new upper bounds parameterized\nby the relaxation time $\\tau_{\\mathsf{rel}}$ of the random walk on $G$ induced\nby the scheduler and the degree imbalance $\\Delta/\\delta$ of $G$. Specifically,\nwe give a protocol that stabilizes in $O\\left( \\tfrac{\\Delta}{\\delta}\n\\tau_{\\mathsf{rel}} \\log^2 n \\right)$ steps in expectation and with high\nprobability and uses $O\\left( \\log n \\cdot \\left(\n\\log\\left(\\tfrac{\\Delta}{\\delta}\\right) + \\log\n\\left(\\tfrac{\\tau_{\\mathsf{rel}}}{n}\\right) \\right) \\right)$ states in any\ngraph with minimum degree at least $\\delta$ and maximum degree at most\n$\\Delta$.\n  For regular expander graphs, this matches the optimal space complexity of\n$\\Theta(\\log n)$ for fast protocols in complete graphs [Alistarh et al., SODA\n2016 and Doty et al., FOCS 2022] with a nearly optimal stabilization time of\n$O(n \\log^2 n)$ steps. Finally, we give a new upper bound of\n$O(\\tau_{\\mathsf{rel}} \\cdot n \\log n)$ for the stabilization time of a\nconstant-state protocol.", "AI": {"tldr": "\u8bba\u6587\u7814\u7a76\u4e86\u5728\u4eba\u53e3\u534f\u8bae\u6a21\u578b\u4e2d\u7684\u7cbe\u786e\u591a\u6570\u5171\u8bc6\u95ee\u9898\uff0c\u6539\u8fdb\u4e86\u901a\u7528\u56fe\u7684\u4e0a\u754c\u548c\u4e0b\u754c\uff0c\u5e76\u63d0\u51fa\u4e86\u57fa\u4e8e\u677e\u5f1b\u65f6\u95f4\u548c\u5ea6\u4e0d\u5e73\u8861\u7684\u65b0\u534f\u8bae\u3002", "motivation": "\u7814\u7a76\u7cbe\u786e\u591a\u6570\u5171\u8bc6\u5728\u901a\u7528\u56fe\u4e2d\u7684\u6027\u80fd\u754c\u9650\uff0c\u4ee5\u4f18\u5316\u534f\u8bae\u7684\u7a33\u5b9a\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u3002", "method": "\u901a\u8fc7\u5206\u6790\u968f\u673a\u6e38\u8d70\u7684\u677e\u5f1b\u65f6\u95f4\u548c\u56fe\u7684\u5ea6\u4e0d\u5e73\u8861\uff0c\u8bbe\u8ba1\u65b0\u7684\u534f\u8bae\uff0c\u5e76\u7ed9\u51fa\u65f6\u95f4\u590d\u6742\u5ea6\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u7684\u7406\u8bba\u754c\u9650\u3002", "result": "\u63d0\u51fa\u4e86\u4e00\u4e2a\u534f\u8bae\uff0c\u5176\u7a33\u5b9a\u65f6\u95f4\u4e3aO(\u0394/\u03b4 \u03c4_rel log\u00b2n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(log n (log(\u0394/\u03b4) + log(\u03c4_rel/n)))\u3002", "conclusion": "\u5728\u6b63\u5219\u6269\u5c55\u56fe\u4e2d\uff0c\u534f\u8bae\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u63a5\u8fd1\u6700\u4f18\uff0c\u7a33\u5b9a\u65f6\u95f4\u4e5f\u63a5\u8fd1\u6700\u4f18\uff0c\u540c\u65f6\u4e3a\u5e38\u6570\u72b6\u6001\u534f\u8bae\u63d0\u4f9b\u4e86\u65b0\u7684\u4e0a\u754c\u3002"}}
{"id": "2508.11477", "categories": ["cs.AR", "cs.ET", "cs.OS"], "pdf": "https://arxiv.org/pdf/2508.11477", "abs": "https://arxiv.org/abs/2508.11477", "authors": ["Hyunsun Chung", "Junhyeok Park", "Taewan Noh", "Seonghoon Ahn", "Kihwan Kim", "Ming Zhao", "Youngjae Kim"], "title": "OpenCXD: An Open Real-Device-Guided Hybrid Evaluation Framework for CXL-SSDs", "comment": "This paper will be published in the proceedings of the 33rd\n  International Symposium on the Modeling, Analysis, and Simulation of Computer\n  and Telecommunication System (MASCOTS)", "summary": "The advent of Compute Express Link (CXL) enables SSDs to participate in the\nmemory hierarchy as large-capacity, byte-addressable memory devices. These\nCXL-enabled SSDs (CXL-SSDs) offer a promising new tier between DRAM and\ntraditional storage, combining NAND flash density with memory-like access\nsemantics. However, evaluating the performance of CXL-SSDs remains difficult\ndue to the lack of hardware that natively supports the CXL.mem protocol on\nSSDs. As a result, most prior work relies on hybrid simulators combining CPU\nmodels augmented with CXL.mem semantics and SSD simulators that approximate\ninternal flash behaviors. While effective for early-stage exploration, this\napproach cannot faithfully model firmware-level interactions and low-level\nstorage dynamics critical to CXL-SSD performance. In this paper, we present\nOpenCXD, a real-device-guided hybrid evaluation framework that bridges the gap\nbetween simulation and hardware. OpenCXD integrates a cycle-accurate CXL.mem\nsimulator on the host side with a physical OpenSSD platform running real\nfirmware. This enables in-situ firmware execution triggered by simulated memory\nrequests. Through these contributions, OpenCXD reflects device-level phenomena\nunobservable in simulation-only setups, providing critical insights for future\nfirmware design tailored to CXL-SSDs.", "AI": {"tldr": "OpenCXD\u662f\u4e00\u4e2a\u57fa\u4e8e\u771f\u5b9e\u8bbe\u5907\u7684\u6df7\u5408\u8bc4\u4f30\u6846\u67b6\uff0c\u7528\u4e8e\u8bc4\u4f30CXL-SSD\u6027\u80fd\uff0c\u586b\u8865\u4e86\u4eff\u771f\u4e0e\u786c\u4ef6\u4e4b\u95f4\u7684\u5dee\u8ddd\u3002", "motivation": "\u7531\u4e8e\u7f3a\u4e4f\u539f\u751f\u652f\u6301CXL.mem\u534f\u8bae\u7684SSD\u786c\u4ef6\uff0c\u73b0\u6709\u65b9\u6cd5\u96be\u4ee5\u51c6\u786e\u8bc4\u4f30CXL-SSD\u6027\u80fd\uff0c\u5c24\u5176\u662f\u56fa\u4ef6\u7ea7\u4ea4\u4e92\u548c\u4f4e\u5c42\u5b58\u50a8\u52a8\u6001\u3002", "method": "OpenCXD\u7ed3\u5408\u4e86\u4e3b\u673a\u7aef\u7684\u5468\u671f\u7cbe\u786eCXL.mem\u4eff\u771f\u5668\u548c\u8fd0\u884c\u771f\u5b9e\u56fa\u4ef6\u7684\u7269\u7406OpenSSD\u5e73\u53f0\uff0c\u5b9e\u73b0\u4eff\u771f\u5185\u5b58\u8bf7\u6c42\u89e6\u53d1\u7684\u56fa\u4ef6\u6267\u884c\u3002", "result": "OpenCXD\u80fd\u591f\u53cd\u6620\u4eff\u771f\u65e0\u6cd5\u89c2\u5bdf\u5230\u7684\u8bbe\u5907\u7ea7\u73b0\u8c61\uff0c\u4e3a\u672a\u6765CXL-SSD\u56fa\u4ef6\u8bbe\u8ba1\u63d0\u4f9b\u5173\u952e\u89c1\u89e3\u3002", "conclusion": "OpenCXD\u4e3aCXL-SSD\u6027\u80fd\u8bc4\u4f30\u63d0\u4f9b\u4e86\u4e00\u79cd\u66f4\u63a5\u8fd1\u786c\u4ef6\u7684\u65b9\u6cd5\uff0c\u6709\u52a9\u4e8e\u4f18\u5316\u56fa\u4ef6\u8bbe\u8ba1\u3002"}}
{"id": "2508.11415", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2508.11415", "abs": "https://arxiv.org/abs/2508.11415", "authors": ["Ra\u00efssa Nataf", "Yoram Moses"], "title": "Time, Fences and the Ordering of Events in TSO", "comment": null, "summary": "The Total Store Order (TSO) is arguably the most widely used relaxed memory\nmodel in multiprocessor architectures, widely implemented, for example in\nIntel's x86 and x64 platforms. It allows processes to delay the visibility of\nwrites through store buffering. While this supports hardware-level\noptimizations and makes a significant contribution to multiprocessor\nefficiency, it complicates reasoning about correctness, as executions may\nviolate sequential consistency. Ensuring correct behavior often requires\ninserting synchronization primitives such as memory fences ($F$) or atomic\nread-modify-write ($RMW$) operations, but this approach can incur significant\nperformance costs. In this work, we develop a semantic framework that precisely\ncharacterizes when such synchronization is necessary under TSO. We introduce a\nnovel TSO-specific occurs-before relation, which adapts Lamport's celebrated\nhappens-before relation from asynchronous message-passing systems to the TSO\nsetting. Our main result is a theorem that proves that the only way to ensure\nthat two events that take place at different sites are temporally ordered is by\nhaving the execution create an occurs-before chain between the events. By\nstudying the role of fences and $RMW$s in creating occurs-before chains, we are\nthen able to capture cases in which these costly synchronization operations are\nunavoidable. Since proper real-time ordering of events is a fundamental aspect\nof consistency conditions such as Linearizability, our analysis provides a\nsound theoretical understanding of essential aspects of the TSO model. In\nparticular, we are able to generalize prior lower bounds for linearizable\nimplementations of shared memory objects. Our results capture the structure of\ninformation flow and causality in the TSO model by extending the standard\ncommunication-based reasoning from asynchronous systems to the TSO memory\nmodel.", "AI": {"tldr": "\u8be5\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u8bed\u4e49\u6846\u67b6\uff0c\u7528\u4e8e\u7cbe\u786e\u63cf\u8ff0\u5728TSO\u5185\u5b58\u6a21\u578b\u4e0b\u4f55\u65f6\u9700\u8981\u540c\u6b65\u64cd\u4f5c\uff08\u5982\u5185\u5b58\u6805\u680f\u6216\u539f\u5b50\u64cd\u4f5c\uff09\uff0c\u5e76\u5f15\u5165\u4e86\u4e00\u79cd\u65b0\u7684TSO\u7279\u5b9aoccurs-before\u5173\u7cfb\u3002", "motivation": "TSO\u5185\u5b58\u6a21\u578b\u901a\u8fc7\u5ef6\u8fdf\u5199\u64cd\u4f5c\u7684\u53ef\u89c1\u6027\u652f\u6301\u786c\u4ef6\u4f18\u5316\uff0c\u4f46\u589e\u52a0\u4e86\u6b63\u786e\u6027\u63a8\u7406\u7684\u590d\u6742\u6027\uff0c\u9700\u8981\u540c\u6b65\u64cd\u4f5c\u6765\u786e\u4fdd\u987a\u5e8f\u4e00\u81f4\u6027\uff0c\u800c\u8fd9\u4e9b\u64cd\u4f5c\u53ef\u80fd\u5e26\u6765\u6027\u80fd\u5f00\u9500\u3002", "method": "\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684TSO\u7279\u5b9aoccurs-before\u5173\u7cfb\uff0c\u6269\u5c55\u4e86Lamport\u7684happens-before\u5173\u7cfb\uff0c\u5e76\u901a\u8fc7\u5b9a\u7406\u8bc1\u660e\u4e8b\u4ef6\u95f4\u7684\u65f6\u5e8f\u987a\u5e8f\u5fc5\u987b\u901a\u8fc7occurs-before\u94fe\u5b9e\u73b0\u3002", "result": "\u901a\u8fc7\u5206\u6790\u6805\u680f\u548c\u539f\u5b50\u64cd\u4f5c\u5728\u521b\u5efaoccurs-before\u94fe\u4e2d\u7684\u4f5c\u7528\uff0c\u660e\u786e\u4e86\u8fd9\u4e9b\u540c\u6b65\u64cd\u4f5c\u7684\u5fc5\u8981\u6027\uff0c\u5e76\u63a8\u5e7f\u4e86\u7ebf\u6027\u5316\u5171\u4eab\u5185\u5b58\u5bf9\u8c61\u7684\u5148\u524d\u4e0b\u754c\u3002", "conclusion": "\u8be5\u7814\u7a76\u4e3aTSO\u6a21\u578b\u4e2d\u7684\u4fe1\u606f\u6d41\u548c\u56e0\u679c\u5173\u7cfb\u63d0\u4f9b\u4e86\u7406\u8bba\u652f\u6301\uff0c\u6269\u5c55\u4e86\u5f02\u6b65\u7cfb\u7edf\u7684\u901a\u4fe1\u63a8\u7406\u65b9\u6cd5\u3002"}}
{"id": "2508.11297", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2508.11297", "abs": "https://arxiv.org/abs/2508.11297", "authors": ["Casper Bach"], "title": "Generic Reduction-Based Interpreters (Extended Version)", "comment": null, "summary": "Reduction-based interpreters are traditionally defined in terms of a one-step\nreduction function which systematically decomposes a term into a potential\nredex and context, contracts the redex, and recomposes it to construct the new\nterm to be further reduced. While implementing such interpreters follows a\nsystematic recipe, they often require interpreter engineers to write a\nsubstantial amount of code -- much of it boilerplate. In this paper, we apply\nwell-known techniques from generic programming to reduce boilerplate code in\nreduction-based interpreters.", "AI": {"tldr": "\u5e94\u7528\u901a\u7528\u7f16\u7a0b\u6280\u672f\u51cf\u5c11\u57fa\u4e8e\u5f52\u7ea6\u7684\u89e3\u91ca\u5668\u4e2d\u7684\u6837\u677f\u4ee3\u7801\u3002", "motivation": "\u4f20\u7edf\u57fa\u4e8e\u5f52\u7ea6\u7684\u89e3\u91ca\u5668\u9700\u8981\u5927\u91cf\u6837\u677f\u4ee3\u7801\uff0c\u589e\u52a0\u4e86\u5b9e\u73b0\u590d\u6742\u5ea6\u3002", "method": "\u91c7\u7528\u901a\u7528\u7f16\u7a0b\u6280\u672f\u4f18\u5316\u89e3\u91ca\u5668\u7684\u5b9e\u73b0\u3002", "result": "\u51cf\u5c11\u4e86\u6837\u677f\u4ee3\u7801\uff0c\u63d0\u9ad8\u4e86\u5f00\u53d1\u6548\u7387\u3002", "conclusion": "\u901a\u7528\u7f16\u7a0b\u6280\u672f\u80fd\u6709\u6548\u7b80\u5316\u57fa\u4e8e\u5f52\u7ea6\u7684\u89e3\u91ca\u5668\u7684\u5b9e\u73b0\u3002"}}
{"id": "2508.11467", "categories": ["cs.DC", "cs.PF"], "pdf": "https://arxiv.org/pdf/2508.11467", "abs": "https://arxiv.org/abs/2508.11467", "authors": ["Shifang Liu", "Huiyuan Li", "Hongjiao Sheng", "Haoyuan Gui", "Xiaoyu Zhang"], "title": "Efficient GPU-Centered Singular Value Decomposition Using the Divide-and-Conquer Method", "comment": null, "summary": "Singular Value Decomposition (SVD) is a fundamental matrix factorization\ntechnique in linear algebra, widely applied in numerous matrix-related\nproblems. However, traditional SVD approaches are hindered by slow panel\nfactorization and frequent CPU-GPU data transfers in heterogeneous systems,\ndespite advancements in GPU computational capabilities. In this paper, we\nintroduce a GPU-centered SVD algorithm, incorporating a novel GPU-based\nbidiagonal divide-and-conquer (BDC) method. We reformulate the algorithm and\ndata layout of different steps for SVD computation, performing all panel-level\ncomputations and trailing matrix updates entirely on GPU to eliminate CPU-GPU\ndata transfers. Furthermore, we integrate related computations to optimize BLAS\nutilization, thereby increasing arithmetic intensity and fully leveraging the\ncomputational capabilities of GPUs. Additionally, we introduce a newly\ndeveloped GPU-based BDC algorithm that restructures the workflow to eliminate\nmatrix-level CPU-GPU data transfers and enable asynchronous execution between\nthe CPU and GPU. Experimental results on AMD MI210 and NVIDIA V100 GPUs\ndemonstrate that our proposed method achieves speedups of up to 1293.64x/7.47x\nand 14.10x/12.38x compared to rocSOLVER/cuSOLVER and MAGMA, respectively.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8eGPU\u7684SVD\u7b97\u6cd5\uff0c\u901a\u8fc7\u4f18\u5316\u6570\u636e\u5e03\u5c40\u548c\u8ba1\u7b97\u6d41\u7a0b\uff0c\u663e\u8457\u63d0\u5347\u4e86\u8ba1\u7b97\u6548\u7387\u3002", "motivation": "\u4f20\u7edfSVD\u65b9\u6cd5\u5728\u5f02\u6784\u7cfb\u7edf\u4e2d\u5b58\u5728\u8ba1\u7b97\u901f\u5ea6\u6162\u548cCPU-GPU\u6570\u636e\u4f20\u8f93\u9891\u7e41\u7684\u95ee\u9898\uff0cGPU\u7684\u8ba1\u7b97\u80fd\u529b\u672a\u5f97\u5230\u5145\u5206\u5229\u7528\u3002", "method": "\u8bbe\u8ba1\u4e86\u57fa\u4e8eGPU\u7684\u53cc\u5bf9\u89d2\u5206\u6cbb\uff08BDC\uff09\u65b9\u6cd5\uff0c\u91cd\u65b0\u89c4\u5212\u7b97\u6cd5\u548c\u6570\u636e\u5e03\u5c40\uff0c\u5b8c\u5168\u5728GPU\u4e0a\u8fdb\u884c\u8ba1\u7b97\uff0c\u51cf\u5c11\u6570\u636e\u4f20\u8f93\uff0c\u5e76\u4f18\u5316BLAS\u5229\u7528\u7387\u3002", "result": "\u5728AMD MI210\u548cNVIDIA V100 GPU\u4e0a\uff0c\u76f8\u6bd4rocSOLVER/cuSOLVER\u548cMAGMA\uff0c\u5206\u522b\u5b9e\u73b0\u4e86\u6700\u9ad81293.64x/7.47x\u548c14.10x/12.38x\u7684\u52a0\u901f\u6bd4\u3002", "conclusion": "\u63d0\u51fa\u7684GPU\u4e2d\u5fc3\u5316SVD\u7b97\u6cd5\u663e\u8457\u63d0\u5347\u4e86\u8ba1\u7b97\u6548\u7387\uff0c\u4e3a\u77e9\u9635\u5206\u89e3\u95ee\u9898\u63d0\u4f9b\u4e86\u66f4\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2508.11443", "categories": ["cs.PL", "cs.DS"], "pdf": "https://arxiv.org/pdf/2508.11443", "abs": "https://arxiv.org/abs/2508.11443", "authors": ["William Henrich Due", "Martin Elsman", "Troels Henriksen"], "title": "Towards Efficient Hash Maps in Functional Array Languages", "comment": null, "summary": "We present a systematic derivation of a data-parallel implementation of\ntwo-level, static and collision-free hash maps, by giving a functional\nformulation of the Fredman et al. construction, and then flattening it. We\ndiscuss the challenges of providing a flexible, polymorphic, and abstract\ninterface to hash maps in a functional array language, with particular\nattention paid to the problem of dynamically sized keys, which we address by\nassociating each hash map with an arbitrary context. The algorithm is\nimplemented in Futhark, and the achieved GPU execution performance is compared\non simple benchmark problems. We find that our hash maps outperform\nconventional tree/search-based approaches. Furthermore, our implementation is\ncompared against the state-of-the-art cuCollections library, which is\nsignificantly faster for hash map construction, and to a lesser degree for\nlookups. We explain to which extent the performance difference is due to\nlow-level code generation limitation in the Futhark compiler, and to which\nextent it can be attributed to the data-parallel programming vocabulary not\nproviding the constructs necessary to express the equivalent of the algorithms\nused by cuCollections. We end by reflecting to which extent the functional\narray language programming model could, or should, be extended to address these\nweaknesses.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u6570\u636e\u5e76\u884c\u7684\u4e24\u7ea7\u9759\u6001\u65e0\u51b2\u7a81\u54c8\u5e0c\u6620\u5c04\u5b9e\u73b0\uff0c\u57fa\u4e8eFredman\u7b49\u4eba\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5e76\u901a\u8fc7Futhark\u5b9e\u73b0\u3002\u6027\u80fd\u4f18\u4e8e\u4f20\u7edf\u6811/\u641c\u7d22\u65b9\u6cd5\uff0c\u4f46\u4e0ecuCollections\u5e93\u76f8\u6bd4\u5728\u6784\u9020\u901f\u5ea6\u4e0a\u4ecd\u6709\u5dee\u8ddd\u3002", "motivation": "\u7814\u7a76\u5982\u4f55\u5728\u51fd\u6570\u5f0f\u6570\u7ec4\u8bed\u8a00\u4e2d\u5b9e\u73b0\u7075\u6d3b\u3001\u591a\u6001\u4e14\u62bd\u8c61\u7684\u54c8\u5e0c\u6620\u5c04\u63a5\u53e3\uff0c\u7279\u522b\u662f\u89e3\u51b3\u52a8\u6001\u5927\u5c0f\u952e\u7684\u95ee\u9898\u3002", "method": "\u901a\u8fc7\u529f\u80fd\u5316Fredman\u7b49\u4eba\u7684\u6784\u9020\u65b9\u6cd5\u5e76\u6241\u5e73\u5316\uff0c\u5b9e\u73b0\u6570\u636e\u5e76\u884c\u54c8\u5e0c\u6620\u5c04\uff0c\u5e76\u5728Futhark\u4e2d\u5b9e\u73b0\u3002", "result": "\u6027\u80fd\u4f18\u4e8e\u4f20\u7edf\u65b9\u6cd5\uff0c\u4f46\u5728\u6784\u9020\u901f\u5ea6\u4e0a\u4e0d\u53cacuCollections\u5e93\u3002\u6027\u80fd\u5dee\u5f02\u90e8\u5206\u6e90\u4e8eFuthark\u7f16\u8bd1\u5668\u7684\u9650\u5236\uff0c\u90e8\u5206\u6e90\u4e8e\u6570\u636e\u5e76\u884c\u7f16\u7a0b\u6a21\u578b\u7684\u4e0d\u8db3\u3002", "conclusion": "\u63a2\u8ba8\u4e86\u51fd\u6570\u5f0f\u6570\u7ec4\u8bed\u8a00\u7f16\u7a0b\u6a21\u578b\u662f\u5426\u9700\u8981\u6269\u5c55\u4ee5\u89e3\u51b3\u6027\u80fd\u5dee\u8ddd\u95ee\u9898\u3002"}}
