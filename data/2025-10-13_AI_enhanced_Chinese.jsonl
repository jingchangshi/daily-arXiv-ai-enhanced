{"id": "2510.08726", "categories": ["cs.PL", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.08726", "abs": "https://arxiv.org/abs/2510.08726", "authors": ["Yifan Zhao", "Egan Johnson", "Prasanth Chatarasi", "Vikram Adve", "Sasa Misailovic"], "title": "Neptune: Advanced ML Operator Fusion for Locality and Parallelism on GPUs", "comment": null, "summary": "Operator fusion has become a key optimization for deep learning, which\ncombines multiple deep learning operators to improve data reuse and reduce\nglobal memory transfers. However, existing tensor compilers struggle to fuse\ncomplex reduction computations involving loop-carried dependencies, such as\nattention mechanisms.\n  The paper introduces Neptune, a tensor compiler for advanced operator fusion\nfor sequences of reduction operators. Neptune presents a new approach for\nadvanced operator fusion, which intentionally breaks some existing dependencies\nand compensates by constructing algebraic correction expressions that allow the\nkernel to produce the correct result.\n  On ten attention-based benchmarks, Neptune, starting from simple attention\ncode and a high-level scheduling template, outperforms existing compilers like\nTriton, TVM, and FlexAttention, including Triton-based implementations of\nFlashAttention. Across four different GPU architectures from NVIDIA and AMD,\nNeptune-generated kernels have average speedup of $1.35\\times$ over the next\nbest alternative, demonstrating its effectiveness for deep learning workloads.", "AI": {"tldr": "Neptune\u662f\u4e00\u4e2a\u5f20\u91cf\u7f16\u8bd1\u5668\uff0c\u901a\u8fc7\u6253\u7834\u5faa\u73af\u4f9d\u8d56\u5e76\u6784\u9020\u4ee3\u6570\u6821\u6b63\u8868\u8fbe\u5f0f\uff0c\u5b9e\u73b0\u4e86\u590d\u6742\u5f52\u7ea6\u8ba1\u7b97\uff08\u5982\u6ce8\u610f\u529b\u673a\u5236\uff09\u7684\u9ad8\u7ea7\u7b97\u5b50\u878d\u5408\uff0c\u5728\u591a\u79cdGPU\u67b6\u6784\u4e0a\u5e73\u5747\u52a0\u901f1.35\u500d\u3002", "motivation": "\u73b0\u6709\u5f20\u91cf\u7f16\u8bd1\u5668\u96be\u4ee5\u878d\u5408\u6d89\u53ca\u5faa\u73af\u4f9d\u8d56\u7684\u590d\u6742\u5f52\u7ea6\u8ba1\u7b97\uff0c\u5982\u6ce8\u610f\u529b\u673a\u5236\uff0c\u8fd9\u9650\u5236\u4e86\u7b97\u5b50\u878d\u5408\u4f18\u5316\u7684\u6548\u679c\u3002", "method": "\u63d0\u51faNeptune\u7f16\u8bd1\u5668\uff0c\u901a\u8fc7\u6709\u610f\u6253\u7834\u73b0\u6709\u4f9d\u8d56\u5173\u7cfb\uff0c\u5e76\u6784\u9020\u4ee3\u6570\u6821\u6b63\u8868\u8fbe\u5f0f\u6765\u8865\u507f\uff0c\u4ece\u800c\u5141\u8bb8\u5185\u6838\u4ea7\u751f\u6b63\u786e\u7ed3\u679c\u3002", "result": "\u572810\u4e2a\u6ce8\u610f\u529b\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0cNeptune\u4ece\u7b80\u5355\u6ce8\u610f\u529b\u4ee3\u7801\u548c\u9ad8\u7ea7\u8c03\u5ea6\u6a21\u677f\u5f00\u59cb\uff0c\u5728NVIDIA\u548cAMD\u76844\u79cdGPU\u67b6\u6784\u4e0a\u5e73\u5747\u6bd4\u6700\u4f73\u66ff\u4ee3\u65b9\u6848\u5feb1.35\u500d\u3002", "conclusion": "Neptune\u901a\u8fc7\u521b\u65b0\u7684\u4f9d\u8d56\u6253\u7834\u548c\u4ee3\u6570\u6821\u6b63\u65b9\u6cd5\uff0c\u6709\u6548\u89e3\u51b3\u4e86\u590d\u6742\u5f52\u7ea6\u8ba1\u7b97\u7684\u878d\u5408\u95ee\u9898\uff0c\u663e\u8457\u63d0\u5347\u4e86\u6df1\u5ea6\u5b66\u4e60\u5de5\u4f5c\u8d1f\u8f7d\u7684\u6027\u80fd\u3002"}}
{"id": "2510.08889", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2510.08889", "abs": "https://arxiv.org/abs/2510.08889", "authors": ["Songlin Jia", "Craig Liu", "Siyuan He", "Haotian Deng", "Yuyan Bao", "Tiark Rompf"], "title": "Typestate via Revocable Capabilities", "comment": null, "summary": "Managing stateful resources safely and expressively is a longstanding\nchallenge in programming languages, especially in the presence of aliasing.\nWhile scope-based constructs such as Java's synchronized blocks offer ease of\nreasoning, they restrict expressiveness and parallelism. Conversely,\nimperative, flow-sensitive management enables fine-grained control but demands\nsophisticated typestate analyses and often burdens programmers with explicit\nstate tracking.\n  In this work, we present a novel approach that unifies the strengths of both\nparadigms by extending flow-insensitive capability mechanisms into\nflow-sensitive typestate tracking. Our system decouples capability lifetimes\nfrom lexical scopes, allowing functions to provide, revoke, and return\ncapabilities in a flow-sensitive manner, based on the existing mechanisms\nexplored for the safety and ergonomics of scoped capability programming.\n  We implement our approach as an extension to the Scala 3 compiler, leveraging\npath-dependent types and implicit resolution to enable concise, statically\nsafe, and expressive typestate programming. Our prototype generically supports\na wide range of stateful patterns, including file operations, advanced locking\nprotocols, DOM construction, and session types. This work demonstrates that\nexpressive and safe typestate management can be achieved with minimal\nextensions to existing capability-based languages, paving the way for more\nrobust and ergonomic stateful programming.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u7edf\u4e00\u4f5c\u7528\u57df\u7ba1\u7406\u548c\u6d41\u654f\u611f\u7c7b\u578b\u72b6\u6001\u8ddf\u8e2a\u7684\u65b0\u65b9\u6cd5\uff0c\u901a\u8fc7\u6269\u5c55\u6d41\u4e0d\u654f\u611f\u7684\u80fd\u529b\u673a\u5236\u6765\u5b9e\u73b0\u6d41\u654f\u611f\u7684\u7c7b\u578b\u72b6\u6001\u8ddf\u8e2a\uff0c\u5728Scala 3\u4e2d\u5b9e\u73b0\u539f\u578b\u3002", "motivation": "\u89e3\u51b3\u72b6\u6001\u8d44\u6e90\u7ba1\u7406\u7684\u6311\u6218\uff1a\u4f5c\u7528\u57df\u7ed3\u6784\uff08\u5982Java\u540c\u6b65\u5757\uff09\u867d\u7136\u6613\u4e8e\u63a8\u7406\u4f46\u9650\u5236\u8868\u8fbe\u6027\u548c\u5e76\u884c\u6027\uff1b\u6d41\u654f\u611f\u7ba1\u7406\u63d0\u4f9b\u7ec6\u7c92\u5ea6\u63a7\u5236\u4f46\u9700\u8981\u590d\u6742\u7c7b\u578b\u72b6\u6001\u5206\u6790\u548c\u663e\u5f0f\u72b6\u6001\u8ddf\u8e2a\u3002", "method": "\u6269\u5c55\u6d41\u4e0d\u654f\u611f\u80fd\u529b\u673a\u5236\u4e3a\u6d41\u654f\u611f\u7c7b\u578b\u72b6\u6001\u8ddf\u8e2a\uff0c\u5c06\u80fd\u529b\u751f\u547d\u5468\u671f\u4e0e\u8bcd\u6cd5\u4f5c\u7528\u57df\u89e3\u8026\uff0c\u5141\u8bb8\u51fd\u6570\u4ee5\u6d41\u654f\u611f\u65b9\u5f0f\u63d0\u4f9b\u3001\u64a4\u9500\u548c\u8fd4\u56de\u80fd\u529b\u3002\u5728Scala 3\u7f16\u8bd1\u5668\u4e2d\u5b9e\u73b0\uff0c\u5229\u7528\u8def\u5f84\u4f9d\u8d56\u7c7b\u578b\u548c\u9690\u5f0f\u89e3\u6790\u3002", "result": "\u539f\u578b\u652f\u6301\u5e7f\u6cdb\u7684\u72b6\u6001\u6a21\u5f0f\uff0c\u5305\u62ec\u6587\u4ef6\u64cd\u4f5c\u3001\u9ad8\u7ea7\u9501\u5b9a\u534f\u8bae\u3001DOM\u6784\u5efa\u548c\u4f1a\u8bdd\u7c7b\u578b\uff0c\u5b9e\u73b0\u4e86\u7b80\u6d01\u3001\u9759\u6001\u5b89\u5168\u4e14\u8868\u8fbe\u6027\u5f3a\u7684\u7c7b\u578b\u72b6\u6001\u7f16\u7a0b\u3002", "conclusion": "\u8bc1\u660e\u4e86\u901a\u8fc7\u6700\u5c0f\u5316\u6269\u5c55\u73b0\u6709\u57fa\u4e8e\u80fd\u529b\u7684\u8bed\u8a00\uff0c\u53ef\u4ee5\u5b9e\u73b0\u8868\u8fbe\u6027\u5f3a\u4e14\u5b89\u5168\u7684\u7c7b\u578b\u72b6\u6001\u7ba1\u7406\uff0c\u4e3a\u66f4\u5065\u58ee\u548c\u7b26\u5408\u4eba\u4f53\u5de5\u7a0b\u5b66\u7684\u72b6\u6001\u7f16\u7a0b\u94fa\u5e73\u9053\u8def\u3002"}}
{"id": "2510.08939", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2510.08939", "abs": "https://arxiv.org/abs/2510.08939", "authors": ["Haotian Deng", "Siyuan He", "Songlin Jia", "Yuyan Bao", "Tiark Rompf"], "title": "Free to Move: Reachability Types with Flow-Sensitive Effects for Safe Deallocation and Ownership Transfer", "comment": null, "summary": "We present a flow-sensitive effect system for reachability types that\nsupports explicit memory management, including Rust-style move semantics, in\nhigher-order impure functional languages. Our system refines the existing\nreachability qualifier with polymorphic \\emph{use} and \\emph{kill} effects that\nrecord how references are read, written, transferred, and deallocated. The\neffect discipline tracks operations performed on each resource using\nqualifiers, enabling the type system to express ownership transfer, contextual\nfreshness, and destructive updates without regions or linearity. We formalize\nthe calculus, its typing and effect rules, and a compositional operational\nsemantics that validates use-after-free safety. All metatheoretic results,\nincluding preservation, progress, and effect soundness, are mechanized. The\nsystem models idioms such as reference deallocation, move semantics, reference\nswapping, while exposing precise safety guarantee. Together, these\ncontributions integrate reachability-based reasoning with explicit resource\ncontrol, advancing the state of the art in safe manual memory management for\nhigher-order functional languages.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u53ef\u8fbe\u6027\u7c7b\u578b\u7684\u6d41\u654f\u611f\u6548\u5e94\u7cfb\u7edf\uff0c\u652f\u6301\u9ad8\u9636\u4e0d\u7eaf\u51fd\u6570\u5f0f\u8bed\u8a00\u4e2d\u7684\u663e\u5f0f\u5185\u5b58\u7ba1\u7406\uff0c\u5305\u62ecRust\u98ce\u683c\u7684\u79fb\u52a8\u8bed\u4e49\u3002", "motivation": "\u5c06\u53ef\u8fbe\u6027\u63a8\u7406\u4e0e\u663e\u5f0f\u8d44\u6e90\u63a7\u5236\u76f8\u7ed3\u5408\uff0c\u4e3a\u9ad8\u9636\u51fd\u6570\u5f0f\u8bed\u8a00\u63d0\u4f9b\u5b89\u5168\u7684\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u65b9\u6848\uff0c\u65e0\u9700\u533a\u57df\u6216\u7ebf\u6027\u7c7b\u578b\u3002", "method": "\u901a\u8fc7\u591a\u6001\u7684use\u548ckill\u6548\u5e94\u6765\u7ec6\u5316\u73b0\u6709\u53ef\u8fbe\u6027\u9650\u5b9a\u7b26\uff0c\u8bb0\u5f55\u5f15\u7528\u7684\u8bfb\u53d6\u3001\u5199\u5165\u3001\u8f6c\u79fb\u548c\u91ca\u653e\u64cd\u4f5c\u3002\u6548\u5e94\u89c4\u5219\u4f7f\u7528\u9650\u5b9a\u7b26\u8ddf\u8e2a\u6bcf\u4e2a\u8d44\u6e90\u7684\u64cd\u4f5c\u3002", "result": "\u7cfb\u7edf\u80fd\u591f\u8868\u8fbe\u6240\u6709\u6743\u8f6c\u79fb\u3001\u4e0a\u4e0b\u6587\u65b0\u9c9c\u5ea6\u548c\u7834\u574f\u6027\u66f4\u65b0\uff0c\u9a8c\u8bc1\u91ca\u653e\u540e\u4f7f\u7528\u5b89\u5168\u6027\uff0c\u5e76\u673a\u68b0\u5316\u6240\u6709\u5143\u7406\u8bba\u7ed3\u679c\u3002", "conclusion": "\u8be5\u5de5\u4f5c\u5c06\u57fa\u4e8e\u53ef\u8fbe\u6027\u7684\u63a8\u7406\u4e0e\u663e\u5f0f\u8d44\u6e90\u63a7\u5236\u96c6\u6210\uff0c\u63a8\u52a8\u4e86\u9ad8\u9636\u51fd\u6570\u5f0f\u8bed\u8a00\u4e2d\u5b89\u5168\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u7684\u6280\u672f\u53d1\u5c55\u3002"}}
{"id": "2510.08969", "categories": ["cs.PL", "cs.SE"], "pdf": "https://arxiv.org/pdf/2510.08969", "abs": "https://arxiv.org/abs/2510.08969", "authors": ["Bjarne Stroustrup"], "title": "Concept-Based Generic Programming in C++", "comment": null, "summary": "We present programming techniques to illustrate the facilities and principles\nof C++ generic programming using concepts. Concepts are C++'s way to express\nconstraints on generic code. As an initial example, we provide a simple type\nsystem that eliminates narrowing conversions and provides range checking\nwithout unnecessary notational or run-time overheads. Concepts are used\nthroughout to provide user-defined extensions to the type system. The aim is to\nshow their utility and the fundamental ideas behind them, rather than to\nprovide a detailed or complete explanation of C++'s language support for\ngeneric programming or the extensive support provided by the standard library.\nGeneric programming is an integral part of C++, rather than an isolated\nsub-language. In particular, key facilities support general programming as well\nas generic programming (e.g., uniform notation for types, lambdas, variadic\ntemplates, and C++26 static reflection). Finally, we give design rationales and\norigins for key parts of the concept design, including use patterns, the\nrelationship to Object-Oriented Programming, value arguments, notation, concept\ntype-matching, and definition checking.", "AI": {"tldr": "\u4ecb\u7ecdC++\u6982\u5ff5\u7f16\u7a0b\u6280\u672f\uff0c\u901a\u8fc7\u6982\u5ff5\u8868\u8fbe\u6cdb\u578b\u4ee3\u7801\u7ea6\u675f\uff0c\u63d0\u4f9b\u6d88\u9664\u7a84\u5316\u8f6c\u6362\u548c\u8303\u56f4\u68c0\u67e5\u7684\u7c7b\u578b\u7cfb\u7edf\uff0c\u5c55\u793a\u6982\u5ff5\u5728\u6cdb\u578b\u7f16\u7a0b\u4e2d\u7684\u5b9e\u7528\u6027\u548c\u57fa\u672c\u539f\u7406\u3002", "motivation": "\u5c55\u793aC++\u6982\u5ff5\u7f16\u7a0b\u7684\u8bbe\u65bd\u548c\u539f\u7406\uff0c\u6982\u5ff5\u4f5c\u4e3a\u8868\u8fbe\u6cdb\u578b\u4ee3\u7801\u7ea6\u675f\u7684\u65b9\u5f0f\uff0c\u65e8\u5728\u63d0\u4f9b\u7528\u6237\u81ea\u5b9a\u4e49\u7c7b\u578b\u7cfb\u7edf\u6269\u5c55\uff0c\u5f3a\u8c03\u6982\u5ff5\u5728\u6cdb\u578b\u7f16\u7a0b\u4e2d\u7684\u5b9e\u7528\u4ef7\u503c\u3002", "method": "\u4f7f\u7528\u6982\u5ff5\u7f16\u7a0b\u6280\u672f\uff0c\u6784\u5efa\u7b80\u5355\u7c7b\u578b\u7cfb\u7edf\u6765\u6d88\u9664\u7a84\u5316\u8f6c\u6362\u5e76\u63d0\u4f9b\u8303\u56f4\u68c0\u67e5\uff0c\u901a\u8fc7\u6982\u5ff5\u5b9e\u73b0\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\u7cfb\u7edf\u6269\u5c55\uff0c\u5229\u7528\u7edf\u4e00\u7b26\u53f7\u3001lambda\u3001\u53ef\u53d8\u6a21\u677f\u7b49C++\u7279\u6027\u3002", "result": "\u5f00\u53d1\u51fa\u65e0\u5197\u4f59\u7b26\u53f7\u6216\u8fd0\u884c\u65f6\u5f00\u9500\u7684\u7c7b\u578b\u7cfb\u7edf\uff0c\u6210\u529f\u5c55\u793a\u4e86\u6982\u5ff5\u5728\u6cdb\u578b\u7f16\u7a0b\u4e2d\u7684\u5b9e\u7528\u6027\uff0c\u9a8c\u8bc1\u4e86\u6982\u5ff5\u4f5c\u4e3aC++\u6cdb\u578b\u7f16\u7a0b\u6838\u5fc3\u7ec4\u4ef6\u7684\u6709\u6548\u6027\u3002", "conclusion": "\u6982\u5ff5\u662fC++\u6cdb\u578b\u7f16\u7a0b\u7684\u91cd\u8981\u7ec4\u6210\u90e8\u5206\uff0c\u800c\u975e\u5b64\u7acb\u5b50\u8bed\u8a00\uff0c\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u7c7b\u578b\u7ea6\u675f\u673a\u5236\uff0c\u652f\u6301\u901a\u7528\u7f16\u7a0b\u548c\u6cdb\u578b\u7f16\u7a0b\u7684\u7edf\u4e00\uff0c\u662fC++\u7c7b\u578b\u7cfb\u7edf\u7684\u5173\u952e\u6269\u5c55\u3002"}}
{"id": "2510.08873", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.08873", "abs": "https://arxiv.org/abs/2510.08873", "authors": ["Haoran Jin", "Jirong Yang", "Yunpeng Liu", "Barry Lyu", "Kangqi Zhang", "Nathaniel Bleier"], "title": "Mozart: A Chiplet Ecosystem-Accelerator Codesign Framework for Composable Bespoke Application Specific Integrated Circuits", "comment": null, "summary": "Modern AI acceleration faces a fundamental challenge: conventional\nassumptions about memory requirements, batching effectiveness, and\nlatency-throughput tradeoffs are systemwide generalizations that ignore the\nheterogeneous computational patterns of individual neural network operators.\nHowever, going towards network-level customization and operator-level\nheterogeneity incur substantial Non-Recurring Engineering (NRE) costs. While\nchiplet-based approaches have been proposed to amortize NRE costs, reuse\nopportunities remain limited without carefully identifying which chiplets are\ntruly necessary. This paper introduces Mozart, a chiplet ecosystem and\naccelerator codesign framework that systematically constructs low cost bespoke\napplication-specific integrated circuits (BASICs). BASICs leverage\noperator-level disaggregation to explore chiplet and memory heterogeneity,\ntensor fusion, and tensor parallelism, with place-and-route validation ensuring\nphysical implementability. The framework also enables constraint-aware\nsystem-level optimization across deployment contexts ranging from datacenter\ninference serving to edge computing in autonomous vehicles. The evaluation\nconfirms that with just 8 strategically selected chiplets, Mozart-generated\ncomposite BASICs achieve 43.5%, 25.4%, 67.7%, and 78.8% reductions in energy,\nenergy-cost product, energy-delay product (EDP), and energy-delay-cost product\ncompared to traditional homogeneous accelerators. For datacenter LLM serving,\nMozart achieves 15-19% energy reduction and 35-39% energy-cost improvement. In\nspeculative decoding, Mozart delivers throughput improvements of 24.6-58.6%\nwhile reducing energy consumption by 38.6-45.6%. For autonomous vehicle\nperception, Mozart reduces energy-cost by 25.54% and energy by 10.53% under\nreal-time constraints.", "AI": {"tldr": "Mozart\u662f\u4e00\u4e2a\u82af\u7247\u751f\u6001\u7cfb\u7edf\u548c\u52a0\u901f\u5668\u534f\u540c\u8bbe\u8ba1\u6846\u67b6\uff0c\u901a\u8fc7\u7b97\u5b50\u7ea7\u89e3\u8026\u3001\u82af\u7247\u5f02\u6784\u6027\u548c\u5185\u5b58\u4f18\u5316\uff0c\u6784\u5efa\u4f4e\u6210\u672c\u5b9a\u5236ASIC\u82af\u7247\uff0c\u663e\u8457\u63d0\u5347\u80fd\u6548\u548c\u6027\u80fd\u3002", "motivation": "\u4f20\u7edfAI\u52a0\u901f\u5668\u5047\u8bbe\u5b58\u5728\u5185\u5b58\u9700\u6c42\u3001\u6279\u5904\u7406\u6548\u679c\u548c\u5ef6\u8fdf-\u541e\u5410\u91cf\u6743\u8861\u7684\u7cfb\u7edf\u7ea7\u6cdb\u5316\u95ee\u9898\uff0c\u5ffd\u7565\u4e86\u795e\u7ecf\u7f51\u7edc\u7b97\u5b50\u7684\u5f02\u6784\u8ba1\u7b97\u6a21\u5f0f\u3002\u82af\u7247\u7ea7\u5b9a\u5236\u867d\u7136\u80fd\u89e3\u51b3\u6b64\u95ee\u9898\uff0c\u4f46\u9762\u4e34\u9ad8\u6602\u7684\u975e\u91cd\u590d\u6027\u5de5\u7a0b\u6210\u672c\u3002", "method": "\u91c7\u7528\u7b97\u5b50\u7ea7\u89e3\u8026\u65b9\u6cd5\u63a2\u7d22\u82af\u7247\u548c\u5185\u5b58\u5f02\u6784\u6027\u3001\u5f20\u91cf\u878d\u5408\u548c\u5f20\u91cf\u5e76\u884c\uff0c\u901a\u8fc7\u5e03\u5c40\u5e03\u7ebf\u9a8c\u8bc1\u786e\u4fdd\u7269\u7406\u53ef\u5b9e\u73b0\u6027\u3002\u6846\u67b6\u652f\u6301\u4ece\u6570\u636e\u4e2d\u5fc3\u5230\u8fb9\u7f18\u8ba1\u7b97\u7b49\u591a\u79cd\u90e8\u7f72\u573a\u666f\u7684\u7ea6\u675f\u611f\u77e5\u7cfb\u7edf\u7ea7\u4f18\u5316\u3002", "result": "\u4ec5\u4f7f\u75288\u4e2a\u6218\u7565\u6027\u9009\u62e9\u7684\u82af\u7247\uff0cMozart\u751f\u6210\u7684\u590d\u5408BASIC\u82af\u7247\u76f8\u6bd4\u4f20\u7edf\u540c\u6784\u52a0\u901f\u5668\uff0c\u5728\u80fd\u8017\u3001\u80fd\u8017-\u6210\u672c\u4e58\u79ef\u3001\u80fd\u8017-\u5ef6\u8fdf\u4e58\u79ef\u548c\u80fd\u8017-\u5ef6\u8fdf-\u6210\u672c\u4e58\u79ef\u65b9\u9762\u5206\u522b\u964d\u4f4e43.5%\u300125.4%\u300167.7%\u548c78.8%\u3002\u5728\u6570\u636e\u4e2d\u5fc3LLM\u670d\u52a1\u4e2d\u80fd\u8017\u964d\u4f4e15-19%\uff0c\u80fd\u8017-\u6210\u672c\u6539\u558435-39%\u3002", "conclusion": "Mozart\u6846\u67b6\u901a\u8fc7\u7cfb\u7edf\u5316\u7684\u82af\u7247\u751f\u6001\u7cfb\u7edf\u8bbe\u8ba1\uff0c\u6709\u6548\u89e3\u51b3\u4e86AI\u52a0\u901f\u4e2d\u7684\u5f02\u6784\u8ba1\u7b97\u6311\u6218\uff0c\u5728\u4fdd\u6301\u4f4e\u6210\u672c\u7684\u540c\u65f6\u663e\u8457\u63d0\u5347\u4e86\u80fd\u6548\u548c\u6027\u80fd\u8868\u73b0\u3002"}}
{"id": "2510.08842", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.08842", "abs": "https://arxiv.org/abs/2510.08842", "authors": ["Molang Wu", "Zhao Zhang"], "title": "Maple: A Multi-agent System for Portable Deep Learning across Clusters", "comment": null, "summary": "Training deep learning (DL) models across Graphics Processing Unit (GPU)\nclusters is technically challenging. One aspect is that users have to compose\ncommand lines to adapt to the heterogeneous launchers, schedulers, affinity\noptions, DL framework arguments, and environment variables. Composing correct\ncommand lines is error-prone and can easily frustrate users, impeding research\nor wasting resources. In this work, we present Maple, a multi-agent system that\ngenerates correct DL command lines with users' natural language input. Maple\nconsists of four agents with the functionalities of information extraction,\ntemplate retrieval, command line verification, and error correction. We\nevaluate Maple on nine GPU clusters across national computing centers in the\nU.S., five representative deep learning model families, and four commonly used\nparallel DL training paradigms. Our experiments also cover schedulers of SLURM\nand PBS and heterogeneous architectures, such as NVIDIA A100/H200 GPUs and\nIntel Max series GPUs. Maple achieves 92.0% accuracy in generating command\nlines across the 567 test cases. Leverage multiple language models with an\naggregated size of 10B parameters, Maple delivers comparable performance to the\nstate-of-the-art models of GPT-5, Claude, and Gemini. Together, these results\nhighlight Maple's practical value in enabling portable and scalable distributed\nDL across heterogeneous HPC environments.", "AI": {"tldr": "Maple\u662f\u4e00\u4e2a\u591a\u4ee3\u7406\u7cfb\u7edf\uff0c\u80fd\u591f\u901a\u8fc7\u7528\u6237\u81ea\u7136\u8bed\u8a00\u8f93\u5165\u751f\u6210\u6b63\u786e\u7684\u6df1\u5ea6\u5b66\u4e60\u547d\u4ee4\u884c\uff0c\u89e3\u51b3\u4e86\u5728\u5f02\u6784GPU\u96c6\u7fa4\u4e0a\u8bad\u7ec3\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u65f6\u547d\u4ee4\u884c\u914d\u7f6e\u7684\u590d\u6742\u6027\u3002", "motivation": "\u5728GPU\u96c6\u7fa4\u4e0a\u8bad\u7ec3\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u65f6\uff0c\u7528\u6237\u9700\u8981\u9002\u5e94\u5f02\u6784\u542f\u52a8\u5668\u3001\u8c03\u5ea6\u5668\u3001\u4eb2\u548c\u6027\u9009\u9879\u3001DL\u6846\u67b6\u53c2\u6570\u548c\u73af\u5883\u53d8\u91cf\uff0c\u624b\u52a8\u7ec4\u5408\u547d\u4ee4\u884c\u5bb9\u6613\u51fa\u9519\u4e14\u4ee4\u4eba\u6cae\u4e27\uff0c\u963b\u788d\u7814\u7a76\u8fdb\u5c55\u5e76\u6d6a\u8d39\u8d44\u6e90\u3002", "method": "Maple\u91c7\u7528\u56db\u4ee3\u7406\u7cfb\u7edf\u67b6\u6784\uff0c\u5305\u62ec\u4fe1\u606f\u63d0\u53d6\u3001\u6a21\u677f\u68c0\u7d22\u3001\u547d\u4ee4\u884c\u9a8c\u8bc1\u548c\u9519\u8bef\u7ea0\u6b63\u529f\u80fd\uff0c\u5229\u7528\u591a\u4e2a\u603b\u53c2\u6570\u8fbe10B\u7684\u8bed\u8a00\u6a21\u578b\u3002", "result": "\u57289\u4e2a\u7f8e\u56fd\u56fd\u5bb6\u8ba1\u7b97\u4e2d\u5fc3\u7684GPU\u96c6\u7fa4\u30015\u4e2a\u4ee3\u8868\u6027\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u5bb6\u65cf\u548c4\u79cd\u5e38\u7528\u5e76\u884c\u8bad\u7ec3\u8303\u5f0f\u4e0a\u8fdb\u884c\u6d4b\u8bd5\uff0cMaple\u5728567\u4e2a\u6d4b\u8bd5\u6848\u4f8b\u4e2d\u5b9e\u73b0\u4e8692.0%\u7684\u51c6\u786e\u7387\uff0c\u6027\u80fd\u4e0eGPT-5\u3001Claude\u548cGemini\u7b49\u6700\u5148\u8fdb\u6a21\u578b\u76f8\u5f53\u3002", "conclusion": "Maple\u5728\u5f02\u6784\u9ad8\u6027\u80fd\u8ba1\u7b97\u73af\u5883\u4e2d\u5b9e\u73b0\u4e86\u53ef\u79fb\u690d\u548c\u53ef\u6269\u5c55\u7684\u5206\u5e03\u5f0f\u6df1\u5ea6\u5b66\u4e60\u8bad\u7ec3\uff0c\u5177\u6709\u91cd\u8981\u7684\u5b9e\u7528\u4ef7\u503c\u3002"}}
{"id": "2510.09591", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2510.09591", "abs": "https://arxiv.org/abs/2510.09591", "authors": ["Saad Ahmed Bazaz", "Mirza Omer Beg"], "title": "A Multilingual Python Programming Language", "comment": "For project homepage, see https://universalpython.github.io/", "summary": "All widely used and useful programming languages have a common problem. They\nrestrict entry on the basis of knowledge of the English language. The lack of\nknowledge of English poses a major hurdle to many newcomers who do not have the\nresources, in terms of time and money, to learn the English language. Studies\nshow that people learn better in their own language. Therefore, we propose a\nlanguage transpiler built on top of the Python programming language, called\nUniversalPython, which allows one to write Python in their own human language.\nWe demonstrate the ability to create an \"Urdu Python\" with this transpiler. In\nthe future, we aim to scale the language to encapsulate more human languages to\nincrease the availability of programming. The source code for this transpiler\nis open-source, and available at\nhttps://github.com/universalpython/universalpython", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u4e2a\u57fa\u4e8ePython\u7684\u901a\u7528\u8bed\u8a00\u8f6c\u8bd1\u5668UniversalPython\uff0c\u5141\u8bb8\u7528\u6237\u4f7f\u7528\u81ea\u5df1\u7684\u6bcd\u8bed\u7f16\u5199Python\u4ee3\u7801\uff0c\u65e8\u5728\u964d\u4f4e\u7f16\u7a0b\u8bed\u8a00\u5bf9\u82f1\u8bed\u77e5\u8bc6\u7684\u4f9d\u8d56\u3002", "motivation": "\u73b0\u6709\u7f16\u7a0b\u8bed\u8a00\u90fd\u8981\u6c42\u82f1\u8bed\u77e5\u8bc6\uff0c\u8fd9\u5bf9\u8bb8\u591a\u6ca1\u6709\u65f6\u95f4\u548c\u8d44\u6e90\u5b66\u4e60\u82f1\u8bed\u7684\u65b0\u624b\u6784\u6210\u4e86\u969c\u788d\u3002\u7814\u7a76\u8868\u660e\u4eba\u4eec\u7528\u6bcd\u8bed\u5b66\u4e60\u6548\u679c\u66f4\u597d\u3002", "method": "\u6784\u5efa\u4e00\u4e2a\u57fa\u4e8ePython\u7684\u8bed\u8a00\u8f6c\u8bd1\u5668\uff0c\u80fd\u591f\u5c06\u7528\u5404\u79cd\u4eba\u7c7b\u8bed\u8a00\u7f16\u5199\u7684\u4ee3\u7801\u8f6c\u6362\u4e3a\u6807\u51c6Python\u4ee3\u7801\uff0c\u5e76\u4ee5\u4e4c\u5c14\u90fd\u8bedPython\u4e3a\u4f8b\u8fdb\u884c\u6f14\u793a\u3002", "result": "\u6210\u529f\u5f00\u53d1\u4e86\u5f00\u6e90\u8f6c\u8bd1\u5668\uff0c\u80fd\u591f\u521b\u5efa\"\u4e4c\u5c14\u90fd\u8bedPython\"\u7248\u672c\uff0c\u8bc1\u660e\u4e86\u8be5\u65b9\u6cd5\u7684\u53ef\u884c\u6027\u3002", "conclusion": "\u8be5\u8f6c\u8bd1\u5668\u6709\u6f5c\u529b\u6269\u5c55\u5230\u66f4\u591a\u4eba\u7c7b\u8bed\u8a00\uff0c\u4ece\u800c\u589e\u52a0\u7f16\u7a0b\u7684\u666e\u53ca\u6027\uff0c\u4ee3\u7801\u5df2\u5728GitHub\u4e0a\u5f00\u6e90\u3002"}}
{"id": "2510.08940", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.08940", "abs": "https://arxiv.org/abs/2510.08940", "authors": ["Abel Beyene", "Zhongpan Wu", "Yunus Dawji", "Karim Hammad", "Ebrahim Ghafar-Zadeh", "Sebastian Magierowski"], "title": "A High-Efficiency SoC for Next-Generation Mobile DNA Sequencing", "comment": null, "summary": "Hand-sized Deoxyribonucleic acid (DNA) sequencing machines are of growing\nimportance in several life sciences fields as their small footprints enable a\nbroader range of use cases than their larger, stationary counterparts. However,\nas currently designed, they lack sufficient embedded computing to process the\nlarge volume of measurements generated by their internal sensory system. As a\nconsequence, they rely on external devices for additional processing\ncapability. This dependence on external processing places a significant\ncommunication burden on the sequencer's embedded electronics. Moreover, it also\nprevents a truly mobile solution for sequencing in real-time. Anticipating\nnext-generation machines that include suitably advanced processing, we present\na System-on-Chip (SoC) fabricated in 22-nm complementary metal-oxide\nsemiconductor (CMOS). Our design, based on a general-purpose reduced\ninstruction set computing (RISC-V) core, also includes accelerators for DNA\ndetection that allow our system to demonstrate a 13X performance improvement\nover commercial embedded multicore processors combined with a near 3000X boost\nin energy efficiency.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8eRISC-V\u7684SoC\u8bbe\u8ba1\uff0c\u7528\u4e8e\u624b\u6301DNA\u6d4b\u5e8f\u673a\uff0c\u901a\u8fc7\u4e13\u7528\u52a0\u901f\u5668\u5b9e\u73b0\u4e8613\u500d\u6027\u80fd\u63d0\u5347\u548c\u8fd13000\u500d\u80fd\u6548\u63d0\u5347\u3002", "motivation": "\u5f53\u524d\u624b\u6301DNA\u6d4b\u5e8f\u673a\u7f3a\u4e4f\u8db3\u591f\u7684\u5d4c\u5165\u5f0f\u8ba1\u7b97\u80fd\u529b\uff0c\u4f9d\u8d56\u5916\u90e8\u8bbe\u5907\u5904\u7406\u5927\u91cf\u6d4b\u91cf\u6570\u636e\uff0c\u8fd9\u9650\u5236\u4e86\u8bbe\u5907\u7684\u79fb\u52a8\u6027\u548c\u5b9e\u65f6\u6d4b\u5e8f\u80fd\u529b\u3002", "method": "\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u57fa\u4e8eRISC-V\u6838\u5fc3\u768422nm CMOS SoC\uff0c\u96c6\u6210\u4e86DNA\u68c0\u6d4b\u4e13\u7528\u52a0\u901f\u5668\u3002", "result": "\u76f8\u6bd4\u5546\u7528\u5d4c\u5165\u5f0f\u591a\u6838\u5904\u7406\u5668\uff0c\u7cfb\u7edf\u6027\u80fd\u63d0\u534713\u500d\uff0c\u80fd\u6548\u63d0\u5347\u8fd13000\u500d\u3002", "conclusion": "\u8be5SoC\u8bbe\u8ba1\u4e3a\u4e0b\u4e00\u4ee3\u624b\u6301DNA\u6d4b\u5e8f\u673a\u63d0\u4f9b\u4e86\u9ad8\u6027\u80fd\u3001\u9ad8\u80fd\u6548\u7684\u5d4c\u5165\u5f0f\u5904\u7406\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2510.08874", "categories": ["cs.DC", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.08874", "abs": "https://arxiv.org/abs/2510.08874", "authors": ["Benjamin Brock", "Renato Golin"], "title": "Slicing Is All You Need: Towards A Universal One-Sided Algorithm for Distributed Matrix Multiplication", "comment": null, "summary": "Many important applications across science, data analytics, and AI workloads\ndepend on distributed matrix multiplication. Prior work has developed a large\narray of algorithms suitable for different problem sizes and partitionings\nincluding 1D, 2D, 1.5D, and 2.5D algorithms. A limitation of current work is\nthat existing algorithms are limited to a subset of partitionings. Multiple\nalgorithm implementations are required to support the full space of possible\npartitionings. If no algorithm implementation is available for a particular set\nof partitionings, one or more operands must be redistributed, increasing\ncommunication costs. This paper presents a universal one-sided algorithm for\ndistributed matrix multiplication that supports all combinations of\npartitionings and replication factors. Our algorithm uses slicing (index\narithmetic) to compute the sets of overlapping tiles that must be multiplied\ntogether. This list of local matrix multiplies can then either be executed\ndirectly, or reordered and lowered to an optimized IR to maximize overlap. We\nimplement our algorithm using a high-level C++-based PGAS programming framework\nthat performs direct GPU-to-GPU communication using intra-node interconnects.\nWe evaluate performance for a wide variety of partitionings and replication\nfactors, finding that our work is competitive with PyTorch DTensor, a highly\noptimized distributed tensor library targeting AI models.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u901a\u7528\u7684\u5355\u8fb9\u5206\u5e03\u5f0f\u77e9\u9635\u4e58\u6cd5\u7b97\u6cd5\uff0c\u652f\u6301\u6240\u6709\u5206\u533a\u548c\u590d\u5236\u56e0\u5b50\u7ec4\u5408\uff0c\u901a\u8fc7\u5207\u7247\u8ba1\u7b97\u91cd\u53e0\u74e6\u7247\u96c6\u5408\uff0c\u6027\u80fd\u4e0ePyTorch DTensor\u76f8\u5f53\u3002", "motivation": "\u73b0\u6709\u5206\u5e03\u5f0f\u77e9\u9635\u4e58\u6cd5\u7b97\u6cd5\u4ec5\u652f\u6301\u90e8\u5206\u5206\u533a\u65b9\u5f0f\uff0c\u9700\u8981\u591a\u4e2a\u7b97\u6cd5\u5b9e\u73b0\u6765\u8986\u76d6\u6240\u6709\u53ef\u80fd\u7684\u5206\u533a\u7ec4\u5408\uff0c\u5426\u5219\u9700\u8981\u91cd\u65b0\u5206\u5e03\u64cd\u4f5c\u6570\u589e\u52a0\u901a\u4fe1\u6210\u672c\u3002", "method": "\u4f7f\u7528\u5207\u7247\uff08\u7d22\u5f15\u7b97\u672f\uff09\u8ba1\u7b97\u9700\u8981\u76f8\u4e58\u7684\u91cd\u53e0\u74e6\u7247\u96c6\u5408\uff0c\u7136\u540e\u76f4\u63a5\u6267\u884c\u6216\u91cd\u65b0\u6392\u5e8f\u5e76\u964d\u4f4e\u5230\u4f18\u5316IR\u4ee5\u6700\u5927\u5316\u91cd\u53e0\u3002\u57fa\u4e8e\u9ad8\u7ea7C++ PGAS\u7f16\u7a0b\u6846\u67b6\u5b9e\u73b0\uff0c\u4f7f\u7528\u8282\u70b9\u5185\u4e92\u8fde\u8fdb\u884cGPU\u5230GPU\u76f4\u63a5\u901a\u4fe1\u3002", "result": "\u5728\u5404\u79cd\u5206\u533a\u548c\u590d\u5236\u56e0\u5b50\u4e0b\u8bc4\u4f30\u6027\u80fd\uff0c\u53d1\u73b0\u4e0e\u9488\u5bf9AI\u6a21\u578b\u4f18\u5316\u7684PyTorch DTensor\u6027\u80fd\u76f8\u5f53\u3002", "conclusion": "\u63d0\u51fa\u7684\u901a\u7528\u5355\u8fb9\u7b97\u6cd5\u80fd\u591f\u652f\u6301\u6240\u6709\u5206\u533a\u548c\u590d\u5236\u56e0\u5b50\u7ec4\u5408\uff0c\u89e3\u51b3\u4e86\u73b0\u6709\u7b97\u6cd5\u53ea\u80fd\u652f\u6301\u90e8\u5206\u5206\u533a\u65b9\u5f0f\u7684\u95ee\u9898\uff0c\u6027\u80fd\u8868\u73b0\u4f18\u5f02\u3002"}}
{"id": "2510.09010", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2510.09010", "abs": "https://arxiv.org/abs/2510.09010", "authors": ["Yipu Zhang", "Chaofang Ma", "Jinming Ge", "Lin Jiang", "Jiang Xu", "Wei Zhang"], "title": "HERO: Hardware-Efficient RL-based Optimization Framework for NeRF Quantization", "comment": "Accepted by ASPDAC 2026", "summary": "Neural Radiance Field (NeRF) has emerged as a promising 3D reconstruction\nmethod, delivering high-quality results for AR/VR applications. While\nquantization methods and hardware accelerators have been proposed to enhance\nNeRF's computational efficiency, existing approaches face crucial limitations.\nCurrent quantization methods operate without considering hardware architecture,\nresulting in sub-optimal solutions within the vast design space encompassing\naccuracy, latency, and model size. Additionally, existing NeRF accelerators\nheavily rely on human experts to explore this design space, making the\noptimization process time-consuming, inefficient, and unlikely to discover\noptimal solutions. To address these challenges, we introduce HERO, a\nreinforcement learning framework performing hardware-aware quantization for\nNeRF. Our framework integrates a NeRF accelerator simulator to generate\nreal-time hardware feedback, enabling fully automated adaptation to hardware\nconstraints. Experimental results demonstrate that HERO achieves 1.31-1.33\n$\\times$ better latency, 1.29-1.33 $\\times$ improved cost efficiency, and a\nmore compact model size compared to CAQ, a previous state-of-the-art NeRF\nquantization framework. These results validate our framework's capability to\neffectively navigate the complex design space between hardware and algorithm\nrequirements, discovering superior quantization policies for NeRF\nimplementation. Code is available at https://github.com/ypzhng/HERO.", "AI": {"tldr": "HERO\u662f\u4e00\u4e2a\u57fa\u4e8e\u5f3a\u5316\u5b66\u4e60\u7684\u786c\u4ef6\u611f\u77e5\u91cf\u5316\u6846\u67b6\uff0c\u7528\u4e8e\u4f18\u5316NeRF\u76843D\u91cd\u5efa\u6027\u80fd\uff0c\u5728\u5ef6\u8fdf\u3001\u6210\u672c\u6548\u7387\u548c\u6a21\u578b\u5927\u5c0f\u65b9\u9762\u5747\u4f18\u4e8e\u73b0\u6709\u65b9\u6cd5\u3002", "motivation": "\u73b0\u6709NeRF\u91cf\u5316\u65b9\u6cd5\u672a\u8003\u8651\u786c\u4ef6\u67b6\u6784\uff0c\u5bfc\u81f4\u5728\u7cbe\u5ea6\u3001\u5ef6\u8fdf\u548c\u6a21\u578b\u5927\u5c0f\u7684\u8bbe\u8ba1\u7a7a\u95f4\u4e2d\u65e0\u6cd5\u627e\u5230\u6700\u4f18\u89e3\uff1b\u800c\u73b0\u6709\u52a0\u901f\u5668\u4f9d\u8d56\u4eba\u5de5\u63a2\u7d22\u8bbe\u8ba1\u7a7a\u95f4\uff0c\u6548\u7387\u4f4e\u4e0b\u3002", "method": "\u4f7f\u7528\u5f3a\u5316\u5b66\u4e60\u6846\u67b6\u7ed3\u5408NeRF\u52a0\u901f\u5668\u6a21\u62df\u5668\uff0c\u5b9e\u65f6\u751f\u6210\u786c\u4ef6\u53cd\u9988\uff0c\u5b9e\u73b0\u5b8c\u5168\u81ea\u52a8\u5316\u7684\u786c\u4ef6\u7ea6\u675f\u9002\u5e94\u3002", "result": "\u76f8\u6bd4\u73b0\u6709\u6700\u4f18\u65b9\u6cd5CAQ\uff0cHERO\u5b9e\u73b0\u4e861.31-1.33\u500d\u7684\u5ef6\u8fdf\u6539\u5584\u30011.29-1.33\u500d\u7684\u6210\u672c\u6548\u7387\u63d0\u5347\uff0c\u4ee5\u53ca\u66f4\u7d27\u51d1\u7684\u6a21\u578b\u5927\u5c0f\u3002", "conclusion": "HERO\u80fd\u591f\u6709\u6548\u63a2\u7d22\u786c\u4ef6\u4e0e\u7b97\u6cd5\u9700\u6c42\u4e4b\u95f4\u7684\u590d\u6742\u8bbe\u8ba1\u7a7a\u95f4\uff0c\u4e3aNeRF\u5b9e\u73b0\u53d1\u73b0\u66f4\u4f18\u7684\u91cf\u5316\u7b56\u7565\u3002"}}
{"id": "2510.09163", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.09163", "abs": "https://arxiv.org/abs/2510.09163", "authors": ["Alessandro Ottaviano", "Andrino Meli", "Paul Scheffler", "Giovanni Bambini", "Robert Balas", "Davide Rossi", "Andrea Bartolini", "Luca Benini"], "title": "Co-designing a Programmable RISC-V Accelerator for MPC-based Energy and Thermal Management of Many-Core HPC Processors", "comment": "18 pages, 16 figures, 1 table", "summary": "Managing energy and thermal profiles is critical for many-core HPC processors\nwith hundreds of application-class processing elements (PEs). Advanced model\npredictive control (MPC) delivers state-of-the-art performance but requires\nsolving an online optimization problem over a thousand times per second (1 kHz\ncontrol bandwidth), with computational and memory demands scaling with PE\ncount. Traditional MPC approaches execute the controller on the PEs, but\noperating system overheads create jitter and limit control bandwidth. Running\nMPC on dedicated on-chip controllers enables fast, deterministic control but\nraises concerns about area and power overhead. In this work, we tackle these\nchallenges by proposing a hardware-software codesign of a lightweight MPC\ncontroller, based on an operator-splitting quadratic programming solver and an\nembedded multi-core RISC-V controller. Key innovations include pruning weak\nthermal couplings to reduce model memory and ahead-of-time scheduling for\nefficient parallel execution of sparse triangular systems arising from the\noptimization problem. The proposed controller achieves sub-millisecond latency\nwhen controlling 144 PEs at 500 MHz, delivering 33x lower latency and 7.9x\nhigher energy efficiency than a single-core baseline. Operating within a\ncompact less than 1 MiB memory footprint, it consumes as little as 325 mW while\noccupying less than 1.5% of a typical HPC processor's die area.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u8f7b\u91cf\u7ea7MPC\u63a7\u5236\u5668\u7684\u8f6f\u786c\u4ef6\u534f\u540c\u8bbe\u8ba1\uff0c\u7528\u4e8e\u591a\u6838HPC\u5904\u7406\u5668\u7684\u80fd\u91cf\u548c\u70ed\u7ba1\u7406\uff0c\u901a\u8fc7\u7b97\u5b50\u5206\u88c2\u4e8c\u6b21\u89c4\u5212\u6c42\u89e3\u5668\u548c\u5d4c\u5165\u5f0fRISC-V\u63a7\u5236\u5668\u5b9e\u73b0\u9ad8\u6548\u63a7\u5236\u3002", "motivation": "\u4f20\u7edfMPC\u65b9\u6cd5\u5728PE\u4e0a\u6267\u884c\u63a7\u5236\u5668\u4f1a\u56e0\u64cd\u4f5c\u7cfb\u7edf\u5f00\u9500\u4ea7\u751f\u6296\u52a8\u5e76\u9650\u5236\u63a7\u5236\u5e26\u5bbd\uff0c\u800c\u4e13\u7528\u7247\u4e0a\u63a7\u5236\u5668\u53c8\u9762\u4e34\u9762\u79ef\u548c\u529f\u8017\u5f00\u9500\u7684\u62c5\u5fe7\u3002", "method": "\u57fa\u4e8e\u7b97\u5b50\u5206\u88c2\u4e8c\u6b21\u89c4\u5212\u6c42\u89e3\u5668\u548c\u5d4c\u5165\u5f0f\u591a\u6838RISC-V\u63a7\u5236\u5668\uff0c\u901a\u8fc7\u526a\u679d\u5f31\u70ed\u8026\u5408\u51cf\u5c11\u6a21\u578b\u5185\u5b58\uff0c\u5e76\u91c7\u7528\u63d0\u524d\u8c03\u5ea6\u4f18\u5316\u7a00\u758f\u4e09\u89d2\u7cfb\u7edf\u7684\u5e76\u884c\u6267\u884c\u3002", "result": "\u5728500MHz\u9891\u7387\u4e0b\u63a7\u5236144\u4e2aPE\u65f6\u5b9e\u73b0\u4e9a\u6beb\u79d2\u7ea7\u5ef6\u8fdf\uff0c\u6bd4\u5355\u6838\u57fa\u7ebf\u5ef6\u8fdf\u964d\u4f4e33\u500d\uff0c\u80fd\u6548\u63d0\u9ad87.9\u500d\uff0c\u5185\u5b58\u5360\u7528\u5c0f\u4e8e1MiB\uff0c\u529f\u8017\u4ec5325mW\uff0c\u5360\u7528\u5178\u578bHPC\u5904\u7406\u5668\u82af\u7247\u9762\u79ef\u4e0d\u52301.5%\u3002", "conclusion": "\u8be5\u786c\u4ef6-\u8f6f\u4ef6\u534f\u540c\u8bbe\u8ba1\u65b9\u6cd5\u6210\u529f\u89e3\u51b3\u4e86MPC\u63a7\u5236\u5668\u5728\u9762\u79ef\u3001\u529f\u8017\u548c\u6027\u80fd\u65b9\u9762\u7684\u6311\u6218\uff0c\u4e3a\u591a\u6838HPC\u5904\u7406\u5668\u7684\u70ed\u7ba1\u7406\u63d0\u4f9b\u4e86\u9ad8\u6548\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2510.09339", "categories": ["cs.AR", "cs.ET"], "pdf": "https://arxiv.org/pdf/2510.09339", "abs": "https://arxiv.org/abs/2510.09339", "authors": ["Sebastian Magierowski", "Zhongpan Wu", "Abel Beyene", "Karim Hammad"], "title": "Sequencing on Silicon: AI SoC Design for Mobile Genomics at the Edge", "comment": null, "summary": "Miniature DNA sequencing hardware has begun to succeed in mobile contexts,\ndriving demand for efficient machine learning at the edge. This domain\nleverages deep learning techniques familiar from speech and time-series\nanalysis for both low-level signal processing and high-level genomic\ninterpretation. Unlike audio, however, nanopore sequencing presents raw data\nrates over 100X higher, requiring more aggressive compute and memory handling.\nIn this paper, we present a CMOS system-on-chip (SoC) designed for mobile\ngenetic analysis. Our approach combines a multi-core RISC-V processor with\ntightly coupled accelerators for deep learning and bioinformatics. A\nhardware/software co-design strategy enables energy-efficient operation across\na heterogeneous compute fabric, targeting real-time, on-device genome analysis.\nThis work exemplifies the integration of deep learning, edge computing, and\ndomain-specific hardware to advance next-generation mobile genomics.", "AI": {"tldr": "\u5f00\u53d1\u4e86\u4e00\u4e2a\u7528\u4e8e\u79fb\u52a8\u57fa\u56e0\u5206\u6790\u7684CMOS\u7cfb\u7edf\u82af\u7247\uff0c\u7ed3\u5408\u591a\u6838RISC-V\u5904\u7406\u5668\u548c\u6df1\u5ea6\u5b66\u4e60\u52a0\u901f\u5668\uff0c\u5b9e\u73b0\u5b9e\u65f6\u8bbe\u5907\u7aef\u57fa\u56e0\u7ec4\u5206\u6790\u3002", "motivation": "\u5fae\u578bDNA\u6d4b\u5e8f\u786c\u4ef6\u5728\u79fb\u52a8\u573a\u666f\u4e2d\u53d6\u5f97\u6210\u529f\uff0c\u4f46\u7eb3\u7c73\u5b54\u6d4b\u5e8f\u539f\u59cb\u6570\u636e\u901f\u7387\u6bd4\u97f3\u9891\u9ad8100\u500d\u4ee5\u4e0a\uff0c\u9700\u8981\u66f4\u9ad8\u6548\u7684\u8ba1\u7b97\u548c\u5185\u5b58\u5904\u7406\u3002", "method": "\u91c7\u7528\u786c\u4ef6/\u8f6f\u4ef6\u534f\u540c\u8bbe\u8ba1\u7b56\u7565\uff0c\u5c06\u591a\u6838RISC-V\u5904\u7406\u5668\u4e0e\u7d27\u5bc6\u8026\u5408\u7684\u6df1\u5ea6\u5b66\u4e60\u548c\u751f\u7269\u4fe1\u606f\u5b66\u52a0\u901f\u5668\u96c6\u6210\u5728CMOS\u7cfb\u7edf\u82af\u7247\u4e2d\u3002", "result": "\u5b9e\u73b0\u4e86\u8de8\u5f02\u6784\u8ba1\u7b97\u67b6\u6784\u7684\u80fd\u6548\u64cd\u4f5c\uff0c\u9488\u5bf9\u5b9e\u65f6\u8bbe\u5907\u7aef\u57fa\u56e0\u7ec4\u5206\u6790\u3002", "conclusion": "\u8fd9\u9879\u5de5\u4f5c\u5c55\u793a\u4e86\u6df1\u5ea6\u5b66\u4e60\u3001\u8fb9\u7f18\u8ba1\u7b97\u548c\u9886\u57df\u4e13\u7528\u786c\u4ef6\u96c6\u6210\u5982\u4f55\u63a8\u52a8\u4e0b\u4e00\u4ee3\u79fb\u52a8\u57fa\u56e0\u7ec4\u5b66\u53d1\u5c55\u3002"}}
