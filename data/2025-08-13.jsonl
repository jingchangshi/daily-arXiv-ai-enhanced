{"id": "2508.08396", "categories": ["cs.AR", "cs.DC"], "pdf": "https://arxiv.org/pdf/2508.08396", "abs": "https://arxiv.org/abs/2508.08396", "authors": ["Fanchen Kong", "Yunhao Deng", "Xiaoling Yi", "Ryan Antonio", "Marian Verhelst"], "title": "XDMA: A Distributed, Extensible DMA Architecture for Layout-Flexible Data Movements in Heterogeneous Multi-Accelerator SoCs", "comment": "4 pages, 6 figures, Proceeded by The 43rd IEEE International\n  Conference on Computer Design (ICCD 2025)", "summary": "As modern AI workloads increasingly rely on heterogeneous accelerators,\nensuring high-bandwidth and layout-flexible data movements between accelerator\nmemories has become a pressing challenge. Direct Memory Access (DMA) engines\npromise high bandwidth utilization for data movements but are typically optimal\nonly for contiguous memory access, thus requiring additional software loops for\ndata layout transformations. This, in turn, leads to excessive control overhead\nand underutilized on-chip interconnects. To overcome this inefficiency, we\npresent XDMA, a distributed and extensible DMA architecture that enables\nlayout-flexible data movements with high link utilization. We introduce three\nkey innovations: (1) a data streaming engine as XDMA Frontend, replacing\nsoftware address generators with hardware ones; (2) a distributed DMA\narchitecture that maximizes link utilization and separates configuration from\ndata transfer; (3) flexible plugins for XDMA enabling on-the-fly data\nmanipulation during data transfers. XDMA demonstrates up to 151.2x/8.2x higher\nlink utilization than software-based implementations in synthetic workloads and\nachieves 2.3x average speedup over accelerators with SoTA DMA in real-world\napplications. Our design incurs <2% area overhead over SoTA DMA solutions while\nconsuming 17% of system power. XDMA proves that co-optimizing memory access,\nlayout transformation, and interconnect protocols is key to unlocking\nheterogeneous multi-accelerator SoC performance."}
{"id": "2508.08457", "categories": ["cs.AR", "cs.ET", "C.1.3; B.3.1"], "pdf": "https://arxiv.org/pdf/2508.08457", "abs": "https://arxiv.org/abs/2508.08457", "authors": ["Ming-Yen Lee", "Faaiq Waqar", "Hanchen Yang", "Muhammed Ahosan Ul Karim", "Harsono Simka", "Shimeng Yu"], "title": "Architecting Long-Context LLM Acceleration with Packing-Prefetch Scheduler and Ultra-Large Capacity On-Chip Memories", "comment": "7 pages, 8 figures, 2 tables", "summary": "Long-context Large Language Model (LLM) inference faces increasing compute\nbottlenecks as attention calculations scale with context length, primarily due\nto the growing KV-cache transfer overhead that saturates High Bandwidth Memory\n(HBM). While prefetching techniques mitigate cache misses by fetching KV data\nin advance, their spatial and temporal benefits present new opportunities to\nexploit. This work proposes a packing-prefetch scheduling architecture with\nmonolithic 3D (M3D) back-end-of-line (BEOL) compatible embedded memories with\nultra-large on-chip capacity to accelerate long-context LLM inference. Our\noptimizations demonstrate 8.06x decode speedup and 1.83x overall latency\nreduction on Llama3.1-8B using TPUv6e-like hardware with additional 512MB BEOL\nmemories over the serial execution. Evaluations of multi-request workloads on\nTPU-like architectures show 1.7x-2.4x throughput improvement and 1.5x-2.4x HBM\nbandwidth reduction compared to packing-only methods on Llama3.1-8B and\nLlama3.1-70B models. With the co-design of packing, prefetching, and BEOL\nmemories, our approach alleviates HBM constraints and enables efficient\nlong-context LLM inference."}
{"id": "2508.08503", "categories": ["cs.AR", "cs.DB", "cs.PF"], "pdf": "https://arxiv.org/pdf/2508.08503", "abs": "https://arxiv.org/abs/2508.08503", "authors": ["Sabiha Tajdari", "Anastasia Ailamaki", "Sandhya Dwarkadas"], "title": "JSPIM: A Skew-Aware PIM Accelerator for High-Performance Databases Join and Select Operations", "comment": null, "summary": "Database applications are increasingly bottlenecked by memory bandwidth and\nlatency due to the memory wall and the limited scalability of DRAM. Join\nqueries, central to analytical workloads, require intensive memory access and\nare particularly vulnerable to inefficiencies in data movement. While\nProcessing-in-Memory (PIM) offers a promising solution, existing designs\ntypically reuse CPU-oriented join algorithms, limiting parallelism and\nincurring costly inter-chip communication. Additionally, data skew, a main\nchallenge in CPU-based joins, remains unresolved in current PIM architectures.\n  We introduce JSPIM, a PIM module that accelerates hash join and, by\nextension, corresponding select queries through algorithm-hardware co-design.\nJSPIM deploys parallel search engines within each subarray and redesigns hash\ntables to achieve O(1) lookups, fully exploiting PIM's fine-grained\nparallelism. To mitigate skew, our design integrates subarray-level parallelism\nwith rank-level processing, eliminating redundant off-chip transfers.\nEvaluations show JSPIM delivers 400x to 1000x speedup on join queries versus\nDuckDB. When paired with DuckDB for the full SSB benchmark, JSPIM achieves an\noverall 2.5x throughput improvement (individual query gains of 1.1x to 28x), at\njust a 7% data overhead and 2.1% per-rank PIM-enabled chip area increase."}
{"id": "2508.08822", "categories": ["cs.AR", "cs.AI", "cs.ET", "cs.PF"], "pdf": "https://arxiv.org/pdf/2508.08822", "abs": "https://arxiv.org/abs/2508.08822", "authors": ["Shady Agwa", "Yihan Pan", "Georgios Papandroulidakis", "Themis Prodromakis"], "title": "OISMA: On-the-fly In-memory Stochastic Multiplication Architecture for Matrix-Multiplication Workloads", "comment": "12 pages, 13 figures. This work has been submitted to the IEEE for\n  possible publication", "summary": "Artificial Intelligence models are currently driven by a significant\nup-scaling of their complexity, with massive matrix multiplication workloads\nrepresenting the major computational bottleneck. In-memory computing\narchitectures are proposed to avoid the Von Neumann bottleneck. However, both\ndigital/binary-based and analogue in-memory computing architectures suffer from\nvarious limitations, which significantly degrade the performance and energy\nefficiency gains. This work proposes OISMA, a novel in-memory computing\narchitecture that utilizes the computational simplicity of a quasi-stochastic\ncomputing domain (Bent-Pyramid system), while keeping the same efficiency,\nscalability, and productivity of digital memories. OISMA converts normal memory\nread operations into in-situ stochastic multiplication operations with a\nnegligible cost. An accumulation periphery then accumulates the output\nmultiplication bitstreams, achieving the matrix multiplication functionality.\nExtensive matrix multiplication benchmarking was conducted to analyze the\naccuracy of the Bent-Pyramid system, using matrix dimensions ranging from 4x4\nto 512x512. The accuracy results show a significant decrease in the average\nrelative Frobenius error, from 9.42% (for 4x4) to 1.81% (for 512x512), compared\nto 64-bit double precision floating-point format. A 1T1R OISMA array of 4 KB\ncapacity was implemented using a commercial 180nm technology node and in-house\nRRAM technology. At 50 MHz, OISMA achieves 0.891 TOPS/W and 3.98 GOPS/mm2 for\nenergy and area efficiency, respectively, occupying an effective computing area\nof 0.804241 mm2. Scaling OISMA from 180nm to 22nm technology shows a\nsignificant improvement of two orders of magnitude in energy efficiency and one\norder of magnitude in area efficiency, compared to dense matrix multiplication\nin-memory computing architectures."}
{"id": "2508.08430", "categories": ["cs.DC", "cs.AR", "cs.PF"], "pdf": "https://arxiv.org/pdf/2508.08430", "abs": "https://arxiv.org/abs/2508.08430", "authors": ["Abhinaba Chakraborty", "Wouter Tavernier", "Akis Kourtis", "Mario Pickavet", "Andreas Oikonomakis", "Didier Colle"], "title": "Profiling Concurrent Vision Inference Workloads on NVIDIA Jetson -- Extended", "comment": null, "summary": "The proliferation of IoT devices and advancements in network technologies\nhave intensified the demand for real-time data processing at the network edge.\nTo address these demands, low-power AI accelerators, particularly GPUs, are\nincreasingly deployed for inference tasks, enabling efficient computation while\nmitigating cloud-based systems' latency and bandwidth limitations. Despite\ntheir growing deployment, GPUs remain underutilised even in computationally\nintensive workloads. This underutilisation stems from the limited understanding\nof GPU resource sharing, particularly in edge computing scenarios. In this\nwork, we conduct a detailed analysis of both high- and low-level metrics,\nincluding GPU utilisation, memory usage, streaming multiprocessor (SM)\nutilisation, and tensor core usage, to identify bottlenecks and guide\nhardware-aware optimisations. By integrating traces from multiple profiling\ntools, we provide a comprehensive view of resource behaviour on NVIDIA Jetson\nedge devices under concurrent vision inference workloads. Our findings indicate\nthat while GPU utilisation can reach $100\\%$ under specific optimisations,\ncritical low-level resources, such as SMs and tensor cores, often operate only\nat $15\\%$ to $30\\%$ utilisation. Moreover, we observe that certain CPU-side\nevents, such as thread scheduling, context switching, etc., frequently emerge\nas bottlenecks, further constraining overall GPU performance. We provide\nseveral key observations for users of vision inference workloads on NVIDIA edge\ndevices."}
{"id": "2508.08430", "categories": ["cs.DC", "cs.AR", "cs.PF"], "pdf": "https://arxiv.org/pdf/2508.08430", "abs": "https://arxiv.org/abs/2508.08430", "authors": ["Abhinaba Chakraborty", "Wouter Tavernier", "Akis Kourtis", "Mario Pickavet", "Andreas Oikonomakis", "Didier Colle"], "title": "Profiling Concurrent Vision Inference Workloads on NVIDIA Jetson -- Extended", "comment": null, "summary": "The proliferation of IoT devices and advancements in network technologies\nhave intensified the demand for real-time data processing at the network edge.\nTo address these demands, low-power AI accelerators, particularly GPUs, are\nincreasingly deployed for inference tasks, enabling efficient computation while\nmitigating cloud-based systems' latency and bandwidth limitations. Despite\ntheir growing deployment, GPUs remain underutilised even in computationally\nintensive workloads. This underutilisation stems from the limited understanding\nof GPU resource sharing, particularly in edge computing scenarios. In this\nwork, we conduct a detailed analysis of both high- and low-level metrics,\nincluding GPU utilisation, memory usage, streaming multiprocessor (SM)\nutilisation, and tensor core usage, to identify bottlenecks and guide\nhardware-aware optimisations. By integrating traces from multiple profiling\ntools, we provide a comprehensive view of resource behaviour on NVIDIA Jetson\nedge devices under concurrent vision inference workloads. Our findings indicate\nthat while GPU utilisation can reach $100\\%$ under specific optimisations,\ncritical low-level resources, such as SMs and tensor cores, often operate only\nat $15\\%$ to $30\\%$ utilisation. Moreover, we observe that certain CPU-side\nevents, such as thread scheduling, context switching, etc., frequently emerge\nas bottlenecks, further constraining overall GPU performance. We provide\nseveral key observations for users of vision inference workloads on NVIDIA edge\ndevices."}
{"id": "2508.08479", "categories": ["cs.DC", "cs.LG", "14J60", "F.2.2; I.2.7"], "pdf": "https://arxiv.org/pdf/2508.08479", "abs": "https://arxiv.org/abs/2508.08479", "authors": ["Yuvraj Dutta", "Soumyajit Chatterjee", "Sandip Chakraborty", "Basabdatta Palit"], "title": "Benchmarking Federated Learning for Throughput Prediction in 5G Live Streaming Applications", "comment": "14 pages, 24 figures, submitted to IEEE TNET", "summary": "Accurate and adaptive network throughput prediction is essential for\nlatency-sensitive and bandwidth-intensive applications in 5G and emerging 6G\nnetworks. However, most existing methods rely on centralized training with\nuniformly collected data, limiting their applicability in heterogeneous mobile\nenvironments with non-IID data distributions. This paper presents the first\ncomprehensive benchmarking of federated learning (FL) strategies for throughput\nprediction in realistic 5G edge scenarios. We evaluate three aggregation\nalgorithms - FedAvg, FedProx, and FedBN - across four time-series\narchitectures: LSTM, CNN, CNN+LSTM, and Transformer, using five diverse\nreal-world datasets. We systematically analyze the effects of client\nheterogeneity, cohort size, and history window length on prediction\nperformance. Our results reveal key trade-offs among model complexities,\nconvergence rates, and generalization. It is found that FedBN consistently\ndelivers robust performance under non-IID conditions. On the other hand, LSTM\nand Transformer models outperform CNN-based baselines by up to 80% in R2\nscores. Moreover, although Transformers converge in half the rounds of LSTM,\nthey require longer history windows to achieve a high R2, indicating higher\ncontext dependence. LSTM is, therefore, found to achieve a favorable balance\nbetween accuracy, rounds, and temporal footprint. To validate the end-to-end\napplicability of the framework, we have integrated our FL-based predictors into\na live adaptive streaming pipeline. It is seen that FedBN-based LSTM and\nTransformer models improve mean QoE scores by 11.7% and 11.4%, respectively,\nover FedAvg, while also reducing the variance. These findings offer actionable\ninsights for building scalable, privacy-preserving, and edge-aware throughput\nprediction systems in next-generation wireless networks."}
{"id": "2508.08525", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2508.08525", "abs": "https://arxiv.org/abs/2508.08525", "authors": ["Xiaopei Zhang", "Xingang Wang", "Xin Wang"], "title": "A Reinforcement Learning-Driven Task Scheduling Algorithm for Multi-Tenant Distributed Systems", "comment": null, "summary": "This paper addresses key challenges in task scheduling for multi-tenant\ndistributed systems, including dynamic resource variation, heterogeneous tenant\ndemands, and fairness assurance. An adaptive scheduling method based on\nreinforcement learning is proposed. By modeling the scheduling process as a\nMarkov decision process, the study defines the state space, action space, and\nreward function. A scheduling policy learning framework is designed using\nProximal Policy Optimization (PPO) as the core algorithm. This enables dynamic\nperception of complex system states and real-time decision-making. Under a\nmulti-objective reward mechanism, the scheduler jointly optimizes task latency,\nresource utilization, and tenant fairness. The coordination between the policy\nnetwork and the value network continuously refines the scheduling strategy.\nThis enhances overall system performance. To validate the effectiveness of the\nproposed method, a series of experiments were conducted in multi-scenario\nenvironments built using a real-world public dataset. The experiments evaluated\ntask latency control, resource efficiency, policy stability, and fairness. The\nresults show that the proposed method outperforms existing scheduling\napproaches across multiple evaluation metrics. It demonstrates strong stability\nand generalization ability. The proposed scheduling framework provides\npractical and engineering value in policy design, dynamic resource modeling,\nand multi-tenant service assurance. It effectively improves scheduling\nefficiency and resource management in distributed systems under complex\nconditions."}
{"id": "2508.09035", "categories": ["cs.DC", "cs.CL", "cs.LG"], "pdf": "https://arxiv.org/pdf/2508.09035", "abs": "https://arxiv.org/abs/2508.09035", "authors": ["Yibo Jin", "Yixu Xu", "Yue Chen", "Chengbin Wang", "Tao Wang", "Jiaqi Huang", "Rongfei Zhang", "Yiming Dong", "Yuting Yan", "Ke Cheng", "Yingjie Zhu", "Shulan Wang", "Qianqian Tang", "Shuaishuai Meng", "Guanxin Cheng", "Ze Wang", "Shuyan Miao", "Ketao Wang", "Wen Liu", "Yifan Yang", "Tong Zhang", "Anran Wang", "Chengzhou Lu", "Tiantian Dong", "Yongsheng Zhang", "Zhe Wang", "Hefei Guo", "Hongjie Liu", "Wei Lu", "Zhengyong Zhang"], "title": "P/D-Device: Disaggregated Large Language Model between Cloud and Devices", "comment": null, "summary": "Serving disaggregated large language models has been widely adopted in\nindustrial practice for enhanced performance. However, too many tokens\ngenerated in decoding phase, i.e., occupying the resources for a long time,\nessentially hamper the cloud from achieving a higher throughput. Meanwhile, due\nto limited on-device resources, the time to first token (TTFT), i.e., the\nlatency of prefill phase, increases dramatically with the growth on prompt\nlength. In order to concur with such a bottleneck on resources, i.e., long\noccupation in cloud and limited on-device computing capacity, we propose to\nseparate large language model between cloud and devices. That is, the cloud\nhelps a portion of the content for each device, only in its prefill phase.\nSpecifically, after receiving the first token from the cloud, decoupling with\nits own prefill, the device responds to the user immediately for a lower TTFT.\nThen, the following tokens from cloud are presented via a speed controller for\nsmoothed TPOT (the time per output token), until the device catches up with the\nprogress. On-device prefill is then amortized using received tokens while the\nresource usage in cloud is controlled. Moreover, during cloud prefill, the\nprompt can be refined, using those intermediate data already generated, to\nfurther speed up on-device inference. We implement such a scheme P/D-Device,\nand confirm its superiority over other alternatives. We further propose an\nalgorithm to decide the best settings. Real-trace experiments show that TTFT\ndecreases at least 60%, maximum TPOT is about tens of milliseconds, and cloud\nthroughput increases by up to 15x."}
{"id": "2508.08396", "categories": ["cs.AR", "cs.DC"], "pdf": "https://arxiv.org/pdf/2508.08396", "abs": "https://arxiv.org/abs/2508.08396", "authors": ["Fanchen Kong", "Yunhao Deng", "Xiaoling Yi", "Ryan Antonio", "Marian Verhelst"], "title": "XDMA: A Distributed, Extensible DMA Architecture for Layout-Flexible Data Movements in Heterogeneous Multi-Accelerator SoCs", "comment": "4 pages, 6 figures, Proceeded by The 43rd IEEE International\n  Conference on Computer Design (ICCD 2025)", "summary": "As modern AI workloads increasingly rely on heterogeneous accelerators,\nensuring high-bandwidth and layout-flexible data movements between accelerator\nmemories has become a pressing challenge. Direct Memory Access (DMA) engines\npromise high bandwidth utilization for data movements but are typically optimal\nonly for contiguous memory access, thus requiring additional software loops for\ndata layout transformations. This, in turn, leads to excessive control overhead\nand underutilized on-chip interconnects. To overcome this inefficiency, we\npresent XDMA, a distributed and extensible DMA architecture that enables\nlayout-flexible data movements with high link utilization. We introduce three\nkey innovations: (1) a data streaming engine as XDMA Frontend, replacing\nsoftware address generators with hardware ones; (2) a distributed DMA\narchitecture that maximizes link utilization and separates configuration from\ndata transfer; (3) flexible plugins for XDMA enabling on-the-fly data\nmanipulation during data transfers. XDMA demonstrates up to 151.2x/8.2x higher\nlink utilization than software-based implementations in synthetic workloads and\nachieves 2.3x average speedup over accelerators with SoTA DMA in real-world\napplications. Our design incurs <2% area overhead over SoTA DMA solutions while\nconsuming 17% of system power. XDMA proves that co-optimizing memory access,\nlayout transformation, and interconnect protocols is key to unlocking\nheterogeneous multi-accelerator SoC performance."}
