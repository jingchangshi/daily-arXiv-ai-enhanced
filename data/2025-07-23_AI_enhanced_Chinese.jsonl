{"id": "2507.16109", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2507.16109", "abs": "https://arxiv.org/abs/2507.16109", "authors": ["Zihao Chen", "Mohammad Goudarzi", "Adel Nadjaran Toosi"], "title": "Resilience Evaluation of Kubernetes in Cloud-Edge Environments via Failure Injection", "comment": null, "summary": "Kubernetes has emerged as an essential platform for deploying containerised\napplications across cloud and edge infrastructures. As Kubernetes gains\nincreasing adoption for mission-critical microservices, evaluating system\nresilience under realistic fault conditions becomes crucial. However,\nsystematic resilience assessments of Kubernetes in hybrid cloud-edge\nenvironments are currently limited in research. To address this gap, a novel\nresilience evaluation framework integrates mainstream fault injection tools\nwith automated workload generation for comprehensive cloud-edge Kubernetes\ntesting. Multiple fault injection platforms, including Chaos Mesh, Gremlin, and\nChaosBlade are combined with realistic traffic simulation tools, enabling\nautomated orchestration of complex failure scenarios. Through this framework,\ncomprehensive experiments are conducted that systematically target node-level,\npod-level, and network failures across cloud and cloud-edge environments. The\nfirst comprehensive resilience dataset for hybrid cloud-edge Kubernetes\ndeployments is created, comprising over 30 GB of performance data from 11,965\nfault injection scenarios including response times, failure rates, and error\npatterns. Analysis reveals that cloud-edge deployments demonstrate 80% superior\nresponse stability under network delay and partition conditions, while cloud\ndeployments exhibit 47% better resilience under bandwidth limitations,\nproviding quantitative guidance for architectural decision-making in cloud-edge\ndeployments.", "AI": {"tldr": "\u672c\u7814\u7a76\u6784\u5efa\u4e86\u4e00\u4e2a\u65b0\u9896\u7684\u5f39\u6027\u8bc4\u4f30\u6846\u67b6\uff0c\u96c6\u6210\u591a\u79cd\u6545\u969c\u6ce8\u5165\u5de5\u5177\u5bf9\u6df7\u5408\u4e91\u8fb9\u7f18Kubernetes\u73af\u5883\u8fdb\u884c\u7cfb\u7edf\u6027\u5f39\u6027\u6d4b\u8bd5\uff0c\u521b\u5efa\u4e86\u9996\u4e2a\u6df7\u5408\u4e91\u8fb9\u7f18Kubernetes\u90e8\u7f72\u7684\u7efc\u5408\u5f39\u6027\u6570\u636e\u96c6\uff0c\u53d1\u73b0\u4e91\u8fb9\u7f18\u90e8\u7f72\u5728\u7f51\u7edc\u5ef6\u8fdf\u548c\u5206\u533a\u6761\u4ef6\u4e0b\u54cd\u5e94\u7a33\u5b9a\u6027\u4f18\u4e8e\u4e91\u90e8\u7f7280%\uff0c\u800c\u4e91\u90e8\u7f72\u5728\u5e26\u5bbd\u9650\u5236\u4e0b\u5f39\u6027\u8868\u73b0\u66f4\u4f7347%\u3002", "motivation": "\u968f\u7740Kubernetes\u5728\u5173\u952e\u4efb\u52a1\u5fae\u670d\u52a1\u4e2d\u7684\u5e94\u7528\u65e5\u76ca\u589e\u957f\uff0c\u9700\u8981\u5728\u771f\u5b9e\u6545\u969c\u6761\u4ef6\u4e0b\u8bc4\u4f30\u7cfb\u7edf\u5f39\u6027\u53d8\u5f97\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u76ee\u524d\u5bf9\u6df7\u5408\u4e91\u8fb9\u7f18\u73af\u5883\u4e2dKubernetes\u7684\u7cfb\u7edf\u6027\u5f39\u6027\u8bc4\u4f30\u7814\u7a76\u6709\u9650\uff0c\u7f3a\u4e4f\u5168\u9762\u7684\u8bc4\u4f30\u6846\u67b6\u548c\u6570\u636e\u96c6\u3002", "method": "\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u65b0\u9896\u7684\u5f39\u6027\u8bc4\u4f30\u6846\u67b6\uff0c\u96c6\u6210\u4e86Chaos Mesh\u3001Gremlin\u548cChaosBlade\u7b49\u4e3b\u6d41\u6545\u969c\u6ce8\u5165\u5de5\u5177\uff0c\u7ed3\u5408\u771f\u5b9e\u6d41\u91cf\u6a21\u62df\u5de5\u5177\uff0c\u5b9e\u73b0\u590d\u6742\u6545\u969c\u573a\u666f\u7684\u81ea\u52a8\u5316\u7f16\u6392\u3002\u901a\u8fc7\u8be5\u6846\u67b6\u7cfb\u7edf\u6027\u5730\u9488\u5bf9\u4e91\u548c\u4e91\u8fb9\u7f18\u73af\u5883\u4e2d\u7684\u8282\u70b9\u7ea7\u3001Pod\u7ea7\u548c\u7f51\u7edc\u6545\u969c\u8fdb\u884c\u7efc\u5408\u5b9e\u9a8c\u3002", "result": "\u521b\u5efa\u4e86\u9996\u4e2a\u6df7\u5408\u4e91\u8fb9\u7f18Kubernetes\u90e8\u7f72\u7684\u7efc\u5408\u5f39\u6027\u6570\u636e\u96c6\uff0c\u5305\u542b\u8d85\u8fc730GB\u7684\u6027\u80fd\u6570\u636e\uff0c\u6765\u81ea11,965\u4e2a\u6545\u969c\u6ce8\u5165\u573a\u666f\uff0c\u6db5\u76d6\u54cd\u5e94\u65f6\u95f4\u3001\u6545\u969c\u7387\u548c\u9519\u8bef\u6a21\u5f0f\u3002\u5b9e\u9a8c\u7ed3\u679c\u663e\u793a\u4e91\u8fb9\u7f18\u90e8\u7f72\u5728\u7f51\u7edc\u5ef6\u8fdf\u548c\u5206\u533a\u6761\u4ef6\u4e0b\u7684\u54cd\u5e94\u7a33\u5b9a\u6027\u6bd4\u4e91\u90e8\u7f72\u4f1880%\uff0c\u800c\u4e91\u90e8\u7f72\u5728\u5e26\u5bbd\u9650\u5236\u4e0b\u7684\u5f39\u6027\u8868\u73b0\u6bd4\u4e91\u8fb9\u7f18\u90e8\u7f72\u597d47%\u3002", "conclusion": "\u8be5\u7814\u7a76\u4e3a\u6df7\u5408\u4e91\u8fb9\u7f18Kubernetes\u73af\u5883\u7684\u5f39\u6027\u8bc4\u4f30\u63d0\u4f9b\u4e86\u7cfb\u7edf\u6027\u7684\u65b9\u6cd5\u548c\u5168\u9762\u7684\u6570\u636e\u96c6\uff0c\u91cf\u5316\u5206\u6790\u7ed3\u679c\u4e3a\u4e91\u8fb9\u7f18\u90e8\u7f72\u7684\u67b6\u6784\u51b3\u7b56\u63d0\u4f9b\u4e86\u5b9a\u91cf\u6307\u5bfc\uff0c\u586b\u8865\u4e86\u8be5\u9886\u57df\u7814\u7a76\u7684\u7a7a\u767d\u3002"}}
{"id": "2507.16165", "categories": ["cs.DC", "cs.GR", "gr-qc"], "pdf": "https://arxiv.org/pdf/2507.16165", "abs": "https://arxiv.org/abs/2507.16165", "authors": ["Liam Naddell", "Marcelo Ponce"], "title": "Parallel Ray Tracing of Black Hole Images Using the Schwarzschild Metric", "comment": "Published and presented at PEARC '25: Practice and Experience in\n  Advanced Research Computing 2025: \"The Power of Collaboration\"", "summary": "Rendering images of black holes by utilizing ray tracing techniques is a\ncommon methodology employed in many aspects of scientific and astrophysical\nvisualizations. Similarly, general ray tracing techniques are widely used in\nareas related to computer graphics. In this work we describe the implementation\nof a parallel open-source program that can ray trace images in the presence of\na black hole geometry. We do this by combining a couple of different techniques\nusually present in parallel scientific computing, such as, mathematical\napproximations, utilization of scientific libraries, shared-memory and\ndistributed-memory parallelism.", "AI": {"tldr": "\u8fd9\u7bc7\u8bba\u6587\u63cf\u8ff0\u4e86\u4e00\u4e2a\u5e76\u884c\u5f00\u6e90\u7a0b\u5e8f\u7684\u5b9e\u73b0\uff0c\u8be5\u7a0b\u5e8f\u80fd\u591f\u5728\u9ed1\u6d1e\u51e0\u4f55\u73af\u5883\u4e2d\u8fdb\u884c\u5149\u7ebf\u8ffd\u8e2a\u6e32\u67d3\u56fe\u50cf\uff0c\u7ed3\u5408\u4e86\u6570\u5b66\u8fd1\u4f3c\u3001\u79d1\u5b66\u5e93\u4f7f\u7528\u548c\u5e76\u884c\u8ba1\u7b97\u6280\u672f\u3002", "motivation": "\u9ed1\u6d1e\u56fe\u50cf\u6e32\u67d3\u5728\u79d1\u5b66\u548c\u5929\u4f53\u7269\u7406\u53ef\u89c6\u5316\u4e2d\u5f88\u5e38\u89c1\uff0c\u800c\u901a\u7528\u5149\u7ebf\u8ffd\u8e2a\u6280\u672f\u5728\u8ba1\u7b97\u673a\u56fe\u5f62\u5b66\u4e2d\u5e7f\u6cdb\u5e94\u7528\u3002\u9700\u8981\u5f00\u53d1\u4e00\u4e2a\u80fd\u591f\u5904\u7406\u9ed1\u6d1e\u51e0\u4f55\u73af\u5883\u4e0b\u5149\u7ebf\u8ffd\u8e2a\u7684\u5e76\u884c\u7a0b\u5e8f\u3002", "method": "\u7ed3\u5408\u591a\u79cd\u5e76\u884c\u79d1\u5b66\u8ba1\u7b97\u6280\u672f\uff0c\u5305\u62ec\u6570\u5b66\u8fd1\u4f3c\u65b9\u6cd5\u3001\u79d1\u5b66\u5e93\u7684\u4f7f\u7528\u3001\u5171\u4eab\u5185\u5b58\u548c\u5206\u5e03\u5f0f\u5185\u5b58\u5e76\u884c\u8ba1\u7b97\u6280\u672f\uff0c\u5b9e\u73b0\u4e00\u4e2a\u5f00\u6e90\u7684\u5e76\u884c\u5149\u7ebf\u8ffd\u8e2a\u7a0b\u5e8f\u3002", "result": "\u6210\u529f\u5b9e\u73b0\u4e86\u4e00\u4e2a\u80fd\u591f\u5728\u9ed1\u6d1e\u51e0\u4f55\u73af\u5883\u4e2d\u8fdb\u884c\u5149\u7ebf\u8ffd\u8e2a\u7684\u5e76\u884c\u5f00\u6e90\u7a0b\u5e8f\uff0c\u8be5\u7a0b\u5e8f\u7ed3\u5408\u4e86\u591a\u79cd\u5e76\u884c\u8ba1\u7b97\u6280\u672f\u3002", "conclusion": "\u901a\u8fc7\u7ed3\u5408\u6570\u5b66\u8fd1\u4f3c\u3001\u79d1\u5b66\u5e93\u4f7f\u7528\u548c\u5e76\u884c\u8ba1\u7b97\u6280\u672f\uff0c\u6210\u529f\u5f00\u53d1\u4e86\u4e00\u4e2a\u4e13\u95e8\u7528\u4e8e\u9ed1\u6d1e\u51e0\u4f55\u73af\u5883\u4e0b\u5149\u7ebf\u8ffd\u8e2a\u7684\u5f00\u6e90\u5e76\u884c\u7a0b\u5e8f\uff0c\u4e3a\u79d1\u5b66\u548c\u5929\u4f53\u7269\u7406\u53ef\u89c6\u5316\u63d0\u4f9b\u4e86\u6709\u6548\u5de5\u5177\u3002"}}
{"id": "2507.16350", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2507.16350", "abs": "https://arxiv.org/abs/2507.16350", "authors": ["Serdar Metin"], "title": "Autonomous Dominant Resource Fairness for Blockchain Ecosystems", "comment": "10 pages, 3 figures", "summary": "Blockchain systems have been a part of mainstream academic research, and a\nhot topic at that. It has spread to almost every subfield in the computer\nscience literature, as well as economics and finance. Especially in a world\nwhere digital trust is much sought for, blockchains offer a rich variety of\ndesired properties, such as immutability, public auditing, decentralised record\nkeeping, among others. Not only has it been a research topic of its own, the\nintegration of blockchains into other systems has been proposed as solutions in\nmany areas, ranging from grid computing, cloud and fog computing, to internet\nof things, self driving vehicles , and smart cities. In many cases the primary\nfunction attributed to blockchains in these contexts is resource management.\nAlthough much attention is paid to this topic, the focus is on single resource\nallocation scenarios. Even the cases where multiple resource types are to be\nallocated, are treated as single resource type scenarios, and problems are\nformulated as allocating standardised bundles consisting of a fixed amount of\neach of them, such as virtual machines. The present study addresses the problem\nof allocating multiple resource types among tasks with heterogeneous resource\ndemands with a smart contract adaptation of Precomputed Dominant Resource\nFairness; an algorithm that approximates Dominant Resource Fairness, without\nloop iterations, which makes it preferable in the blockchain context because of\nthe block gas limit. We present the resulting algorithm, Autonomous Dominant\nResource Fairness, along with the empirical data collected from the tests run\non the algorithm. The results show that Autonomous Dominant Resource Fairness\nis a gas-cost efficient algorithm, which can be used to manage hundreds of\nresource types for unlimited number of users.", "AI": {"tldr": "\u672c\u7814\u7a76\u63d0\u51fa\u4e86\u81ea\u4e3b\u4e3b\u5bfc\u8d44\u6e90\u516c\u5e73\u6027\u7b97\u6cd5(Autonomous Dominant Resource Fairness)\uff0c\u8fd9\u662f\u4e00\u79cd\u9002\u7528\u4e8e\u533a\u5757\u94fe\u667a\u80fd\u5408\u7ea6\u7684\u591a\u8d44\u6e90\u5206\u914d\u7b97\u6cd5\uff0c\u80fd\u591f\u9ad8\u6548\u5904\u7406\u5f02\u6784\u8d44\u6e90\u9700\u6c42\u7684\u4efb\u52a1\u5206\u914d\u95ee\u9898\u3002", "motivation": "\u5c3d\u7ba1\u533a\u5757\u94fe\u5728\u8d44\u6e90\u7ba1\u7406\u65b9\u9762\u5e94\u7528\u5e7f\u6cdb\uff0c\u4f46\u73b0\u6709\u7814\u7a76\u4e3b\u8981\u96c6\u4e2d\u5728\u5355\u4e00\u8d44\u6e90\u5206\u914d\u573a\u666f\uff0c\u5373\u4f7f\u6d89\u53ca\u591a\u79cd\u8d44\u6e90\u7c7b\u578b\uff0c\u4e5f\u901a\u5e38\u5c06\u5176\u89c6\u4e3a\u5355\u4e00\u8d44\u6e90\u7c7b\u578b\u5904\u7406\u3002\u7f3a\u4e4f\u9488\u5bf9\u5f02\u6784\u8d44\u6e90\u9700\u6c42\u4efb\u52a1\u7684\u591a\u8d44\u6e90\u7c7b\u578b\u5206\u914d\u89e3\u51b3\u65b9\u6848\uff0c\u7279\u522b\u662f\u9002\u5e94\u533a\u5757\u94fe\u73af\u5883\u4e2dgas\u9650\u5236\u7684\u7b97\u6cd5\u3002", "method": "\u91c7\u7528\u9884\u8ba1\u7b97\u4e3b\u5bfc\u8d44\u6e90\u516c\u5e73\u6027(Precomputed Dominant Resource Fairness)\u7b97\u6cd5\u7684\u667a\u80fd\u5408\u7ea6\u9002\u914d\u7248\u672c\uff0c\u8be5\u7b97\u6cd5\u80fd\u591f\u5728\u4e0d\u4f7f\u7528\u5faa\u73af\u8fed\u4ee3\u7684\u60c5\u51b5\u4e0b\u8fd1\u4f3c\u4e3b\u5bfc\u8d44\u6e90\u516c\u5e73\u6027\uff0c\u4f7f\u5176\u66f4\u9002\u5408\u533a\u5757\u94fe\u73af\u5883\u4e2d\u7684gas\u9650\u5236\u7ea6\u675f\u3002", "result": "\u5b9e\u9a8c\u6570\u636e\u663e\u793a\uff0c\u81ea\u4e3b\u4e3b\u5bfc\u8d44\u6e90\u516c\u5e73\u6027\u7b97\u6cd5\u662f\u4e00\u79cdgas\u6210\u672c\u9ad8\u6548\u7684\u7b97\u6cd5\uff0c\u80fd\u591f\u4e3a\u65e0\u9650\u6570\u91cf\u7684\u7528\u6237\u7ba1\u7406\u6570\u767e\u79cd\u8d44\u6e90\u7c7b\u578b\uff0c\u6709\u6548\u89e3\u51b3\u4e86\u533a\u5757\u94fe\u73af\u5883\u4e0b\u7684\u591a\u8d44\u6e90\u5206\u914d\u95ee\u9898\u3002", "conclusion": "\u81ea\u4e3b\u4e3b\u5bfc\u8d44\u6e90\u516c\u5e73\u6027\u7b97\u6cd5\u6210\u529f\u89e3\u51b3\u4e86\u533a\u5757\u94fe\u73af\u5883\u4e0b\u591a\u8d44\u6e90\u7c7b\u578b\u5206\u914d\u7684\u6280\u672f\u6311\u6218\uff0c\u4e3a\u533a\u5757\u94fe\u5728\u8d44\u6e90\u7ba1\u7406\u9886\u57df\u7684\u5e94\u7528\u63d0\u4f9b\u4e86\u66f4\u52a0\u5b8c\u5584\u548c\u5b9e\u7528\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u5177\u6709\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027\u548c\u6210\u672c\u6548\u7387\u3002"}}
{"id": "2507.16668", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2507.16668", "abs": "https://arxiv.org/abs/2507.16668", "authors": ["Somayeh Sobati-M"], "title": "FOGNITE: Federated Learning-Enhanced Fog-Cloud Architecture", "comment": null, "summary": "Modern smart grids demand fast, intelligent, and energy-aware computing at\nthe edge to manage real time fluctuations and ensure reliable operation. This\npaper introduces FOGNITE Fog-based Grid In intelligence with Neural Integration\nand Twin based Execution a next-generation fog cloud framework designed to\nenhance autonomy, resilience, and efficiency in distributed energy systems.\nFOGNITE combines three core components: federated learning, reinforcement\nlearning, and digital twin validation. Each fog node trains a local CNN LSTM\nmodel on private energy consumption data, enabling predictive intelligence\nwhile preserving data privacy through federated aggregation. A reinforcement\nlearning agent dynamically schedules tasks based on current system load and\nenergy conditions, optimizing for performance under uncertainty.\n  To prevent unsafe or inefficient decisions, a hierarchical digital twin layer\nsimulates potential actions before deployment, significantly reducing execution\nerrors and energy waste. We evaluate FOGNITE on a real world testbed of\nRaspberry Pi devices, showing up to a 93.7% improvement in load balancing\naccuracy and a 63.2% reduction in energy waste compared to conventional\narchitectures. By shifting smart grid control from reactive correction to\nproactive optimization, FOGNITE represents a step toward more intelligent,\nadaptive, and sustainable energy infrastructures", "AI": {"tldr": "\u672c\u6587\u63d0\u51faFOGNITE\u6846\u67b6\uff0c\u7ed3\u5408\u8054\u90a6\u5b66\u4e60\u3001\u5f3a\u5316\u5b66\u4e60\u548c\u6570\u5b57\u5b6a\u751f\u6280\u672f\uff0c\u4e3a\u667a\u80fd\u7535\u7f51\u63d0\u4f9b\u8fb9\u7f18\u8ba1\u7b97\u89e3\u51b3\u65b9\u6848\uff0c\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\u51c6\u786e\u7387\u63d0\u534793.7%\uff0c\u80fd\u8017\u6d6a\u8d39\u51cf\u5c1163.2%", "motivation": "\u73b0\u4ee3\u667a\u80fd\u7535\u7f51\u9700\u8981\u5feb\u901f\u3001\u667a\u80fd\u4e14\u8282\u80fd\u7684\u8fb9\u7f18\u8ba1\u7b97\u6765\u7ba1\u7406\u5b9e\u65f6\u6ce2\u52a8\u5e76\u786e\u4fdd\u53ef\u9760\u8fd0\u884c\uff0c\u73b0\u6709\u67b6\u6784\u65e0\u6cd5\u6ee1\u8db3\u5206\u5e03\u5f0f\u80fd\u6e90\u7cfb\u7edf\u7684\u81ea\u4e3b\u6027\u3001\u97e7\u6027\u548c\u6548\u7387\u8981\u6c42", "method": "FOGNITE\u6846\u67b6\u5305\u542b\u4e09\u4e2a\u6838\u5fc3\u7ec4\u4ef6\uff1a1\uff09\u8054\u90a6\u5b66\u4e60-\u5404\u96fe\u8282\u70b9\u5728\u79c1\u6709\u80fd\u8017\u6570\u636e\u4e0a\u8bad\u7ec3CNN-LSTM\u6a21\u578b\uff0c\u901a\u8fc7\u8054\u90a6\u805a\u5408\u4fdd\u62a4\u6570\u636e\u9690\u79c1\uff1b2\uff09\u5f3a\u5316\u5b66\u4e60-\u667a\u80fd\u4f53\u6839\u636e\u7cfb\u7edf\u8d1f\u8f7d\u548c\u80fd\u6e90\u6761\u4ef6\u52a8\u6001\u8c03\u5ea6\u4efb\u52a1\uff1b3\uff09\u6570\u5b57\u5b6a\u751f\u9a8c\u8bc1-\u5206\u5c42\u6570\u5b57\u5b6a\u751f\u5c42\u5728\u90e8\u7f72\u524d\u6a21\u62df\u6f5c\u5728\u884c\u52a8", "result": "\u5728\u6811\u8393\u6d3e\u8bbe\u5907\u771f\u5b9e\u6d4b\u8bd5\u5e73\u53f0\u4e0a\u8bc4\u4f30\u663e\u793a\uff0c\u76f8\u6bd4\u4f20\u7edf\u67b6\u6784\uff0c\u8d1f\u8f7d\u5747\u8861\u51c6\u786e\u7387\u63d0\u534793.7%\uff0c\u80fd\u8017\u6d6a\u8d39\u51cf\u5c1163.2%\uff0c\u663e\u8457\u964d\u4f4e\u6267\u884c\u9519\u8bef\u548c\u80fd\u6e90\u6d6a\u8d39", "conclusion": "FOGNITE\u5c06\u667a\u80fd\u7535\u7f51\u63a7\u5236\u4ece\u88ab\u52a8\u7ea0\u6b63\u8f6c\u5411\u4e3b\u52a8\u4f18\u5316\uff0c\u4ee3\u8868\u4e86\u5411\u66f4\u667a\u80fd\u3001\u9002\u5e94\u6027\u66f4\u5f3a\u3001\u66f4\u53ef\u6301\u7eed\u7684\u80fd\u6e90\u57fa\u7840\u8bbe\u65bd\u8fc8\u8fdb\u7684\u91cd\u8981\u4e00\u6b65"}}
{"id": "2507.16051", "categories": ["cs.PL", "cs.SE"], "pdf": "https://arxiv.org/pdf/2507.16051", "abs": "https://arxiv.org/abs/2507.16051", "authors": ["Juan Altmayer Pizzorno", "Emery D. Berger"], "title": "RightTyper: Effective and Efficient Type Annotation for Python", "comment": null, "summary": "Python type annotations bring the benefits of static type checking to the\nlanguage. However, manually writing annotations can be time-consuming and\ntedious. The result is that most real-world Python code remains largely\nuntyped. Past approaches to annotating types in Python code fall short in a\nnumber of ways. Static approaches struggle with dynamic features and infer\noverly broad types. AI-based methods are inherently unsound and can miss rare\nor user-defined types. Dynamic methods can impose extreme runtime overheads,\ndegrading performance by up to 270x, abort execution as they exhaust resources,\nand even infer incorrect types that lead to runtime errors. Crucially, all\nprior work assumes implicitly that the code to be annotated is already correct.\nThis assumption is generally unwarranted, especially for large codebases that\nhave been untyped.\n  This paper presents RightTyper, a novel approach for Python that overcomes\nthese disadvantages. RightTyper not only generates precise type annotations\nbased on actual program behavior, improving recall in type checking relative to\nprior approaches. It also turns type checking into anomaly detection, allowing\nthe type checker to identify corner cases that the programmer can audit for\nunintended behavior. RightTyper is also fast and space-efficient, imposing just\n30% performance overhead on average. RightTyper achieves these characteristics\nby a principled yet pervasive use of sampling--guided by self-profiling--along\nwith statistical filtering and careful resolution and aggregation of type\ninformation.", "AI": {"tldr": "RightTyper\u662f\u4e00\u79cd\u65b0\u9896\u7684Python\u7c7b\u578b\u6ce8\u91ca\u751f\u6210\u65b9\u6cd5\uff0c\u901a\u8fc7\u57fa\u4e8e\u91c7\u6837\u7684\u52a8\u6001\u5206\u6790\u514b\u670d\u4e86\u73b0\u6709\u65b9\u6cd5\u7684\u5c40\u9650\u6027\uff0c\u80fd\u591f\u751f\u6210\u7cbe\u786e\u7684\u7c7b\u578b\u6ce8\u91ca\u5e76\u5c06\u7c7b\u578b\u68c0\u67e5\u8f6c\u5316\u4e3a\u5f02\u5e38\u68c0\u6d4b\uff0c\u540c\u65f6\u4fdd\u6301\u8f83\u4f4e\u7684\u6027\u80fd\u5f00\u9500\u3002", "motivation": "\u73b0\u6709\u7684Python\u7c7b\u578b\u6ce8\u91ca\u65b9\u6cd5\u5b58\u5728\u591a\u79cd\u95ee\u9898\uff1a\u9759\u6001\u65b9\u6cd5\u96be\u4ee5\u5904\u7406\u52a8\u6001\u7279\u6027\u4e14\u63a8\u65ad\u7c7b\u578b\u8fc7\u4e8e\u5bbd\u6cdb\uff1bAI\u65b9\u6cd5\u672c\u8d28\u4e0a\u4e0d\u53ef\u9760\u4e14\u53ef\u80fd\u9057\u6f0f\u7f55\u89c1\u6216\u7528\u6237\u5b9a\u4e49\u7684\u7c7b\u578b\uff1b\u52a8\u6001\u65b9\u6cd5\u4f1a\u9020\u6210\u9ad8\u8fbe270\u500d\u7684\u8fd0\u884c\u65f6\u5f00\u9500\uff0c\u751a\u81f3\u53ef\u80fd\u63a8\u65ad\u51fa\u9519\u8bef\u7c7b\u578b\u5bfc\u81f4\u8fd0\u884c\u65f6\u9519\u8bef\u3002\u6b64\u5916\uff0c\u6240\u6709\u5148\u524d\u5de5\u4f5c\u90fd\u9690\u542b\u5047\u8bbe\u5f85\u6ce8\u91ca\u7684\u4ee3\u7801\u5df2\u7ecf\u662f\u6b63\u786e\u7684\uff0c\u8fd9\u4e00\u5047\u8bbe\u901a\u5e38\u4e0d\u6210\u7acb\u3002", "method": "RightTyper\u91c7\u7528\u57fa\u4e8e\u91c7\u6837\u7684\u65b9\u6cd5\uff0c\u7ed3\u5408\u81ea\u6211\u5206\u6790\u6307\u5bfc\u3001\u7edf\u8ba1\u8fc7\u6ee4\u4ee5\u53ca\u7c7b\u578b\u4fe1\u606f\u7684\u4ed4\u7ec6\u89e3\u6790\u548c\u805a\u5408\u3002\u8be5\u65b9\u6cd5\u901a\u8fc7\u6709\u539f\u5219\u4e14\u666e\u904d\u7684\u91c7\u6837\u6280\u672f\u6765\u5206\u6790\u5b9e\u9645\u7a0b\u5e8f\u884c\u4e3a\uff0c\u751f\u6210\u7cbe\u786e\u7684\u7c7b\u578b\u6ce8\u91ca\u3002", "result": "RightTyper\u76f8\u6bd4\u4e8e\u5148\u524d\u65b9\u6cd5\u63d0\u9ad8\u4e86\u7c7b\u578b\u68c0\u67e5\u7684\u53ec\u56de\u7387\uff0c\u80fd\u591f\u751f\u6210\u57fa\u4e8e\u5b9e\u9645\u7a0b\u5e8f\u884c\u4e3a\u7684\u7cbe\u786e\u7c7b\u578b\u6ce8\u91ca\u3002\u540c\u65f6\uff0c\u5b83\u5c06\u7c7b\u578b\u68c0\u67e5\u8f6c\u5316\u4e3a\u5f02\u5e38\u68c0\u6d4b\uff0c\u80fd\u591f\u8bc6\u522b\u7a0b\u5e8f\u5458\u53ef\u4ee5\u5ba1\u67e5\u7684\u8fb9\u754c\u60c5\u51b5\u3002\u5728\u6027\u80fd\u65b9\u9762\uff0cRightTyper\u5e73\u5747\u4ec5\u9020\u621030%\u7684\u6027\u80fd\u5f00\u9500\uff0c\u5177\u6709\u5feb\u901f\u4e14\u7a7a\u95f4\u9ad8\u6548\u7684\u7279\u70b9\u3002", "conclusion": "RightTyper\u6210\u529f\u89e3\u51b3\u4e86\u73b0\u6709Python\u7c7b\u578b\u6ce8\u91ca\u65b9\u6cd5\u7684\u4e3b\u8981\u7f3a\u9677\uff0c\u901a\u8fc7\u521b\u65b0\u7684\u91c7\u6837\u7b56\u7565\u5b9e\u73b0\u4e86\u7cbe\u786e\u6027\u3001\u6548\u7387\u548c\u5b9e\u7528\u6027\u7684\u5e73\u8861\uff0c\u4e3aPython\u4ee3\u7801\u7684\u7c7b\u578b\u6ce8\u91ca\u63d0\u4f9b\u4e86\u4e00\u79cd\u66f4\u4f18\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2507.16177", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2507.16177", "abs": "https://arxiv.org/abs/2507.16177", "authors": ["Yifan Zhang", "Xiaoyu Niu", "Hongzheng Tian", "Yanjun Zhang", "Bo Yu", "Shaoshan Liu", "Sitao Huang"], "title": "A Sparsity-Aware Autonomous Path Planning Accelerator with HW/SW Co-Design and Multi-Level Dataflow Optimization", "comment": "Accepted by ACM Transactions on Architecture and Code Optimization\n  (ACM TACO)", "summary": "Path planning is critical for autonomous driving, generating smooth,\ncollision-free, feasible paths based on perception and localization inputs.\nHowever, its computationally intensive nature poses significant challenges for\nresource-constrained autonomous driving hardware. This paper presents an\nend-to-end FPGA-based acceleration framework targeting the quadratic\nprogramming (QP), core of optimization-based path planning. We employ a\nhardware-friendly alternating direction method of multipliers (ADMM) for QP\nsolving and a parallelizable preconditioned conjugate gradient (PCG) method for\nlinear systems. By analyzing sparse matrix patterns, we propose customized\nstorage schemes and efficient sparse matrix multiplication units, significantly\nreducing resource usage and accelerating matrix operations. Our multi-level\ndataflow optimization strategy incorporates intra-operator parallelization and\npipelining, inter-operator fine-grained pipelining, and CPU-FPGA system-level\ntask mapping. Implemented on the AMD ZCU102 platform, our framework achieves\nstate-of-the-art latency and energy efficiency, including 1.48x faster\nperformance than the best FPGA-based design, 2.89x over an Intel i7-11800H CPU,\n5.62x over an ARM Cortex-A57 embedded CPU, and 1.56x over a state-of-the-art\nGPU solution, along with a 2.05x throughput improvement over existing\nFPGA-based designs.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u4e2a\u57fa\u4e8eFPGA\u7684\u7aef\u5230\u7aef\u52a0\u901f\u6846\u67b6\uff0c\u7528\u4e8e\u81ea\u52a8\u9a7e\u9a76\u8def\u5f84\u89c4\u5212\u4e2d\u7684\u4e8c\u6b21\u89c4\u5212\u95ee\u9898\uff0c\u901a\u8fc7\u786c\u4ef6\u53cb\u597d\u7684ADMM\u7b97\u6cd5\u548c\u591a\u7ea7\u6570\u636e\u6d41\u4f18\u5316\u7b56\u7565\uff0c\u5728AMD ZCU102\u5e73\u53f0\u4e0a\u5b9e\u73b0\u4e86\u76f8\u6bd4CPU\u3001GPU\u548c\u73b0\u6709FPGA\u8bbe\u8ba1\u7684\u663e\u8457\u6027\u80fd\u63d0\u5347\u3002", "motivation": "\u81ea\u52a8\u9a7e\u9a76\u8def\u5f84\u89c4\u5212\u7684\u8ba1\u7b97\u5bc6\u96c6\u6027\u5bf9\u8d44\u6e90\u53d7\u9650\u7684\u786c\u4ef6\u5e73\u53f0\u6784\u6210\u91cd\u5927\u6311\u6218\uff0c\u9700\u8981\u9488\u5bf9\u8def\u5f84\u89c4\u5212\u6838\u5fc3\u7684\u4e8c\u6b21\u89c4\u5212\u95ee\u9898\u5f00\u53d1\u9ad8\u6548\u7684\u786c\u4ef6\u52a0\u901f\u89e3\u51b3\u65b9\u6848\u3002", "method": "\u91c7\u7528\u786c\u4ef6\u53cb\u597d\u7684\u4ea4\u66ff\u65b9\u5411\u4e58\u5b50\u6cd5(ADMM)\u6c42\u89e3\u4e8c\u6b21\u89c4\u5212\u95ee\u9898\uff0c\u4f7f\u7528\u53ef\u5e76\u884c\u5316\u7684\u9884\u6761\u4ef6\u5171\u8f6d\u68af\u5ea6\u6cd5(PCG)\u5904\u7406\u7ebf\u6027\u7cfb\u7edf\uff1b\u901a\u8fc7\u5206\u6790\u7a00\u758f\u77e9\u9635\u6a21\u5f0f\u8bbe\u8ba1\u5b9a\u5236\u5316\u5b58\u50a8\u65b9\u6848\u548c\u9ad8\u6548\u7a00\u758f\u77e9\u9635\u4e58\u6cd5\u5355\u5143\uff1b\u5b9e\u65bd\u591a\u7ea7\u6570\u636e\u6d41\u4f18\u5316\u7b56\u7565\uff0c\u5305\u62ec\u7b97\u5b50\u5185\u5e76\u884c\u5316\u548c\u6d41\u6c34\u7ebf\u3001\u7b97\u5b50\u95f4\u7ec6\u7c92\u5ea6\u6d41\u6c34\u7ebf\u4ee5\u53caCPU-FPGA\u7cfb\u7edf\u7ea7\u4efb\u52a1\u6620\u5c04\u3002", "result": "\u5728AMD ZCU102\u5e73\u53f0\u4e0a\u5b9e\u73b0\u4e86\u6700\u5148\u8fdb\u7684\u5ef6\u8fdf\u548c\u80fd\u6548\u8868\u73b0\uff1a\u76f8\u6bd4\u6700\u4f73FPGA\u8bbe\u8ba1\u5feb1.48\u500d\uff0c\u76f8\u6bd4Intel i7-11800H CPU\u5feb2.89\u500d\uff0c\u76f8\u6bd4ARM Cortex-A57\u5d4c\u5165\u5f0fCPU\u5feb5.62\u500d\uff0c\u76f8\u6bd4\u6700\u5148\u8fdbGPU\u89e3\u51b3\u65b9\u6848\u5feb1.56\u500d\uff0c\u541e\u5410\u91cf\u76f8\u6bd4\u73b0\u6709FPGA\u8bbe\u8ba1\u63d0\u53472.05\u500d\u3002", "conclusion": "\u8be5FPGA\u52a0\u901f\u6846\u67b6\u6210\u529f\u89e3\u51b3\u4e86\u81ea\u52a8\u9a7e\u9a76\u8def\u5f84\u89c4\u5212\u7684\u8ba1\u7b97\u74f6\u9888\u95ee\u9898\uff0c\u901a\u8fc7\u7b97\u6cd5\u4f18\u5316\u548c\u786c\u4ef6\u67b6\u6784\u8bbe\u8ba1\u7684\u534f\u540c\uff0c\u5728\u591a\u4e2a\u6027\u80fd\u6307\u6807\u4e0a\u8d85\u8d8a\u4e86\u73b0\u6709\u7684CPU\u3001GPU\u548cFPGA\u89e3\u51b3\u65b9\u6848\uff0c\u4e3a\u8d44\u6e90\u53d7\u9650\u7684\u81ea\u52a8\u9a7e\u9a76\u7cfb\u7edf\u63d0\u4f9b\u4e86\u9ad8\u6548\u7684\u8def\u5f84\u89c4\u5212\u52a0\u901f\u65b9\u6848\u3002"}}
{"id": "2507.16710", "categories": ["cs.DC", "cs.PF"], "pdf": "https://arxiv.org/pdf/2507.16710", "abs": "https://arxiv.org/abs/2507.16710", "authors": ["Andrei-Leonard Nicusan", "Dominik Werner", "Simon Branford", "Simon Hartley", "Andrew J. Morris", "Kit Windows-Yule"], "title": "AcceleratedKernels.jl: Cross-Architecture Parallel Algorithms from a Unified, Transpiled Codebase", "comment": null, "summary": "AcceleratedKernels.jl is introduced as a backend-agnostic library for\nparallel computing in Julia, natively targeting NVIDIA, AMD, Intel, and Apple\naccelerators via a unique transpilation architecture. Written in a unified,\ncompact codebase, it enables productive parallel programming with minimised\nimplementation and usage complexities. Benchmarks of arithmetic-heavy kernels\nshow performance on par with C and OpenMP-multithreaded CPU implementations,\nwith Julia sometimes offering more consistent and predictable numerical\nperformance than conventional C compilers. Exceptional composability is\nhighlighted as simultaneous CPU-GPU co-processing is achievable - such as\nCPU-GPU co-sorting - with transparent use of hardware-specialised MPI\nimplementations. Tests on the Baskerville Tier 2 UK HPC cluster achieved\nworld-class sorting throughputs of 538-855 GB/s using 200 NVIDIA A100 GPUs,\ncomparable to the highest literature-reported figure of 900 GB/s achieved on\n262,144 CPU cores. The use of direct NVLink GPU-to-GPU interconnects resulted\nin a 4.93x speedup on average; normalised by a combined capital, running and\nenvironmental cost, communication-heavy HPC tasks only become economically\nviable on GPUs if GPUDirect interconnects are employed.", "AI": {"tldr": "AcceleratedKernels.jl\u662f\u4e00\u4e2a\u540e\u7aef\u65e0\u5173\u7684Julia\u5e76\u884c\u8ba1\u7b97\u5e93\uff0c\u901a\u8fc7\u72ec\u7279\u7684\u8f6c\u8bd1\u67b6\u6784\u539f\u751f\u652f\u6301NVIDIA\u3001AMD\u3001Intel\u548cApple\u52a0\u901f\u5668\uff0c\u5728\u82f1\u56fdHPC\u96c6\u7fa4\u4e0a\u4f7f\u7528200\u4e2aNVIDIA A100 GPU\u5b9e\u73b0\u4e86\u4e16\u754c\u7ea7\u7684538-855 GB/s\u6392\u5e8f\u541e\u5410\u91cf\u3002", "motivation": "\u73b0\u6709\u7684\u5e76\u884c\u8ba1\u7b97\u89e3\u51b3\u65b9\u6848\u5b58\u5728\u5b9e\u73b0\u548c\u4f7f\u7528\u590d\u6742\u6027\u9ad8\u7684\u95ee\u9898\uff0c\u9700\u8981\u4e00\u4e2a\u7edf\u4e00\u7684\u3001\u540e\u7aef\u65e0\u5173\u7684\u5e93\u6765\u7b80\u5316\u8de8\u4e0d\u540c\u786c\u4ef6\u52a0\u901f\u5668\u7684\u5e76\u884c\u7f16\u7a0b\uff0c\u540c\u65f6\u4fdd\u6301\u9ad8\u6027\u80fd\u3002", "method": "\u5f00\u53d1\u4e86\u57fa\u4e8e\u72ec\u7279\u8f6c\u8bd1\u67b6\u6784\u7684AcceleratedKernels.jl\u5e93\uff0c\u91c7\u7528\u7edf\u4e00\u7d27\u51d1\u7684\u4ee3\u7801\u5e93\u8bbe\u8ba1\uff0c\u539f\u751f\u652f\u6301\u591a\u79cd\u786c\u4ef6\u52a0\u901f\u5668(NVIDIA\u3001AMD\u3001Intel\u3001Apple)\uff0c\u5b9e\u73b0CPU-GPU\u534f\u540c\u5904\u7406\uff0c\u5e76\u652f\u6301\u786c\u4ef6\u4e13\u7528\u7684MPI\u5b9e\u73b0\u3002", "result": "\u7b97\u672f\u5bc6\u96c6\u578b\u5185\u6838\u7684\u57fa\u51c6\u6d4b\u8bd5\u663e\u793a\u6027\u80fd\u4e0eC\u548cOpenMP\u591a\u7ebf\u7a0bCPU\u5b9e\u73b0\u76f8\u5f53\uff0cJulia\u5728\u6570\u503c\u6027\u80fd\u4e0a\u6709\u65f6\u6bd4\u4f20\u7edfC\u7f16\u8bd1\u5668\u66f4\u4e00\u81f4\u548c\u53ef\u9884\u6d4b\u3002\u5728Baskerville Tier 2\u82f1\u56fdHPC\u96c6\u7fa4\u4e0a\u5b9e\u73b0\u4e86538-855 GB/s\u7684\u4e16\u754c\u7ea7\u6392\u5e8f\u541e\u5410\u91cf\uff0c\u4f7f\u7528\u76f4\u63a5NVLink GPU\u95f4\u4e92\u8fde\u5e73\u5747\u83b7\u5f974.93\u500d\u52a0\u901f\u3002", "conclusion": "AcceleratedKernels.jl\u6210\u529f\u63d0\u4f9b\u4e86\u9ad8\u6027\u80fd\u7684\u8de8\u5e73\u53f0\u5e76\u884c\u8ba1\u7b97\u89e3\u51b3\u65b9\u6848\uff0c\u8bc1\u660e\u4e86Julia\u5728HPC\u9886\u57df\u7684\u6f5c\u529b\u3002\u901a\u4fe1\u5bc6\u96c6\u578bHPC\u4efb\u52a1\u53ea\u6709\u5728\u4f7f\u7528GPUDirect\u4e92\u8fde\u65f6\u5728GPU\u4e0a\u624d\u5177\u6709\u7ecf\u6d4e\u53ef\u884c\u6027\uff0c\u8fd9\u4e3a\u672a\u6765HPC\u7cfb\u7edf\u8bbe\u8ba1\u63d0\u4f9b\u4e86\u91cd\u8981\u6307\u5bfc\u3002"}}
{"id": "2507.16086", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2507.16086", "abs": "https://arxiv.org/abs/2507.16086", "authors": ["Andrew Marmaduke", "Apoorv Ingle", "J. Garrett Morris"], "title": "Understanding Haskell-style Overloading via Open Data and Open Functions", "comment": null, "summary": "We present a new, uniform semantics for Haskell-style overloading. We realize\nour approach in a new core language, System F$_\\mathrm{D}$, whose metatheory we\nmechanize in the Lean4 interactive theorem prover. System F$_\\mathrm{D}$ is\ndistinguished by its open data types and open functions, each given by a\ncollection of instances rather than by a single definition. We show that System\nF$_\\mathrm{D}$ can encode advanced features of Haskell's of type class systems,\nmore expressively than current semantics of these features, and without\nassuming additional type equality axioms.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u6838\u5fc3\u8bed\u8a00System F_D\uff0c\u4e3aHaskell\u98ce\u683c\u7684\u91cd\u8f7d\u63d0\u4f9b\u7edf\u4e00\u8bed\u4e49\uff0c\u901a\u8fc7\u5f00\u653e\u6570\u636e\u7c7b\u578b\u548c\u5f00\u653e\u51fd\u6570\u5b9e\u73b0\uff0c\u5e76\u5728Lean4\u4e2d\u673a\u68b0\u5316\u9a8c\u8bc1\u4e86\u5176\u5143\u7406\u8bba", "motivation": "\u73b0\u6709\u7684Haskell\u7c7b\u578b\u7c7b\u7cfb\u7edf\u8bed\u4e49\u5b58\u5728\u5c40\u9650\u6027\uff0c\u9700\u8981\u989d\u5916\u7684\u7c7b\u578b\u7b49\u5f0f\u516c\u7406\uff0c\u4e14\u8868\u8fbe\u80fd\u529b\u4e0d\u8db3\u3002\u56e0\u6b64\u9700\u8981\u4e00\u79cd\u65b0\u7684\u3001\u66f4\u7edf\u4e00\u548c\u8868\u8fbe\u529b\u66f4\u5f3a\u7684\u8bed\u4e49\u6765\u5904\u7406Haskell\u98ce\u683c\u7684\u91cd\u8f7d", "method": "\u8bbe\u8ba1\u4e86\u4e00\u79cd\u65b0\u7684\u6838\u5fc3\u8bed\u8a00System F_D\uff0c\u5176\u7279\u70b9\u662f\u5177\u6709\u5f00\u653e\u6570\u636e\u7c7b\u578b\u548c\u5f00\u653e\u51fd\u6570\uff0c\u8fd9\u4e9b\u90fd\u901a\u8fc7\u5b9e\u4f8b\u96c6\u5408\u800c\u975e\u5355\u4e00\u5b9a\u4e49\u6765\u7ed9\u51fa\u3002\u4f7f\u7528Lean4\u4ea4\u4e92\u5f0f\u5b9a\u7406\u8bc1\u660e\u5668\u5bf9\u8be5\u7cfb\u7edf\u7684\u5143\u7406\u8bba\u8fdb\u884c\u673a\u68b0\u5316\u9a8c\u8bc1", "result": "System F_D\u80fd\u591f\u7f16\u7801Haskell\u7c7b\u578b\u7c7b\u7cfb\u7edf\u7684\u9ad8\u7ea7\u7279\u6027\uff0c\u6bd4\u73b0\u6709\u7684\u8fd9\u4e9b\u7279\u6027\u8bed\u4e49\u66f4\u5177\u8868\u8fbe\u529b\uff0c\u4e14\u65e0\u9700\u5047\u8bbe\u989d\u5916\u7684\u7c7b\u578b\u7b49\u5f0f\u516c\u7406", "conclusion": "System F_D\u4e3aHaskell\u98ce\u683c\u91cd\u8f7d\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b0\u7684\u7edf\u4e00\u8bed\u4e49\uff0c\u901a\u8fc7\u5f00\u653e\u6570\u636e\u7c7b\u578b\u548c\u5f00\u653e\u51fd\u6570\u7684\u8bbe\u8ba1\uff0c\u5b9e\u73b0\u4e86\u6bd4\u73b0\u6709\u65b9\u6cd5\u66f4\u5f3a\u7684\u8868\u8fbe\u80fd\u529b\uff0c\u540c\u65f6\u907f\u514d\u4e86\u5bf9\u989d\u5916\u7c7b\u578b\u7b49\u5f0f\u516c\u7406\u7684\u4f9d\u8d56"}}
{"id": "2507.16326", "categories": ["cs.AR", "B.5.0"], "pdf": "https://arxiv.org/pdf/2507.16326", "abs": "https://arxiv.org/abs/2507.16326", "authors": ["Daniel Bascones", "Borja Morcillo"], "title": "Hourglass Sorting: A novel parallel sorting algorithm and its implementation", "comment": "6 pages, 5 figures", "summary": "Sorting is one of the fundamental problems in computer science. Playing a\nrole in many processes, it has a lower complexity bound imposed by\n$\\mathcal{O}(n\\log{n})$ when executing on a sequential machine. This limit can\nbe brought down to sub-linear times thanks to parallelization techniques that\nincrease the number of comparisons done in parallel. This, however, increases\nthe cost of implementation, which limits the application of such techniques.\nMoreover, as the size of the arrays increases, a bottleneck arises in moving\nthe vast quantities of data required at the input, and generated at the output\nof such sorter. This might impose time requirements much stricter than those of\nthe sorting itself. In this paper, a novel parallel sorter is proposed for the\nspecific case where the input is parallel, but the output is serial. The design\nis then implemented and verified on an FPGA within the context of a quantum\nLDPC decoder. A latency of $\\log{n}$ is achieved for the output of the first\nelement, after which the rest stream out for a total sorting time of\n$n+\\log{n}$. Contrary to other parallel sorting methods, clock speed does not\ndegrade with $n$, and resources scale linearly with input size.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u9896\u7684\u5e76\u884c\u6392\u5e8f\u5668\uff0c\u4e13\u95e8\u9488\u5bf9\u8f93\u5165\u5e76\u884c\u4f46\u8f93\u51fa\u4e32\u884c\u7684\u573a\u666f\uff0c\u5728FPGA\u4e0a\u5b9e\u73b0\u5e76\u9a8c\u8bc1\uff0c\u5b9e\u73b0\u4e86log n\u7684\u9996\u5143\u7d20\u8f93\u51fa\u5ef6\u8fdf\u548cn+log n\u7684\u603b\u6392\u5e8f\u65f6\u95f4\uff0c\u65f6\u949f\u9891\u7387\u4e0d\u968fn\u9000\u5316\uff0c\u8d44\u6e90\u4e0e\u8f93\u5165\u5927\u5c0f\u7ebf\u6027\u6269\u5c55\u3002", "motivation": "\u4f20\u7edf\u4e32\u884c\u6392\u5e8f\u7b97\u6cd5\u53d7O(n log n)\u590d\u6742\u5ea6\u9650\u5236\uff0c\u867d\u7136\u5e76\u884c\u5316\u6280\u672f\u53ef\u4ee5\u7a81\u7834\u8fd9\u4e00\u9650\u5236\uff0c\u4f46\u5b9e\u73b0\u6210\u672c\u9ad8\uff0c\u4e14\u968f\u7740\u6570\u7ec4\u89c4\u6a21\u589e\u5927\uff0c\u6570\u636e\u79fb\u52a8\u6210\u4e3a\u74f6\u9888\uff0c\u53ef\u80fd\u6bd4\u6392\u5e8f\u672c\u8eab\u66f4\u8017\u65f6\u3002\u56e0\u6b64\u9700\u8981\u8bbe\u8ba1\u9002\u7528\u4e8e\u7279\u5b9a\u573a\u666f\uff08\u8f93\u5165\u5e76\u884c\uff0c\u8f93\u51fa\u4e32\u884c\uff09\u7684\u9ad8\u6548\u5e76\u884c\u6392\u5e8f\u5668\u3002", "method": "\u8bbe\u8ba1\u4e86\u4e00\u79cd\u4e13\u95e8\u9488\u5bf9\u8f93\u5165\u5e76\u884c\u4f46\u8f93\u51fa\u4e32\u884c\u573a\u666f\u7684\u65b0\u578b\u5e76\u884c\u6392\u5e8f\u5668\uff0c\u5e76\u5728FPGA\u4e0a\u5b9e\u73b0\u8be5\u8bbe\u8ba1\uff0c\u5728\u91cf\u5b50LDPC\u89e3\u7801\u5668\u7684\u80cc\u666f\u4e0b\u8fdb\u884c\u9a8c\u8bc1\u3002\u8be5\u65b9\u6cd5\u901a\u8fc7\u7279\u6b8a\u7684\u5e76\u884c\u67b6\u6784\u8bbe\u8ba1\uff0c\u907f\u514d\u4e86\u4f20\u7edf\u5e76\u884c\u6392\u5e8f\u65b9\u6cd5\u7684\u7f3a\u9677\u3002", "result": "\u5b9e\u73b0\u4e86log n\u7684\u9996\u5143\u7d20\u8f93\u51fa\u5ef6\u8fdf\uff0c\u603b\u6392\u5e8f\u65f6\u95f4\u4e3an+log n\u3002\u4e0e\u5176\u4ed6\u5e76\u884c\u6392\u5e8f\u65b9\u6cd5\u4e0d\u540c\uff0c\u65f6\u949f\u9891\u7387\u4e0d\u4f1a\u968f\u7740n\u7684\u589e\u52a0\u800c\u964d\u4f4e\uff0c\u786c\u4ef6\u8d44\u6e90\u6d88\u8017\u4e0e\u8f93\u5165\u5927\u5c0f\u5448\u7ebf\u6027\u5173\u7cfb\u3002\u5728FPGA\u4e0a\u7684\u5b9e\u73b0\u9a8c\u8bc1\u4e86\u8bbe\u8ba1\u7684\u6709\u6548\u6027\u3002", "conclusion": "\u63d0\u51fa\u7684\u5e76\u884c\u6392\u5e8f\u5668\u6210\u529f\u89e3\u51b3\u4e86\u8f93\u5165\u5e76\u884c\u8f93\u51fa\u4e32\u884c\u573a\u666f\u4e0b\u7684\u6392\u5e8f\u95ee\u9898\uff0c\u5b9e\u73b0\u4e86\u4f18\u5f02\u7684\u65f6\u95f4\u6027\u80fd\uff08log n\u9996\u5143\u7d20\u5ef6\u8fdf\uff0cn+log n\u603b\u65f6\u95f4\uff09\uff0c\u540c\u65f6\u4fdd\u6301\u4e86\u826f\u597d\u7684\u53ef\u6269\u5c55\u6027\uff08\u7ebf\u6027\u8d44\u6e90\u6269\u5c55\uff0c\u65f6\u949f\u9891\u7387\u4e0d\u9000\u5316\uff09\uff0c\u4e3a\u7279\u5b9a\u5e94\u7528\u573a\u666f\u63d0\u4f9b\u4e86\u9ad8\u6548\u7684\u6392\u5e8f\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2507.16731", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2507.16731", "abs": "https://arxiv.org/abs/2507.16731", "authors": ["Senyao Li", "Haozhao Wang", "Wenchao Xu", "Rui Zhang", "Song Guo", "Jingling Yuan", "Xian Zhong", "Tianwei Zhang", "Ruixuan Li"], "title": "Collaborative Inference and Learning between Edge SLMs and Cloud LLMs: A Survey of Algorithms, Execution, and Open Challenges", "comment": "35 pages, 9 figures", "summary": "As large language models (LLMs) evolve, deploying them solely in the cloud or\ncompressing them for edge devices has become inadequate due to concerns about\nlatency, privacy, cost, and personalization. This survey explores a\ncollaborative paradigm in which cloud-based LLMs and edge-deployed small\nlanguage models (SLMs) cooperate across both inference and training. We present\na unified taxonomy of edge-cloud collaboration strategies. For inference, we\ncategorize approaches into task assignment, task division, and mixture-based\ncollaboration at both task and token granularity, encompassing adaptive\nscheduling, resource-aware offloading, speculative decoding, and modular\nrouting. For training, we review distributed adaptation techniques, including\nparameter alignment, pruning, bidirectional distillation, and\nsmall-model-guided optimization. We further summarize datasets, benchmarks, and\ndeployment cases, and highlight privacy-preserving methods and vertical\napplications. This survey provides the first systematic foundation for LLM-SLM\ncollaboration, bridging system and algorithm co-design to enable efficient,\nscalable, and trustworthy edge-cloud intelligence.", "AI": {"tldr": "\u8fd9\u662f\u4e00\u7bc7\u5173\u4e8e\u5927\u8bed\u8a00\u6a21\u578b(LLM)\u4e0e\u5c0f\u8bed\u8a00\u6a21\u578b(SLM)\u8fb9\u7f18-\u4e91\u7aef\u534f\u4f5c\u7684\u7efc\u8ff0\u8bba\u6587\uff0c\u7cfb\u7edf\u6027\u5730\u5206\u6790\u4e86\u63a8\u7406\u548c\u8bad\u7ec3\u9636\u6bb5\u7684\u534f\u4f5c\u7b56\u7565\uff0c\u4e3a\u6784\u5efa\u9ad8\u6548\u3001\u53ef\u6269\u5c55\u4e14\u53ef\u4fe1\u7684\u8fb9\u7f18-\u4e91\u7aef\u667a\u80fd\u7cfb\u7edf\u63d0\u4f9b\u4e86\u7406\u8bba\u57fa\u7840\u3002", "motivation": "\u968f\u7740\u5927\u8bed\u8a00\u6a21\u578b\u7684\u53d1\u5c55\uff0c\u5355\u7eaf\u7684\u4e91\u7aef\u90e8\u7f72\u6216\u8fb9\u7f18\u8bbe\u5907\u538b\u7f29\u5df2\u65e0\u6cd5\u6ee1\u8db3\u9700\u6c42\uff0c\u5b58\u5728\u5ef6\u8fdf\u3001\u9690\u79c1\u3001\u6210\u672c\u548c\u4e2a\u6027\u5316\u7b49\u95ee\u9898\u3002\u56e0\u6b64\u9700\u8981\u63a2\u7d22\u4e91\u7aefLLM\u4e0e\u8fb9\u7f18SLM\u7684\u534f\u4f5c\u8303\u5f0f\u6765\u89e3\u51b3\u8fd9\u4e9b\u6311\u6218\u3002", "method": "\u63d0\u51fa\u4e86\u8fb9\u7f18-\u4e91\u7aef\u534f\u4f5c\u7b56\u7565\u7684\u7edf\u4e00\u5206\u7c7b\u6cd5\u3002\u63a8\u7406\u65b9\u9762\u5305\u62ec\u4efb\u52a1\u5206\u914d\u3001\u4efb\u52a1\u5206\u89e3\u548c\u6df7\u5408\u534f\u4f5c\u4e09\u7c7b\u65b9\u6cd5\uff0c\u6db5\u76d6\u81ea\u9002\u5e94\u8c03\u5ea6\u3001\u8d44\u6e90\u611f\u77e5\u5378\u8f7d\u3001\u63a8\u6d4b\u89e3\u7801\u548c\u6a21\u5757\u5316\u8def\u7531\u3002\u8bad\u7ec3\u65b9\u9762\u6db5\u76d6\u5206\u5e03\u5f0f\u9002\u5e94\u6280\u672f\uff0c\u5305\u62ec\u53c2\u6570\u5bf9\u9f50\u3001\u526a\u679d\u3001\u53cc\u5411\u84b8\u998f\u548c\u5c0f\u6a21\u578b\u5f15\u5bfc\u4f18\u5316\u3002", "result": "\u7cfb\u7edf\u603b\u7ed3\u4e86\u6570\u636e\u96c6\u3001\u57fa\u51c6\u6d4b\u8bd5\u548c\u90e8\u7f72\u6848\u4f8b\uff0c\u91cd\u70b9\u4ecb\u7ecd\u4e86\u9690\u79c1\u4fdd\u62a4\u65b9\u6cd5\u548c\u5782\u76f4\u5e94\u7528\u573a\u666f\uff0c\u4e3aLLM-SLM\u534f\u4f5c\u63d0\u4f9b\u4e86\u9996\u4e2a\u7cfb\u7edf\u6027\u7684\u7406\u8bba\u6846\u67b6\u3002", "conclusion": "\u8be5\u7efc\u8ff0\u4e3aLLM-SLM\u534f\u4f5c\u5efa\u7acb\u4e86\u7cfb\u7edf\u6027\u57fa\u7840\uff0c\u901a\u8fc7\u7cfb\u7edf\u548c\u7b97\u6cd5\u7684\u534f\u540c\u8bbe\u8ba1\uff0c\u80fd\u591f\u5b9e\u73b0\u9ad8\u6548\u3001\u53ef\u6269\u5c55\u4e14\u53ef\u4fe1\u7684\u8fb9\u7f18-\u4e91\u7aef\u667a\u80fd\u7cfb\u7edf\uff0c\u4e3a\u672a\u6765\u7684\u7814\u7a76\u548c\u5e94\u7528\u63d0\u4f9b\u4e86\u91cd\u8981\u6307\u5bfc\u3002"}}
{"id": "2507.16089", "categories": ["cs.PL", "cs.DB"], "pdf": "https://arxiv.org/pdf/2507.16089", "abs": "https://arxiv.org/abs/2507.16089", "authors": ["Michael J. Sullivan", "Zhibo Chen", "Elvis Pranskevichus", "Robert J. Simmons", "Victor Petrovykh", "Alja\u017e Mur Er\u017een", "Yury Selivanov"], "title": "Querying Graph-Relational Data", "comment": null, "summary": "For applications that store structured data in relational databases, there is\nan impedance mismatch between the flat representations encouraged by relational\ndata models and the deeply nested information that applications expect to\nreceive. In this work, we present the graph-relational database model, which\nprovides a flexible, compositional, and strongly-typed solution to this\n\"object-relational mismatch.\" We formally define the graph-relational database\nmodel and present a static and dynamic semantics for queries. In addition, we\ndiscuss the realization of the graph-relational database model in EdgeQL, a\ngeneral-purpose SQL-style query language, and the Gel system, which compiles\nEdgeQL schemas and queries into PostgreSQL queries. Gel facilitates the kind of\nobject-shaped data manipulation that is frequently provided inefficiently by\nobject-relational mapping (ORM) technologies, while achieving most of the\nefficiency that comes from require writing complex PostgreSQL queries directly.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u56fe\u5173\u7cfb\u6570\u636e\u5e93\u6a21\u578b\uff0c\u901a\u8fc7EdgeQL\u67e5\u8be2\u8bed\u8a00\u548cGel\u7cfb\u7edf\u89e3\u51b3\u4e86\u5173\u7cfb\u6570\u636e\u5e93\u6241\u5e73\u5316\u8868\u793a\u4e0e\u5e94\u7528\u7a0b\u5e8f\u5d4c\u5957\u6570\u636e\u9700\u6c42\u4e4b\u95f4\u7684\u4e0d\u5339\u914d\u95ee\u9898\uff0c\u5728\u4fdd\u6301\u9ad8\u6548\u6027\u7684\u540c\u65f6\u63d0\u4f9b\u4e86\u7075\u6d3b\u7684\u5bf9\u8c61\u5f62\u72b6\u6570\u636e\u64cd\u4f5c\u3002", "motivation": "\u5173\u7cfb\u6570\u636e\u5e93\u7684\u6241\u5e73\u5316\u6570\u636e\u6a21\u578b\u4e0e\u5e94\u7528\u7a0b\u5e8f\u671f\u671b\u63a5\u6536\u7684\u6df1\u5ea6\u5d4c\u5957\u4fe1\u606f\u4e4b\u95f4\u5b58\u5728\u963b\u6297\u4e0d\u5339\u914d\u95ee\u9898\uff0c\u5373\"\u5bf9\u8c61-\u5173\u7cfb\u4e0d\u5339\u914d\"\u95ee\u9898\u3002\u73b0\u6709\u7684\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04(ORM)\u6280\u672f\u867d\u7136\u80fd\u63d0\u4f9b\u5bf9\u8c61\u5f62\u72b6\u7684\u6570\u636e\u64cd\u4f5c\uff0c\u4f46\u6548\u7387\u4f4e\u4e0b\u3002", "method": "\u6b63\u5f0f\u5b9a\u4e49\u4e86\u56fe\u5173\u7cfb\u6570\u636e\u5e93\u6a21\u578b\uff0c\u4e3a\u67e5\u8be2\u63d0\u4f9b\u4e86\u9759\u6001\u548c\u52a8\u6001\u8bed\u4e49\u3002\u5f00\u53d1\u4e86EdgeQL\u8fd9\u4e00\u901a\u7528\u7684SQL\u98ce\u683c\u67e5\u8be2\u8bed\u8a00\uff0c\u4ee5\u53caGel\u7cfb\u7edf\u6765\u5b9e\u73b0\u8be5\u6a21\u578b\u3002Gel\u7cfb\u7edf\u5c06EdgeQL\u6a21\u5f0f\u548c\u67e5\u8be2\u7f16\u8bd1\u6210PostgreSQL\u67e5\u8be2\u3002", "result": "Gel\u7cfb\u7edf\u80fd\u591f\u9ad8\u6548\u5730\u5b9e\u73b0\u5bf9\u8c61\u5f62\u72b6\u7684\u6570\u636e\u64cd\u4f5c\uff0c\u5176\u6027\u80fd\u63a5\u8fd1\u76f4\u63a5\u7f16\u5199\u590d\u6742PostgreSQL\u67e5\u8be2\u7684\u6548\u7387\uff0c\u540c\u65f6\u907f\u514d\u4e86\u4f20\u7edfORM\u6280\u672f\u7684\u4f4e\u6548\u95ee\u9898\u3002", "conclusion": "\u56fe\u5173\u7cfb\u6570\u636e\u5e93\u6a21\u578b\u901a\u8fc7EdgeQL\u548cGel\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7075\u6d3b\u3001\u53ef\u7ec4\u5408\u4e14\u5f3a\u7c7b\u578b\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u6709\u6548\u89e3\u51b3\u4e86\u5bf9\u8c61-\u5173\u7cfb\u4e0d\u5339\u914d\u95ee\u9898\uff0c\u5728\u4fdd\u6301\u6570\u636e\u64cd\u4f5c\u4fbf\u5229\u6027\u7684\u540c\u65f6\u5b9e\u73b0\u4e86\u9ad8\u6548\u7684\u67e5\u8be2\u6027\u80fd\u3002"}}
{"id": "2507.16379", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2507.16379", "abs": "https://arxiv.org/abs/2507.16379", "authors": ["Ondrej Vlcek", "Vojtech Mrazek"], "title": "ApproxGNN: A Pretrained GNN for Parameter Prediction in Design Space Exploration for Approximate Computing", "comment": "To appear at ICCAD 2025", "summary": "Approximate computing offers promising energy efficiency benefits for\nerror-tolerant applications, but discovering optimal approximations requires\nextensive design space exploration (DSE). Predicting the accuracy of circuits\ncomposed of approximate components without performing complete synthesis\nremains a challenging problem. Current machine learning approaches used to\nautomate this task require retraining for each new circuit configuration,\nmaking them computationally expensive and time-consuming. This paper presents\nApproxGNN, a construction methodology for a pre-trained graph neural network\nmodel predicting QoR and HW cost of approximate accelerators employing\napproximate adders from a library. This approach is applicable in DSE for\nassignment of approximate components to operations in accelerator. Our approach\nintroduces novel component feature extraction based on learned embeddings\nrather than traditional error metrics, enabling improved transferability to\nunseen circuits. ApproxGNN models can be trained with a small number of\napproximate components, supports transfer to multiple prediction tasks,\nutilizes precomputed embeddings for efficiency, and significantly improves\naccuracy of the prediction of approximation error. On a set of image\nconvolutional filters, our experimental results demonstrate that the proposed\nembeddings improve prediction accuracy (mean square error) by 50% compared to\nconventional methods. Furthermore, the overall prediction accuracy is 30%\nbetter than statistical machine learning approaches without fine-tuning and 54%\nbetter with fast finetuning.", "AI": {"tldr": "\u672c\u6587\u63d0\u51faApproxGNN\uff0c\u4e00\u4e2a\u57fa\u4e8e\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u9884\u8bad\u7ec3\u6a21\u578b\uff0c\u7528\u4e8e\u9884\u6d4b\u8fd1\u4f3c\u52a0\u901f\u5668\u7684\u8d28\u91cf\u548c\u786c\u4ef6\u6210\u672c\uff0c\u901a\u8fc7\u5b66\u4e60\u5d4c\u5165\u7684\u7ec4\u4ef6\u7279\u5f81\u63d0\u53d6\u65b9\u6cd5\uff0c\u5728\u8bbe\u8ba1\u7a7a\u95f4\u63a2\u7d22\u4e2d\u663e\u8457\u63d0\u9ad8\u9884\u6d4b\u7cbe\u5ea6\u5e76\u964d\u4f4e\u8ba1\u7b97\u6210\u672c\u3002", "motivation": "\u73b0\u6709\u673a\u5668\u5b66\u4e60\u65b9\u6cd5\u9700\u8981\u4e3a\u6bcf\u4e2a\u65b0\u7535\u8def\u914d\u7f6e\u91cd\u65b0\u8bad\u7ec3\uff0c\u8ba1\u7b97\u6210\u672c\u9ad8\u4e14\u8017\u65f6\uff1b\u9884\u6d4b\u7531\u8fd1\u4f3c\u7ec4\u4ef6\u6784\u6210\u7684\u7535\u8def\u7cbe\u5ea6\u800c\u65e0\u9700\u5b8c\u6574\u7efc\u5408\u4ecd\u662f\u6311\u6218\u6027\u95ee\u9898\uff1b\u9700\u8981\u4e00\u79cd\u9ad8\u6548\u4e14\u53ef\u8fc1\u79fb\u7684\u65b9\u6cd5\u6765\u81ea\u52a8\u5316\u8fd1\u4f3c\u8ba1\u7b97\u7684\u8bbe\u8ba1\u7a7a\u95f4\u63a2\u7d22\u3002", "method": "\u63d0\u51faApproxGNN\u6784\u5efa\u65b9\u6cd5\uff0c\u4f7f\u7528\u9884\u8bad\u7ec3\u56fe\u795e\u7ecf\u7f51\u7edc\u6a21\u578b\u9884\u6d4b\u8fd1\u4f3c\u52a0\u901f\u5668\u7684QoR\u548c\u786c\u4ef6\u6210\u672c\uff1b\u5f15\u5165\u57fa\u4e8e\u5b66\u4e60\u5d4c\u5165\u7684\u65b0\u9896\u7ec4\u4ef6\u7279\u5f81\u63d0\u53d6\u65b9\u6cd5\uff0c\u66ff\u4ee3\u4f20\u7edf\u8bef\u5dee\u5ea6\u91cf\uff1b\u652f\u6301\u5c11\u91cf\u8fd1\u4f3c\u7ec4\u4ef6\u8bad\u7ec3\u3001\u591a\u9884\u6d4b\u4efb\u52a1\u8fc1\u79fb\u3001\u9884\u8ba1\u7b97\u5d4c\u5165\u63d0\u9ad8\u6548\u7387\u3002", "result": "\u5728\u56fe\u50cf\u5377\u79ef\u6ee4\u6ce2\u5668\u6570\u636e\u96c6\u4e0a\uff0c\u6240\u63d0\u51fa\u7684\u5d4c\u5165\u65b9\u6cd5\u6bd4\u4f20\u7edf\u65b9\u6cd5\u7684\u9884\u6d4b\u7cbe\u5ea6\uff08\u5747\u65b9\u8bef\u5dee\uff09\u63d0\u9ad850%\uff1b\u6574\u4f53\u9884\u6d4b\u7cbe\u5ea6\u6bd4\u7edf\u8ba1\u673a\u5668\u5b66\u4e60\u65b9\u6cd5\u5728\u65e0\u5fae\u8c03\u60c5\u51b5\u4e0b\u63d0\u9ad830%\uff0c\u5728\u5feb\u901f\u5fae\u8c03\u60c5\u51b5\u4e0b\u63d0\u9ad854%\u3002", "conclusion": "ApproxGNN\u901a\u8fc7\u57fa\u4e8e\u5b66\u4e60\u5d4c\u5165\u7684\u7279\u5f81\u63d0\u53d6\u548c\u56fe\u795e\u7ecf\u7f51\u7edc\u67b6\u6784\uff0c\u6210\u529f\u89e3\u51b3\u4e86\u8fd1\u4f3c\u8ba1\u7b97\u8bbe\u8ba1\u7a7a\u95f4\u63a2\u7d22\u4e2d\u7684\u9884\u6d4b\u7cbe\u5ea6\u548c\u8ba1\u7b97\u6548\u7387\u95ee\u9898\uff0c\u4e3a\u8fd1\u4f3c\u52a0\u901f\u5668\u7684\u81ea\u52a8\u5316\u8bbe\u8ba1\u63d0\u4f9b\u4e86\u6709\u6548\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2507.16781", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2507.16781", "abs": "https://arxiv.org/abs/2507.16781", "authors": ["Imran Latif", "Muhammad Ali Shafique", "Hayat Ullah", "Alex C. Newkirk", "Xi Yu", "Arslan Munir"], "title": "Cooling Matters: Benchmarking Large Language Models and Vision-Language Models on Liquid-Cooled Versus Air-Cooled H100 GPU Systems", "comment": "11 pages", "summary": "The unprecedented growth in artificial intelligence (AI) workloads, recently\ndominated by large language models (LLMs) and vision-language models (VLMs),\nhas intensified power and cooling demands in data centers. This study\nbenchmarks LLMs and VLMs on two HGX nodes, each with 8x NVIDIA H100 graphics\nprocessing units (GPUs), using liquid and air cooling. Leveraging GPU Burn,\nWeights and Biases, and IPMItool, we collect detailed thermal, power, and\ncomputation data. Results show that the liquid-cooled systems maintain GPU\ntemperatures between 41-50 degrees Celsius, while the air-cooled counterparts\nfluctuate between 54-72 degrees Celsius under load. This thermal stability of\nliquid-cooled systems yields 17 percent higher performance (54 TFLOPs per GPU\nvs. 46 TFLOPs per GPU), improved performance per watt, reduced energy overhead,\nand greater system efficiency than the air-cooled counterparts. These findings\nunderscore the energy and sustainability benefits of liquid cooling, offering a\ncompelling path forward for hyperscale data centers s", "AI": {"tldr": "\u672c\u7814\u7a76\u6bd4\u8f83\u4e86\u6db2\u51b7\u548c\u98ce\u51b7\u7cfb\u7edf\u5728\u8fd0\u884c\u5927\u8bed\u8a00\u6a21\u578b\u548c\u89c6\u89c9\u8bed\u8a00\u6a21\u578b\u65f6\u7684\u6027\u80fd\u5dee\u5f02\uff0c\u53d1\u73b0\u6db2\u51b7\u7cfb\u7edf\u5728\u6e29\u5ea6\u63a7\u5236\u3001\u8ba1\u7b97\u6027\u80fd\u548c\u80fd\u6548\u65b9\u9762\u5747\u663e\u8457\u4f18\u4e8e\u98ce\u51b7\u7cfb\u7edf\u3002", "motivation": "\u968f\u7740AI\u5de5\u4f5c\u8d1f\u8f7d\uff08\u7279\u522b\u662f\u5927\u8bed\u8a00\u6a21\u578b\u548c\u89c6\u89c9\u8bed\u8a00\u6a21\u578b\uff09\u7684\u5feb\u901f\u589e\u957f\uff0c\u6570\u636e\u4e2d\u5fc3\u9762\u4e34\u7740\u65e5\u76ca\u4e25\u5cfb\u7684\u529f\u8017\u548c\u6563\u70ed\u6311\u6218\uff0c\u9700\u8981\u8bc4\u4f30\u4e0d\u540c\u51b7\u5374\u65b9\u6848\u7684\u6548\u679c\u4ee5\u4f18\u5316\u6570\u636e\u4e2d\u5fc3\u7684\u80fd\u6548\u548c\u53ef\u6301\u7eed\u6027\u3002", "method": "\u4f7f\u7528\u4e24\u4e2aHGX\u8282\u70b9\uff08\u6bcf\u4e2a\u914d\u59078\u5757NVIDIA H100 GPU\uff09\u5206\u522b\u91c7\u7528\u6db2\u51b7\u548c\u98ce\u51b7\u65b9\u6848\uff0c\u901a\u8fc7GPU Burn\u3001Weights and Biases\u548cIPMItool\u7b49\u5de5\u5177\u6536\u96c6\u8be6\u7ec6\u7684\u70ed\u529b\u3001\u529f\u8017\u548c\u8ba1\u7b97\u6570\u636e\uff0c\u5bf9\u5927\u8bed\u8a00\u6a21\u578b\u548c\u89c6\u89c9\u8bed\u8a00\u6a21\u578b\u8fdb\u884c\u57fa\u51c6\u6d4b\u8bd5\u3002", "result": "\u6db2\u51b7\u7cfb\u7edfGPU\u6e29\u5ea6\u7ef4\u6301\u572841-50\u00b0C\u4e4b\u95f4\uff0c\u800c\u98ce\u51b7\u7cfb\u7edf\u5728\u8d1f\u8f7d\u4e0b\u6e29\u5ea6\u6ce2\u52a8\u572854-72\u00b0C\uff1b\u6db2\u51b7\u7cfb\u7edf\u6027\u80fd\u63d0\u534717%\uff08\u6bcfGPU 54 TFLOPs vs 46 TFLOPs\uff09\uff0c\u5177\u6709\u66f4\u597d\u7684\u6bcf\u74e6\u6027\u80fd\u3001\u66f4\u4f4e\u7684\u80fd\u8017\u5f00\u9500\u548c\u66f4\u9ad8\u7684\u7cfb\u7edf\u6548\u7387\u3002", "conclusion": "\u6db2\u51b7\u7cfb\u7edf\u7684\u70ed\u7a33\u5b9a\u6027\u5e26\u6765\u4e86\u663e\u8457\u7684\u6027\u80fd\u548c\u80fd\u6548\u4f18\u52bf\uff0c\u4e3a\u8d85\u5927\u89c4\u6a21\u6570\u636e\u4e2d\u5fc3\u63d0\u4f9b\u4e86\u5728\u80fd\u6e90\u6548\u7387\u548c\u53ef\u6301\u7eed\u6027\u65b9\u9762\u7684\u4f18\u5316\u8def\u5f84\uff0c\u8bc1\u660e\u4e86\u6db2\u51b7\u6280\u672f\u5728AI\u5de5\u4f5c\u8d1f\u8f7d\u4e2d\u7684\u91cd\u8981\u4ef7\u503c\u3002"}}
{"id": "2507.16660", "categories": ["cs.PL"], "pdf": "https://arxiv.org/pdf/2507.16660", "abs": "https://arxiv.org/abs/2507.16660", "authors": ["Xuran Cai"], "title": "Enhancing Compiler Optimization Efficiency through Grammatical Decompositions of Control-Flow Graphs", "comment": null, "summary": "This thesis addresses the complexities of compiler optimizations, such as\nregister allocation and Lifetime-optimal Speculative Partial Redundancy\nElimination (LOSPRE), which are often handled using tree decomposition\nalgorithms. However, these methods frequently overlook important sparsity\naspects of Control Flow Graphs (CFGs) and result in high computational costs.\nWe introduce the SPL (Series-Parallel-Loop) decomposition, a novel framework\nthat offers optimal solutions to these challenges. A key contribution is the\nformulation of a general solution for Partial Constraint Satisfaction Problems\n(PCSPs) within graph structures, applied to three optimization problems. First,\nSPL decomposition enhances register allocation by accurately modeling variable\ninterference graphs, leading to efficient register assignments and improved\nperformance across benchmarks. Second, it optimizes LOSPRE by effectively\nidentifying and eliminating redundancies in program execution. Finally, the\nthesis focuses on optimizing the placement of bank selection instructions to\nenhance data retrieval efficiency and reduce latency. Extensive experimentation\ndemonstrates significant performance improvements over existing methods,\nestablishing SPL decomposition as a powerful tool for complex compiler\noptimizations, including register allocation, LOSPRE, and bank selection.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86SPL\uff08Series-Parallel-Loop\uff09\u5206\u89e3\u6846\u67b6\uff0c\u7528\u4e8e\u89e3\u51b3\u7f16\u8bd1\u5668\u4f18\u5316\u4e2d\u7684\u5bc4\u5b58\u5668\u5206\u914d\u3001LOSPRE\u548c\u94f6\u884c\u9009\u62e9\u7b49\u95ee\u9898\uff0c\u76f8\u6bd4\u4f20\u7edf\u6811\u5206\u89e3\u7b97\u6cd5\u80fd\u591f\u66f4\u597d\u5730\u5904\u7406\u63a7\u5236\u6d41\u56fe\u7684\u7a00\u758f\u6027\u7279\u5f81\u5e76\u964d\u4f4e\u8ba1\u7b97\u6210\u672c\u3002", "motivation": "\u4f20\u7edf\u7684\u7f16\u8bd1\u5668\u4f18\u5316\u65b9\u6cd5\uff08\u5982\u5bc4\u5b58\u5668\u5206\u914d\u548cLOSPRE\uff09\u4f7f\u7528\u6811\u5206\u89e3\u7b97\u6cd5\u65f6\u5ffd\u7565\u4e86\u63a7\u5236\u6d41\u56fe\u7684\u91cd\u8981\u7a00\u758f\u6027\u7279\u5f81\uff0c\u5bfc\u81f4\u8ba1\u7b97\u6210\u672c\u8fc7\u9ad8\uff0c\u9700\u8981\u4e00\u79cd\u65b0\u7684\u6846\u67b6\u6765\u89e3\u51b3\u8fd9\u4e9b\u6311\u6218\u3002", "method": "\u63d0\u51faSPL\uff08Series-Parallel-Loop\uff09\u5206\u89e3\u6846\u67b6\uff0c\u5c06\u56fe\u7ed3\u6784\u4e2d\u7684\u90e8\u5206\u7ea6\u675f\u6ee1\u8db3\u95ee\u9898\uff08PCSPs\uff09\u8fdb\u884c\u901a\u7528\u5316\u6c42\u89e3\uff0c\u5e76\u5c06\u5176\u5e94\u7528\u4e8e\u4e09\u4e2a\u4f18\u5316\u95ee\u9898\uff1a\u5bc4\u5b58\u5668\u5206\u914d\u3001LOSPRE\u4f18\u5316\u548c\u94f6\u884c\u9009\u62e9\u6307\u4ee4\u653e\u7f6e\u4f18\u5316\u3002", "result": "SPL\u5206\u89e3\u5728\u5bc4\u5b58\u5668\u5206\u914d\u4e2d\u80fd\u591f\u51c6\u786e\u5efa\u6a21\u53d8\u91cf\u5e72\u6270\u56fe\uff0c\u5b9e\u73b0\u9ad8\u6548\u7684\u5bc4\u5b58\u5668\u5206\u914d\uff1b\u5728LOSPRE\u4e2d\u6709\u6548\u8bc6\u522b\u548c\u6d88\u9664\u7a0b\u5e8f\u6267\u884c\u4e2d\u7684\u5197\u4f59\uff1b\u5728\u94f6\u884c\u9009\u62e9\u6307\u4ee4\u653e\u7f6e\u4e2d\u63d0\u9ad8\u6570\u636e\u68c0\u7d22\u6548\u7387\u5e76\u51cf\u5c11\u5ef6\u8fdf\u3002\u5b9e\u9a8c\u8868\u660e\u76f8\u6bd4\u73b0\u6709\u65b9\u6cd5\u6709\u663e\u8457\u7684\u6027\u80fd\u63d0\u5347\u3002", "conclusion": "SPL\u5206\u89e3\u88ab\u8bc1\u660e\u662f\u5904\u7406\u590d\u6742\u7f16\u8bd1\u5668\u4f18\u5316\u95ee\u9898\u7684\u5f3a\u5927\u5de5\u5177\uff0c\u5305\u62ec\u5bc4\u5b58\u5668\u5206\u914d\u3001LOSPRE\u548c\u94f6\u884c\u9009\u62e9\u7b49\uff0c\u4e3a\u7f16\u8bd1\u5668\u4f18\u5316\u63d0\u4f9b\u4e86\u65b0\u7684\u6709\u6548\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2507.16391", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2507.16391", "abs": "https://arxiv.org/abs/2507.16391", "authors": ["Chenqi Lin", "Kang Yang", "Tianshi Xu", "Ling Liang", "Yufei Wang", "Zhaohui Chen", "Runsheng Wang", "Mingyu Gao", "Meng Li"], "title": "Ironman: Accelerating Oblivious Transfer Extension for Privacy-Preserving AI with Near-Memory Processing", "comment": null, "summary": "With the wide application of machine learning (ML), privacy concerns arise\nwith user data as they may contain sensitive information. Privacy-preserving ML\n(PPML) based on cryptographic primitives has emerged as a promising solution in\nwhich an ML model is directly computed on the encrypted data to provide a\nformal privacy guarantee. However, PPML frameworks heavily rely on the\noblivious transfer (OT) primitive to compute nonlinear functions. OT mainly\ninvolves the computation of single-point correlated OT (SPCOT) and learning\nparity with noise (LPN) operations. As OT is still computed extensively on\ngeneral-purpose CPUs, it becomes the latency bottleneck of modern PPML\nframeworks.\n  In this paper, we propose a novel OT accelerator, dubbed Ironman, to\nsignificantly increase the efficiency of OT and the overall PPML framework. We\nobserve that SPCOT is computation-bounded, and thus propose a hardware-friendly\nSPCOT algorithm with a customized accelerator to improve SPCOT computation\nthroughput. In contrast, LPN is memory-bandwidth-bounded due to irregular\nmemory access patterns. Hence, we further leverage the near-memory processing\n(NMP) architecture equipped with memory-side cache and index sorting to improve\neffective memory bandwidth. With extensive experiments, we demonstrate Ironman\nachieves a 39.2-237.4 times improvement in OT throughput across different NMP\nconfigurations compared to the full-thread CPU implementation. For different\nPPML frameworks, Ironman demonstrates a 2.1-3.4 times reduction in end-to-end\nlatency for both CNN and Transformer models.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u540d\u4e3aIronman\u7684OT\u52a0\u901f\u5668\uff0c\u901a\u8fc7\u9488\u5bf9SPCOT\u548cLPN\u64cd\u4f5c\u7684\u4e0d\u540c\u7279\u70b9\u8bbe\u8ba1\u4e13\u95e8\u7684\u786c\u4ef6\u52a0\u901f\u65b9\u6848\uff0c\u663e\u8457\u63d0\u5347\u4e86\u9690\u79c1\u4fdd\u62a4\u673a\u5668\u5b66\u4e60\u6846\u67b6\u4e2d\u4e0d\u7ecf\u610f\u4f20\u8f93\u7684\u6548\u7387\uff0c\u5b9e\u73b0\u4e8639.2-237.4\u500d\u7684OT\u541e\u5410\u91cf\u63d0\u5347\u548c2.1-3.4\u500d\u7684\u7aef\u5230\u7aef\u5ef6\u8fdf\u964d\u4f4e\u3002", "motivation": "\u968f\u7740\u673a\u5668\u5b66\u4e60\u7684\u5e7f\u6cdb\u5e94\u7528\uff0c\u7528\u6237\u6570\u636e\u7684\u9690\u79c1\u95ee\u9898\u65e5\u76ca\u7a81\u51fa\u3002\u57fa\u4e8e\u5bc6\u7801\u5b66\u539f\u8bed\u7684\u9690\u79c1\u4fdd\u62a4\u673a\u5668\u5b66\u4e60(PPML)\u662f\u4e00\u4e2a\u6709\u524d\u666f\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u73b0\u6709PPML\u6846\u67b6\u4e25\u91cd\u4f9d\u8d56\u4e0d\u7ecf\u610f\u4f20\u8f93(OT)\u539f\u8bed\u6765\u8ba1\u7b97\u975e\u7ebf\u6027\u51fd\u6570\uff0c\u800cOT\u4e3b\u8981\u5728\u901a\u7528CPU\u4e0a\u8ba1\u7b97\uff0c\u6210\u4e3a\u4e86\u73b0\u4ee3PPML\u6846\u67b6\u7684\u5ef6\u8fdf\u74f6\u9888\u3002", "method": "\u63d0\u51faIronman OT\u52a0\u901f\u5668\uff0c\u9488\u5bf9OT\u4e2d\u7684\u4e24\u4e2a\u4e3b\u8981\u64cd\u4f5c\u91c7\u7528\u4e0d\u540c\u7684\u4f18\u5316\u7b56\u7565\uff1a(1)\u5bf9\u4e8e\u8ba1\u7b97\u5bc6\u96c6\u578b\u7684SPCOT\u64cd\u4f5c\uff0c\u8bbe\u8ba1\u4e86\u786c\u4ef6\u53cb\u597d\u7684SPCOT\u7b97\u6cd5\u548c\u5b9a\u5236\u5316\u52a0\u901f\u5668\uff1b(2)\u5bf9\u4e8e\u56e0\u5185\u5b58\u8bbf\u95ee\u6a21\u5f0f\u4e0d\u89c4\u5219\u800c\u53d7\u5185\u5b58\u5e26\u5bbd\u9650\u5236\u7684LPN\u64cd\u4f5c\uff0c\u91c7\u7528\u8fd1\u5185\u5b58\u5904\u7406(NMP)\u67b6\u6784\uff0c\u914d\u5907\u5185\u5b58\u4fa7\u7f13\u5b58\u548c\u7d22\u5f15\u6392\u5e8f\u6765\u63d0\u9ad8\u6709\u6548\u5185\u5b58\u5e26\u5bbd\u3002", "result": "\u5b9e\u9a8c\u7ed3\u679c\u663e\u793a\uff0c\u5728\u4e0d\u540cNMP\u914d\u7f6e\u4e0b\uff0cIronman\u76f8\u6bd4\u5168\u7ebf\u7a0bCPU\u5b9e\u73b0\u5728OT\u541e\u5410\u91cf\u4e0a\u53d6\u5f97\u4e8639.2-237.4\u500d\u7684\u63d0\u5347\u3002\u5728\u4e0d\u540cPPML\u6846\u67b6\u4e2d\uff0c\u5bf9\u4e8eCNN\u548cTransformer\u6a21\u578b\uff0cIronman\u5b9e\u73b0\u4e862.1-3.4\u500d\u7684\u7aef\u5230\u7aef\u5ef6\u8fdf\u964d\u4f4e\u3002", "conclusion": "Ironman\u901a\u8fc7\u9488\u5bf9OT\u64cd\u4f5c\u4e2d\u4e0d\u540c\u7ec4\u4ef6\u7684\u7279\u5b9a\u4f18\u5316\u7b56\u7565\uff0c\u6210\u529f\u89e3\u51b3\u4e86PPML\u6846\u67b6\u4e2d\u7684\u5ef6\u8fdf\u74f6\u9888\u95ee\u9898\uff0c\u4e3a\u9690\u79c1\u4fdd\u62a4\u673a\u5668\u5b66\u4e60\u7684\u5b9e\u9645\u5e94\u7528\u63d0\u4f9b\u4e86\u9ad8\u6548\u7684\u786c\u4ef6\u52a0\u901f\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2507.16628", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2507.16628", "abs": "https://arxiv.org/abs/2507.16628", "authors": ["Rajpreet Singh", "Vidhi Kothari"], "title": "Augmenting Von Neumann's Architecture for an Intelligent Future", "comment": "6 pages, 2 figures", "summary": "This work presents a novel computer architecture that extends the Von Neumann\nmodel with a dedicated Reasoning Unit (RU) to enable native artificial general\nintelligence capabilities. The RU functions as a specialized co-processor that\nexecutes symbolic inference, multi-agent coordination, and hybrid\nsymbolic-neural computation as fundamental architectural primitives. This\nhardware-embedded approach allows autonomous agents to perform goal-directed\nplanning, dynamic knowledge manipulation, and introspective reasoning directly\nwithin the computational substrate at system scale. The architecture\nincorporates a reasoning-specific instruction set architecture, parallel\nsymbolic processing pipelines, agent-aware kernel abstractions, and a unified\nmemory hierarchy that seamlessly integrates cognitive and numerical workloads.\nThrough systematic co-design across hardware, operating system, and agent\nruntime layers, this architecture establishes a computational foundation where\nreasoning, learning, and adaptation emerge as intrinsic execution properties\nrather than software abstractions, potentially enabling the development of\ngeneral-purpose intelligent machines.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u6269\u5c55\u51af\u00b7\u8bfa\u4f0a\u66fc\u6a21\u578b\u7684\u65b0\u578b\u8ba1\u7b97\u673a\u67b6\u6784\uff0c\u901a\u8fc7\u6dfb\u52a0\u4e13\u7528\u63a8\u7406\u5355\u5143(RU)\u6765\u5b9e\u73b0\u539f\u751f\u4eba\u5de5\u901a\u7528\u667a\u80fd\u80fd\u529b\uff0c\u8be5\u67b6\u6784\u5c06\u63a8\u7406\u3001\u5b66\u4e60\u548c\u9002\u5e94\u4f5c\u4e3a\u5185\u5728\u6267\u884c\u5c5e\u6027\u800c\u975e\u8f6f\u4ef6\u62bd\u8c61\u3002", "motivation": "\u4f20\u7edf\u8ba1\u7b97\u67b6\u6784\u65e0\u6cd5\u539f\u751f\u652f\u6301\u4eba\u5de5\u901a\u7528\u667a\u80fd\u6240\u9700\u7684\u7b26\u53f7\u63a8\u7406\u3001\u591a\u667a\u80fd\u4f53\u534f\u8c03\u548c\u6df7\u5408\u7b26\u53f7-\u795e\u7ecf\u8ba1\u7b97\u80fd\u529b\uff0c\u9700\u8981\u4e00\u79cd\u80fd\u591f\u5728\u786c\u4ef6\u5c42\u9762\u76f4\u63a5\u652f\u6301\u8ba4\u77e5\u8ba1\u7b97\u7684\u65b0\u578b\u67b6\u6784\u3002", "method": "\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u6269\u5c55\u51af\u00b7\u8bfa\u4f0a\u66fc\u6a21\u578b\u7684\u65b0\u67b6\u6784\uff0c\u6838\u5fc3\u662f\u4e13\u7528\u63a8\u7406\u5355\u5143(RU)\u4f5c\u4e3a\u534f\u5904\u7406\u5668\uff0c\u914d\u5408\u63a8\u7406\u4e13\u7528\u6307\u4ee4\u96c6\u3001\u5e76\u884c\u7b26\u53f7\u5904\u7406\u7ba1\u9053\u3001\u667a\u80fd\u4f53\u611f\u77e5\u7684\u5185\u6838\u62bd\u8c61\uff0c\u4ee5\u53ca\u7edf\u4e00\u7684\u5185\u5b58\u5c42\u6b21\u7ed3\u6784\uff0c\u901a\u8fc7\u786c\u4ef6\u3001\u64cd\u4f5c\u7cfb\u7edf\u548c\u667a\u80fd\u4f53\u8fd0\u884c\u65f6\u7684\u7cfb\u7edf\u5316\u534f\u540c\u8bbe\u8ba1\u5b9e\u73b0\u3002", "result": "\u8be5\u67b6\u6784\u80fd\u591f\u8ba9\u81ea\u4e3b\u667a\u80fd\u4f53\u5728\u7cfb\u7edf\u7ea7\u522b\u76f4\u63a5\u6267\u884c\u76ee\u6807\u5bfc\u5411\u89c4\u5212\u3001\u52a8\u6001\u77e5\u8bc6\u64cd\u4f5c\u548c\u5185\u7701\u63a8\u7406\uff0c\u5b9e\u73b0\u4e86\u8ba4\u77e5\u548c\u6570\u503c\u8ba1\u7b97\u8d1f\u8f7d\u7684\u65e0\u7f1d\u96c6\u6210\uff0c\u4f7f\u63a8\u7406\u3001\u5b66\u4e60\u548c\u9002\u5e94\u6210\u4e3a\u5185\u5728\u7684\u6267\u884c\u5c5e\u6027\u3002", "conclusion": "\u901a\u8fc7\u786c\u4ef6\u5d4c\u5165\u7684\u63a8\u7406\u80fd\u529b\uff0c\u8be5\u67b6\u6784\u4e3a\u5f00\u53d1\u901a\u7528\u667a\u80fd\u673a\u5668\u5efa\u7acb\u4e86\u8ba1\u7b97\u57fa\u7840\uff0c\u6709\u6f5c\u529b\u5b9e\u73b0\u771f\u6b63\u7684\u4eba\u5de5\u901a\u7528\u667a\u80fd\u7cfb\u7edf\uff0c\u5176\u4e2d\u8ba4\u77e5\u80fd\u529b\u4e0d\u518d\u662f\u8f6f\u4ef6\u5c42\u9762\u7684\u62bd\u8c61\uff0c\u800c\u662f\u8ba1\u7b97\u57fa\u7840\u8bbe\u65bd\u7684\u56fa\u6709\u7279\u6027\u3002"}}
{"id": "2507.16793", "categories": ["cs.AR"], "pdf": "https://arxiv.org/pdf/2507.16793", "abs": "https://arxiv.org/abs/2507.16793", "authors": ["Jianqiao Mo", "Alhad Daftardar", "Joey Ah-kiow", "Kaiyue Guo", "Benedikt B\u00fcnz", "Siddharth Garg", "Brandon Reagen"], "title": "MTU: The Multifunction Tree Unit in zkSpeed for Accelerating HyperPlonk", "comment": null, "summary": "Zero-Knowledge Proofs (ZKPs) are critical for privacy preservation and\nverifiable computation. Many ZKPs rely on kernels such as the SumCheck protocol\nand Merkle Tree commitments, which enable their security properties. These\nkernels exhibit balanced binary tree computational patterns, which enable\nefficient hardware acceleration. Prior work has investigated accelerating these\nkernels as part of an overarching ZKP protocol; however, a focused study of how\nto best exploit the underlying tree pattern for hardware efficiency remains\nlimited. We conduct a systematic evaluation of these tree-based workloads under\ndifferent traversal strategies, analyzing performance on multi-threaded CPUs\nand a hardware accelerator, the Multifunction Tree Unit (MTU). We introduce a\nhardware-friendly Hybrid Traversal for binary tree that improves parallelism\nand scalability while significantly reducing memory traffic on hardware. Our\nresults show that MTU achieves up to 1478$\\times$ speedup over CPU at DDR-level\nbandwidth and that our hybrid traversal outperforms as standalone approach by\nup to 3$\\times$. These findings offer practical guidance for designing\nefficient hardware accelerators for ZKP workloads with binary tree structures.", "AI": {"tldr": "\u672c\u6587\u7814\u7a76\u4e86\u96f6\u77e5\u8bc6\u8bc1\u660e(ZKP)\u4e2d\u57fa\u4e8e\u4e8c\u53c9\u6811\u8ba1\u7b97\u6a21\u5f0f\u7684\u786c\u4ef6\u52a0\u901f\u4f18\u5316\uff0c\u63d0\u51fa\u4e86\u6df7\u5408\u904d\u5386\u7b56\u7565\u548c\u591a\u529f\u80fd\u6811\u5355\u5143(MTU)\u786c\u4ef6\u52a0\u901f\u5668\uff0c\u5728DDR\u5e26\u5bbd\u4e0b\u5b9e\u73b0\u4e86\u76f8\u6bd4CPU\u9ad8\u8fbe1478\u500d\u7684\u6027\u80fd\u63d0\u5347\u3002", "motivation": "\u96f6\u77e5\u8bc6\u8bc1\u660e\u5bf9\u9690\u79c1\u4fdd\u62a4\u548c\u53ef\u9a8c\u8bc1\u8ba1\u7b97\u81f3\u5173\u91cd\u8981\uff0c\u5176\u6838\u5fc3\u7b97\u6cd5\u5982SumCheck\u534f\u8bae\u548cMerkle\u6811\u627f\u8bfa\u5177\u6709\u5e73\u8861\u4e8c\u53c9\u6811\u8ba1\u7b97\u6a21\u5f0f\uff0c\u9002\u5408\u786c\u4ef6\u52a0\u901f\u3002\u7136\u800c\uff0c\u9488\u5bf9\u5982\u4f55\u6700\u4f18\u5229\u7528\u5e95\u5c42\u6811\u7ed3\u6784\u6a21\u5f0f\u6765\u63d0\u9ad8\u786c\u4ef6\u6548\u7387\u7684\u4e13\u95e8\u7814\u7a76\u4ecd\u7136\u6709\u9650\u3002", "method": "\u5bf9\u57fa\u4e8e\u6811\u7684\u5de5\u4f5c\u8d1f\u8f7d\u5728\u4e0d\u540c\u904d\u5386\u7b56\u7565\u4e0b\u8fdb\u884c\u7cfb\u7edf\u6027\u8bc4\u4f30\uff0c\u5206\u6790\u591a\u7ebf\u7a0bCPU\u548c\u786c\u4ef6\u52a0\u901f\u5668(\u591a\u529f\u80fd\u6811\u5355\u5143MTU)\u7684\u6027\u80fd\u8868\u73b0\u3002\u63d0\u51fa\u4e86\u4e00\u79cd\u786c\u4ef6\u53cb\u597d\u7684\u6df7\u5408\u904d\u5386\u65b9\u6cd5\uff0c\u7528\u4e8e\u6539\u5584\u4e8c\u53c9\u6811\u7684\u5e76\u884c\u6027\u548c\u53ef\u6269\u5c55\u6027\uff0c\u540c\u65f6\u663e\u8457\u51cf\u5c11\u786c\u4ef6\u4e0a\u7684\u5185\u5b58\u6d41\u91cf\u3002", "result": "MTU\u5728DDR\u7ea7\u522b\u5e26\u5bbd\u4e0b\u76f8\u6bd4CPU\u5b9e\u73b0\u4e86\u9ad8\u8fbe1478\u500d\u7684\u52a0\u901f\u6bd4\uff0c\u63d0\u51fa\u7684\u6df7\u5408\u904d\u5386\u65b9\u6cd5\u76f8\u6bd4\u72ec\u7acb\u65b9\u6cd5\u7684\u6027\u80fd\u63d0\u5347\u9ad8\u8fbe3\u500d\u3002\u8fd9\u4e9b\u7ed3\u679c\u4e3a\u5177\u6709\u4e8c\u53c9\u6811\u7ed3\u6784\u7684ZKP\u5de5\u4f5c\u8d1f\u8f7d\u8bbe\u8ba1\u9ad8\u6548\u786c\u4ef6\u52a0\u901f\u5668\u63d0\u4f9b\u4e86\u5b9e\u7528\u6307\u5bfc\u3002", "conclusion": "\u901a\u8fc7\u7cfb\u7edf\u6027\u7814\u7a76\u4e8c\u53c9\u6811\u904d\u5386\u7b56\u7565\u548c\u4e13\u7528\u786c\u4ef6\u8bbe\u8ba1\uff0c\u6210\u529f\u5b9e\u73b0\u4e86\u96f6\u77e5\u8bc6\u8bc1\u660e\u5de5\u4f5c\u8d1f\u8f7d\u7684\u663e\u8457\u6027\u80fd\u63d0\u5347\uff0c\u4e3aZKP\u786c\u4ef6\u52a0\u901f\u5668\u8bbe\u8ba1\u63d0\u4f9b\u4e86\u91cd\u8981\u7684\u7406\u8bba\u6307\u5bfc\u548c\u5b9e\u8df5\u7ecf\u9a8c\u3002"}}
